{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sloth-Runner Documentation","text":"<p>Welcome to the comprehensive documentation for Sloth-Runner, your flexible tool for task automation and workflow orchestration using Lua scripts.</p> <p>Here you will find detailed guides, API references, and practical examples to help you make the most of Sloth-Runner's power.</p>"},{"location":"#languages","title":"Languages","text":"<ul> <li>English</li> <li>Portugu\u00eas</li> <li>\u4e2d\u6587</li> </ul>"},{"location":"EXAMPLES/","title":"EXAMPLES","text":""},{"location":"EXAMPLES/#example-3-generating-tasks-with-dynamic-data-using-templates","title":"Example 3: Generating Tasks with Dynamic Data using Templates","text":"<p>This example demonstrates how to use the <code>sloth-runner new</code> command with the <code>--set</code> flag to generate a task definition file where content is dynamically injected from the command line. This allows for highly reusable templates that can be customized without modification.</p> <p>To generate and run this example:</p> <ol> <li> <p>Generate the task file: <pre><code>sloth-runner new templated-task --template simple --set custom_message=\"This is a custom message from the CLI!\" -o examples/templated_task.lua\n</code></pre>     This command uses the <code>simple</code> template and injects <code>custom_message</code> into the generated Lua file.</p> </li> <li> <p>Run the generated task: <pre><code>sloth-runner run -f examples/templated_task.lua -g templated-task -t hello_task\n</code></pre>     Observe the output, which should include the custom message you provided.</p> </li> </ol>"},{"location":"EXAMPLES/#pipeline-examplestemplated_tasklua","title":"Pipeline: <code>examples/templated_task.lua</code>","text":"<pre><code>-- examples/templated_task.lua\n--\n-- This file is generated using 'sloth-runner new' with the --set flag.\n-- It demonstrates how to inject dynamic data into templates.\n\nTaskDefinitions = {\n  [\"templated-task\"] = {\n    description = \"A task group generated with dynamic data.\",\n    tasks = {\n      {\n        name = \"hello_task\",\n        description = \"An example task with a custom message.\",\n        command = function(params)\n          local workdir = params.workdir\n          log.info(\"Running example task for group templated-task in: \" .. workdir)\n          log.info(\"Custom message: This is a custom message from the CLI!\")\n          local stdout, stderr, err = exec.command(\"echo 'Hello from sloth-runner!'\")\n          if err then\n            log.error(\"Failed to run example task: \" .. stderr)\n            return false, \"Dummy task failed.\"\n          else\n            log.info(\"Example task completed successfully.\")\n            print(\"Command output: \" .. stdout)\n            return true, \"Dummy task executed successfully.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"LUA_API/","title":"\ud83e\udda5 Sloth Runner - Lua API Reference \u2699\ufe0f","text":"<p>This document provides a detailed reference for the Lua modules exposed by <code>sloth-runner</code>. These modules allow your tasks to interact with the underlying system, manage data, and control execution flow.</p>"},{"location":"LUA_API/#exec-module","title":"<code>exec</code> Module","text":"<p>The <code>exec</code> module allows you to execute external shell commands.</p>"},{"location":"LUA_API/#execcommandcommand-arg1-arg2","title":"<code>exec.command(command, [arg1, arg2, ...])</code>","text":"<p>Executes a shell command with the given arguments.</p> <ul> <li>Parameters:<ul> <li><code>command</code> (string): The command to execute (e.g., <code>\"ls\"</code>, <code>\"docker\"</code>).</li> <li><code>arg...</code> (string, optional): A variable number of string arguments for the command.</li> </ul> </li> <li>Returns:<ul> <li><code>stdout</code> (string): The standard output of the command.</li> <li><code>stderr</code> (string): The standard error output of the command.</li> <li><code>err</code> (string or nil): An error message if the command fails to execute, otherwise <code>nil</code>.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>log.info(\"Listing files in /tmp...\")\nlocal stdout, stderr, err = exec.command(\"ls\", \"-la\", \"/tmp\")\n\nif err then\n    log.error(\"Failed to list files: \" .. stderr)\nelse\n    log.info(\"Files found:\\n\" .. stdout)\nend\n</code></pre>"},{"location":"LUA_API/#fs-module","title":"<code>fs</code> Module","text":"<p>The <code>fs</code> module provides functions for interacting with the file system.</p>"},{"location":"LUA_API/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>Reads the entire content of a file.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> </ul> </li> <li>Returns:<ul> <li><code>content</code> (string or nil): The content of the file, or <code>nil</code> if an error occurs.</li> <li><code>err</code> (string or nil): An error message on failure, otherwise <code>nil</code>.</li> </ul> </li> </ul>"},{"location":"LUA_API/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>Writes a string to a file, overwriting it if it exists.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to write.</li> </ul> </li> <li>Returns:<ul> <li><code>err</code> (string or nil): An error message on failure, otherwise <code>nil</code>.</li> </ul> </li> </ul>"},{"location":"LUA_API/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>Appends a string to the end of a file, creating it if it doesn't exist.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to append.</li> </ul> </li> <li>Returns:<ul> <li><code>err</code> (string or nil): An error message on failure, otherwise <code>nil</code>.</li> </ul> </li> </ul>"},{"location":"LUA_API/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>Checks if a file or directory exists at the given path.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to check.</li> </ul> </li> <li>Returns:<ul> <li><code>exists</code> (boolean): <code>true</code> if the path exists, <code>false</code> otherwise.</li> </ul> </li> </ul>"},{"location":"LUA_API/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>Creates a directory, including any necessary parent directories.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The directory path to create.</li> </ul> </li> <li>Returns:<ul> <li><code>err</code> (string or nil): An error message on failure, otherwise <code>nil</code>.</li> </ul> </li> </ul>"},{"location":"LUA_API/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>Removes a file or an empty directory.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>err</code> (string or nil): An error message on failure, otherwise <code>nil</code>.</li> </ul> </li> </ul>"},{"location":"LUA_API/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>Recursively removes a directory and all its contents.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the directory to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>err</code> (string or nil): An error message on failure, otherwise <code>nil</code>.</li> </ul> </li> </ul>"},{"location":"LUA_API/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>Lists the names of files and directories inside a given path.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the directory.</li> </ul> </li> <li>Returns:<ul> <li><code>files</code> (table or nil): A Lua table (array) of file and directory names, or <code>nil</code> on error.</li> <li><code>err</code> (string or nil): An error message on failure, otherwise <code>nil</code>.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>local dir = \"/tmp/sloth-test\"\nfs.mkdir(dir)\nfs.write(dir .. \"/hello.txt\", \"Hello from Sloth! \ud83e\udda5\")\nlocal files, err = fs.ls(dir)\nif err then\n    log.error(\"Could not list files: \" .. err)\nelse\n    log.info(\"Files in \" .. dir .. \": \" .. data.to_json(files))\nend\nfs.rm_r(dir)\n</code></pre>"},{"location":"LUA_API/#net-module","title":"<code>net</code> Module","text":"<p>The <code>net</code> module provides networking utilities.</p>"},{"location":"LUA_API/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>Performs an HTTP GET request.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to request.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string or nil): The response body.</li> <li><code>status_code</code> (number): The HTTP status code (e.g., <code>200</code>).</li> <li><code>headers</code> (table or nil): A Lua table of response headers.</li> <li><code>err</code> (string or nil): An error message on failure.</li> </ul> </li> </ul>"},{"location":"LUA_API/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>Performs an HTTP POST request.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to post to.</li> <li><code>body</code> (string): The request body.</li> <li><code>headers</code> (table, optional): A Lua table of request headers.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string or nil): The response body.</li> <li><code>status_code</code> (number): The HTTP status code.</li> <li><code>headers</code> (table or nil): A Lua table of response headers.</li> <li><code>err</code> (string or nil): An error message on failure.</li> </ul> </li> </ul>"},{"location":"LUA_API/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>Downloads a file from a URL to a local path.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL of the file to download.</li> <li><code>destination_path</code> (string): The local path to save the file.</li> </ul> </li> <li>Returns:<ul> <li><code>err</code> (string or nil): An error message on failure.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>log.info(\"Fetching a random cat fact...\")\nlocal body, status, _, err = net.http_get(\"https://catfact.ninja/fact\")\nif err or status ~= 200 then\n    log.error(\"Failed to fetch cat fact: \" .. (err or \"status \" .. status))\nelse\n    local fact_data, json_err = data.parse_json(body)\n    if json_err then\n        log.error(\"Could not parse cat fact JSON: \" .. json_err)\n    else\n        log.info(\"\ud83d\udc31 Cat Fact: \" .. fact_data.fact)\n    end\nend\n</code></pre>"},{"location":"LUA_API/#data-module","title":"<code>data</code> Module","text":"<p>The <code>data</code> module provides functions for data serialization and deserialization.</p>"},{"location":"LUA_API/#datato_jsontable","title":"<code>data.to_json(table)</code>","text":"<p>Converts a Lua table to a JSON string.</p> <ul> <li>Parameters:<ul> <li><code>table</code> (table): The Lua table to convert.</li> </ul> </li> <li>Returns:<ul> <li><code>json_string</code> (string or nil): The resulting JSON string.</li> <li><code>err</code> (string or nil): An error message on failure.</li> </ul> </li> </ul>"},{"location":"LUA_API/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>Parses a JSON string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>json_string</code> (string): The JSON string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code> (table or nil): The resulting Lua table.</li> <li><code>err</code> (string or nil): An error message on failure.</li> </ul> </li> </ul>"},{"location":"LUA_API/#datato_yamltable","title":"<code>data.to_yaml(table)</code>","text":"<p>Converts a Lua table to a YAML string.</p> <ul> <li>Parameters:<ul> <li><code>table</code> (table): The Lua table to convert.</li> </ul> </li> <li>Returns:<ul> <li><code>yaml_string</code> (string or nil): The resulting YAML string.</li> <li><code>err</code> (string or nil): An error message on failure.</li> </ul> </li> </ul>"},{"location":"LUA_API/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>Parses a YAML string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>yaml_string</code> (string): The YAML string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code> (table or nil): The resulting Lua table.</li> <li><code>err</code> (string or nil): An error message on failure.</li> </ul> </li> </ul>"},{"location":"LUA_API/#log-module","title":"<code>log</code> Module","text":"<p>The <code>log</code> module provides simple logging functions.</p>"},{"location":"LUA_API/#loginfomessage","title":"<code>log.info(message)</code>","text":""},{"location":"LUA_API/#logwarnmessage","title":"<code>log.warn(message)</code>","text":""},{"location":"LUA_API/#logerrormessage","title":"<code>log.error(message)</code>","text":""},{"location":"LUA_API/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>log.info(\"Starting the task.\")\nlog.warn(\"This is a warning.\")\nlog.error(\"Something went wrong!\")\nlog.debug(\"Here is some debug info.\")\n</code></pre>"},{"location":"LUA_API/#salt-module","title":"<code>salt</code> Module","text":"<p>The <code>salt</code> module allows for direct execution of SaltStack commands.</p>"},{"location":"LUA_API/#saltcmdcommand_type-arg1-arg2","title":"<code>salt.cmd(command_type, [arg1, arg2, ...])</code>","text":"<p>Executes a SaltStack command.</p> <ul> <li>Parameters:<ul> <li><code>command_type</code> (string): The type of command, either <code>\"salt\"</code> or <code>\"salt-call\"</code>.</li> <li><code>arg...</code> (string, optional): A variable number of string arguments for the command.</li> </ul> </li> <li>Returns:<ul> <li><code>stdout</code> (string): The standard output of the command.</li> <li><code>stderr</code> (string): The standard error output of the command.</li> <li><code>err</code> (string or nil): An error message if the command fails, otherwise <code>nil</code>.</li> </ul> </li> </ul> <p>Example:</p> <pre><code>-- Ping all minions\nlocal stdout, stderr, err = salt.cmd(\"salt\", \"*\", \"test.ping\")\nif err then\n    log.error(\"Salt command failed: \" .. stderr)\nelse\n    log.info(\"Salt ping result:\\n\" .. stdout)\nend\n</code></pre>"},{"location":"TUTORIAL/","title":"\ud83e\udda5 Getting Started Tutorial","text":"<p>Welcome to Sloth Runner! This guide will walk you through creating and running your first set of tasks.</p>"},{"location":"TUTORIAL/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have: 1.  Go (version 1.21+) installed on your system. 2.  The <code>sloth-runner</code> executable installed. If not, follow the installation instructions in the main README.md.</p>"},{"location":"TUTORIAL/#step-1-create-your-first-task-file","title":"Step 1: Create Your First Task File","text":"<p>Let's create a simple Lua file named <code>my_tasks.lua</code>. This file will define our tasks.</p> <pre><code>-- my_tasks.lua\n\nTaskDefinitions = {\n    hello_world_group = {\n        description = \"A simple group to say hello\",\n        tasks = {\n            {\n                name = \"say_hello\",\n                description = \"Prints a friendly greeting\",\n                command = \"echo 'Hello from Sloth Runner! \ud83e\udda5'\"\n            }\n        }\n    }\n}\n</code></pre> <p>This defines a group named <code>hello_world_group</code> which contains a single task, <code>say_hello</code>. This task simply executes a shell command to print a message.</p>"},{"location":"TUTORIAL/#step-2-run-your-task","title":"Step 2: Run Your Task","text":"<p>Now, let's run the task using the <code>sloth-runner</code> CLI. Open your terminal in the same directory where you saved <code>my_tasks.lua</code> and run:</p> <pre><code>sloth-runner run -f my_tasks.lua\n</code></pre> <p>You should see the spinner animation and then a success message, indicating your task ran correctly!</p>"},{"location":"TUTORIAL/#step-3-add-a-dependent-task","title":"Step 3: Add a Dependent Task","text":"<p>Let's make it more interesting by adding a second task that depends on the first one. Modify <code>my_tasks.lua</code>:</p> <pre><code>-- my_tasks.lua\n\nTaskDefinitions = {\n    hello_world_group = {\n        description = \"A simple group to say hello\",\n        tasks = {\n            {\n                name = \"say_hello\",\n                description = \"Prints a friendly greeting\",\n                command = function()\n                    -- We return a table as output\n                    return true, \"echo 'Hello from Sloth Runner! \ud83e\udda5'\", { message = \"Hello World\" }\n                end\n            },\n            {\n                name = \"show_message\",\n                description = \"Shows the message from the first task\",\n                depends_on = \"say_hello\", -- This creates the dependency\n                command = function(params, inputs)\n                    -- The output from 'say_hello' is available here!\n                    local received_message = inputs.say_hello.message\n                    local command_string = \"echo 'The first task said: \" .. received_message .. \"'\"\n                    return true, command_string, { confirmation = \"Message received!\" }\n                end\n            }\n        }\n    }\n}\n</code></pre> <p>Changes: -   The <code>say_hello</code> task now has a <code>command</code> function that returns an output table: <code>{ message = \"Hello World\" }</code>. -   The new <code>show_message</code> task <code>depends_on</code> <code>say_hello</code>. -   The <code>command</code> function for <code>show_message</code> receives the output from its dependency in the <code>inputs</code> argument and uses it to build its own command.</p>"},{"location":"TUTORIAL/#step-4-run-the-dependent-task","title":"Step 4: Run the Dependent Task","text":"<p>Now, let's run only the final task, <code>show_message</code>. Sloth Runner will automatically figure out that it needs to run <code>say_hello</code> first.</p> <pre><code>sloth-runner run -f my_tasks.lua -t show_message\n</code></pre> <p>You will see both tasks execute in the correct order.</p>"},{"location":"TUTORIAL/#whats-next","title":"What's Next?","text":"<p>Congratulations! You've successfully created and run a task pipeline.</p> <ul> <li>Explore the other files in the <code>/examples</code> directory to see more complex workflows.</li> <li>Check out the detailed Lua API Reference to see all the powerful modules (<code>fs</code>, <code>net</code>, <code>data</code>, etc.) you can use in your tasks.</li> </ul>"},{"location":"advanced-examples/","title":"Exemplos Avan\u00e7ados","text":"<p>Esta se\u00e7\u00e3o apresenta exemplos mais complexos e cen\u00e1rios de uso que combinam m\u00faltiplos m\u00f3dulos do Sloth-Runner para automa\u00e7\u00e3o de ponta a ponta.</p>"},{"location":"advanced-examples/#exemplo-completo-pipeline-de-cicd-end-to-end","title":"Exemplo Completo: Pipeline de CI/CD End-to-End","text":"<p>Este tutorial demonstra como construir um pipeline de CI/CD completo usando os m\u00f3dulos <code>git</code>, <code>pulumi</code> e <code>salt</code> para versionar c\u00f3digo, provisionar infraestrutura e implantar uma aplica\u00e7\u00e3o.</p>"},{"location":"advanced-examples/#cenario","title":"Cen\u00e1rio","text":"<p>Imagine que voc\u00ea tem um projeto de infraestrutura Pulumi e um projeto de aplica\u00e7\u00e3o. Voc\u00ea quer automatizar o seguinte fluxo:</p> <ol> <li>Clonar o reposit\u00f3rio da infraestrutura.</li> <li>Atualizar um arquivo de vers\u00e3o dentro do reposit\u00f3rio.</li> <li>Committar e empurrar essa altera\u00e7\u00e3o para o Git.</li> <li>Executar <code>pulumi up</code> para provisionar ou atualizar a infraestrutura (por exemplo, um ambiente de staging).</li> <li>Usar o Salt para configurar os servidores provisionados e implantar a aplica\u00e7\u00e3o.</li> </ol>"},{"location":"advanced-examples/#script-lua-examplespulumi_git_combined_examplelua","title":"Script Lua (<code>examples/pulumi_git_combined_example.lua</code>)","text":"<pre><code>-- examples/pulumi_git_combined_example.lua\n\ncommand = function(params)\n    log.info(\"Iniciando exemplo combinado Pulumi e Git...\")\n\n    local pulumi_repo_url = \"https://github.com/my-org/my-pulumi-infra.git\" -- Exemplo de repo Pulumi\n    local pulumi_repo_path = \"./pulumi-infra-checkout\"\n    local new_infra_version = params.infra_version or \"v1.0.0-infra\"\n    local pulumi_project_workdir = pulumi_repo_path .. \"/my-vpc-project\" -- Subdiret\u00f3rio dentro do repo clonado\n    local repo\n\n    -- 1. Clonar ou abrir o reposit\u00f3rio Pulumi\n    log.info(\"Step 1: Cloning or opening Pulumi repository...\")\n    if not fs.exists(pulumi_repo_path) then\n        log.info(\"Cloning Pulumi repository: \" .. pulumi_repo_url)\n        local cloned_repo, clone_err = git.clone(pulumi_repo_url, pulumi_repo_path)\n        if clone_err then\n            log.error(\"Failed to clone Pulumi repository: \" .. clone_err)\n            return false, \"Git clone failed.\"\n        end\n        repo = cloned_repo\n    else\n        log.info(\"Pulumi repository already exists, opening local reference.\")\n        local opened_repo, open_err = git.repo(pulumi_repo_path)\n        if open_err then\n            log.error(\"Failed to open Pulumi repository: \" .. open_err)\n            return false, \"Git repo open failed.\"\n        end\n        repo = opened_repo\n    end\n\n    if not repo then\n        return false, \"Failed to get Pulumi repository reference.\"\n    end\n\n    -- 2. Atualizar o reposit\u00f3rio (pull)\n    log.info(\"Step 2: Pulling latest changes from Pulumi repository...\")\n    repo:checkout(\"main\"):pull(\"origin\", \"main\")\n    local pull_result = repo:result()\n    if not pull_result.success then\n        log.error(\"Failed to pull Pulumi repository: \" .. pull_result.stderr)\n        return false, \"Git pull failed.\"\n    end\n    log.info(\"Pulumi repository updated. Stdout: \" .. pull_result.stdout)\n\n    -- 3. Simular uma altera\u00e7\u00e3o no c\u00f3digo Pulumi (e.g., atualizar um arquivo de vers\u00e3o)\n    log.info(\"Step 3: Simulating a change in Pulumi code (updating version file)...\")\n    local infra_version_file = pulumi_repo_path .. \"/INFRA_VERSION\"\n    fs.write(infra_version_file, new_infra_version)\n    log.info(\"Updated INFRA_VERSION file to: \" .. new_infra_version)\n\n    -- 4. Commitar e empurrar as mudan\u00e7as\n    log.info(\"Step 4: Committing and pushing infrastructure version change...\")\n    local commit_message = \"ci: Bump infrastructure version to \" .. new_infra_version\n    repo:add(infra_version_file)\n        :commit(commit_message)\n        :push(\"origin\", \"main\") -- Sem follow_tags aqui, apenas o commit\n\n    local push_result = repo:result()\n    if not push_result.success then\n        log.error(\"Failed to push infrastructure changes: \" .. push_result.stderr)\n        return false, \"Git push failed for infra changes.\"\n    end\n    log.info(\"Infrastructure version change pushed. Stdout: \" .. push_result.stdout)\n\n    -- 5. Executar 'pulumi up' para o projeto\n    log.info(\"Step 5: Running pulumi up for the infrastructure project...\")\n    local infra_stack = pulumi.stack(\"my-org/my-infra/dev\", {\n        workdir = pulumi_project_workdir -- Usar o subdiret\u00f3rio do projeto Pulumi\n    })\n\n    local pulumi_up_result = infra_stack:up({ non_interactive = true })\n\n    if not pulumi_up_result.success then\n        log.error(\"Pulumi up failed: \" .. pulumi_up_result.stderr)\n        return false, \"Pulumi up failed.\"\n    end\n    log.info(\"Pulumi up completed successfully. Stdout: \" .. pulumi_up_result.stdout)\n\n    -- 6. Configurar e implantar a aplica\u00e7\u00e3o usando Salt (Exemplo)\n    log.info(\"Step 6: Configuring and deploying application using Salt...\")\n    -- Assumindo que o Pulumi up forneceu o IP ou hostname do servidor\n    -- Para este exemplo, vamos usar um IP fict\u00edcio\n    local server_ip = \"192.168.1.100\" -- Substitua pelo output real do Pulumi, se houver\n    local salt_target = salt.target(server_ip)\n\n    log.info(\"Running Salt test.ping on \" .. server_ip .. \"...\")\n    salt_target:ping()\n    local ping_result = salt_target:result()\n    if not ping_result.success then\n        log.error(\"Salt ping failed for \" .. server_ip .. \": \" .. ping_result.stderr)\n        return false, \"Salt ping failed.\"\n    end\n    log.info(\"Salt ping successful. Stdout: \" .. data.to_json(ping_result.stdout)) -- Assumindo que ping retorna JSON\n\n    log.info(\"Applying Salt state 'app.install' on \" .. server_ip .. \"...\")\n    salt_target:cmd('state.apply', 'app.install')\n    local salt_apply_result = salt_target:result()\n    if not salt_apply_result.success then\n        log.error(\"Salt state.apply failed for \" .. server_ip .. \": \" .. salt_apply_result.stderr)\n        return false, \"Salt state.apply failed.\"\n    end\n    log.info(\"Salt state.apply successful. Stdout: \" .. data.to_json(salt_apply_result.stdout))\n\n    log.info(\"Exemplo combinado Pulumi e Git conclu\u00eddo com sucesso.\")\n    return true, \"Combined Pulumi and Git example finished.\"\nend\n\nTaskDefinitions = {\n    pulumi_git_combined_example = {\n        description = \"Demonstrates combined usage of 'pulumi' and 'git' modules for CI/CD pipeline.\",\n        tasks = {\n            {\n                name = \"run_combined_example\",\n                command = command,\n                params = {\n                    infra_version = \"v1.0.0-test-combined\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Voltar ao \u00cdndice</p>"},{"location":"advanced-features/","title":"Advanced Features","text":"<p>This document covers some of the more advanced features of <code>sloth-runner</code>, designed to enhance your development, debugging, and configuration workflows.</p>"},{"location":"advanced-features/#interactive-task-runner","title":"Interactive Task Runner","text":"<p>For complex workflows, it can be useful to step through tasks one by one, inspect their outputs, and decide whether to proceed, skip, or retry a task. The interactive task runner provides a powerful way to debug and develop your task pipelines.</p> <p>To use the interactive runner, add the <code>--interactive</code> flag to the <code>sloth-runner run</code> command:</p> <pre><code>sloth-runner run -f examples/basic_pipeline.lua --yes --interactive\n</code></pre> <p>When enabled, the runner will pause before executing each task and prompt you for an action:</p> <pre><code>? Task: fetch_data (Simulates fetching raw data)\n&gt; run\n  skip\n  abort\n  continue\n</code></pre> <p>Actions:</p> <ul> <li>run: (Default) Proceeds with executing the current task.</li> <li>skip: Skips the current task and moves to the next one in the execution order.</li> <li>abort: Aborts the entire task execution immediately.</li> <li>continue: Executes the current task and all subsequent tasks without further prompts, effectively disabling interactive mode for the rest of the run.</li> </ul>"},{"location":"advanced-features/#enhanced-valuesyaml-templating","title":"Enhanced <code>values.yaml</code> Templating","text":"<p>You can make your <code>values.yaml</code> files more dynamic by using Go template syntax to inject environment variables. This is particularly useful for providing sensitive information (like tokens or keys) or environment-specific configurations without hardcoding them.</p> <p><code>sloth-runner</code> processes <code>values.yaml</code> as a Go template, making any environment variables available under the <code>.Env</code> map.</p> <p>Example:</p> <ol> <li> <p>Create a <code>values.yaml</code> file with a template placeholder:</p> <p><pre><code># values.yaml\napi_key: \"{{ .Env.MY_API_KEY }}\"\nregion: \"{{ .Env.AWS_REGION | default \"us-east-1\" }}\"\n</code></pre> Note: You can use <code>default</code> to provide a fallback value if the environment variable is not set.</p> </li> <li> <p>Create a Lua task that uses these values:</p> <pre><code>-- my_task.lua\nTaskDefinitions = {\n  my_group = {\n    tasks = {\n      {\n        name = \"deploy\",\n        command = function()\n          log.info(\"Deploying to region: \" .. values.region)\n          log.info(\"Using API key (first 5 chars): \" .. string.sub(values.api_key, 1, 5) .. \"...\")\n          return true, \"Deployment successful.\"\n        end\n      }\n    }\n  }\n}\n</code></pre> </li> <li> <p>Run the task with the environment variables set:</p> <pre><code>export MY_API_KEY=\"supersecretkey12345\"\nexport AWS_REGION=\"us-west-2\"\n\nsloth-runner run -f my_task.lua -v values.yaml --yes\n</code></pre> </li> </ol> <p>Output:</p> <p>The output will show that the values from the environment variables were correctly substituted:</p> <pre><code>INFO Deploying to region: us-west-2\nINFO Using API key (first 5 chars): super...\n</code></pre>"},{"location":"core-concepts/","title":"Conceitos Essenciais","text":"<p>Este documento explica os conceitos fundamentais do Sloth-Runner, ajudando voc\u00ea a entender como as tarefas s\u00e3o definidas e executadas.</p>"},{"location":"core-concepts/#definicao-de-tarefas-em-lua","title":"Defini\u00e7\u00e3o de Tarefas em Lua","text":"<p>As tarefas no Sloth-Runner s\u00e3o definidas em arquivos Lua, tipicamente dentro de uma tabela global chamada <code>TaskDefinitions</code>. Esta tabela \u00e9 um mapa onde as chaves s\u00e3o os nomes dos grupos de tarefas e os valores s\u00e3o tabelas de grupo.</p>"},{"location":"core-concepts/#estrutura-de-um-grupo-de-tarefas","title":"Estrutura de um Grupo de Tarefas","text":"<p>Cada grupo de tarefas possui: *   <code>description</code>: Uma descri\u00e7\u00e3o textual do grupo. *   <code>tasks</code>: Uma tabela contendo as defini\u00e7\u00f5es das tarefas individuais.</p>"},{"location":"core-concepts/#estrutura-de-uma-tarefa-individual","title":"Estrutura de uma Tarefa Individual","text":"<p>Cada tarefa individual pode ter os seguintes campos:</p> <ul> <li><code>name</code> (string): O nome \u00fanico da tarefa dentro do seu grupo.</li> <li><code>description</code> (string): Uma breve descri\u00e7\u00e3o do que a tarefa faz.</li> <li><code>command</code> (string ou fun\u00e7\u00e3o Lua):<ul> <li>Se for uma <code>string</code>, ser\u00e1 executada como um comando de shell.</li> <li>Se for uma <code>fun\u00e7\u00e3o Lua</code>, esta fun\u00e7\u00e3o ser\u00e1 executada. Ela pode receber <code>params</code> (par\u00e2metros da tarefa) e <code>deps</code> (outputs de tarefas das quais ela depende). A fun\u00e7\u00e3o deve retornar <code>true</code> para sucesso, <code>false</code> para falha, e opcionalmente uma mensagem e uma tabela de outputs.</li> </ul> </li> <li><code>async</code> (booleano, opcional): Se <code>true</code>, a tarefa ser\u00e1 executada assincronamente. Padr\u00e3o \u00e9 <code>false</code>.</li> <li><code>pre_exec</code> (fun\u00e7\u00e3o Lua, opcional): Uma fun\u00e7\u00e3o Lua a ser executada antes do <code>command</code> principal da tarefa.</li> <li><code>post_exec</code> (fun\u00e7\u00e3o Lua, opcional): Uma fun\u00e7\u00e3o Lua a ser executada ap\u00f3s o <code>command</code> principal da tarefa.</li> <li><code>depends_on</code> (string ou tabela de strings, opcional): Nomes de tarefas que devem ser conclu\u00eddas com sucesso antes que esta tarefa possa ser executada.</li> <li><code>retries</code> (n\u00famero, opcional): O n\u00famero de vezes que a tarefa ser\u00e1 tentada novamente em caso de falha. Padr\u00e3o \u00e9 <code>0</code>.</li> <li><code>timeout</code> (string, opcional): Uma dura\u00e7\u00e3o (ex: \"10s\", \"1m\") ap\u00f3s a qual a tarefa ser\u00e1 terminada se ainda estiver em execu\u00e7\u00e3o.</li> <li><code>run_if</code> (string ou fun\u00e7\u00e3o Lua, opcional): A tarefa s\u00f3 ser\u00e1 executada se esta condi\u00e7\u00e3o for verdadeira. Pode ser um comando shell (c\u00f3digo de sa\u00edda 0 para sucesso) ou uma fun\u00e7\u00e3o Lua (retorna <code>true</code> para sucesso).</li> <li><code>abort_if</code> (string ou fun\u00e7\u00e3o Lua, opcional): Se esta condi\u00e7\u00e3o for verdadeira, toda a execu\u00e7\u00e3o do workflow ser\u00e1 abortada. Pode ser um comando shell (c\u00f3digo de sa\u00edda 0 para sucesso) ou uma fun\u00e7\u00e3o Lua (retorna <code>true</code> para sucesso).</li> <li><code>next_if_fail</code> (string ou tabela de strings, opcional): Nomes de tarefas a serem executadas se esta tarefa falhar.</li> <li><code>artifacts</code> (string ou tabela de strings, opcional): Um padr\u00e3o de arquivo (glob) ou uma lista de padr\u00f5es que especificam quais arquivos do <code>workdir</code> da tarefa devem ser salvos como artefatos ap\u00f3s a execu\u00e7\u00e3o bem-sucedida.</li> <li><code>consumes</code> (string ou tabela de strings, opcional): O nome de um artefato (ou uma lista de nomes) de uma tarefa anterior que deve ser copiado para o <code>workdir</code> desta tarefa antes de sua execu\u00e7\u00e3o.</li> </ul>"},{"location":"core-concepts/#gerenciamento-de-artefatos","title":"Gerenciamento de Artefatos","text":"<p>O Sloth-Runner permite que as tarefas compartilhem arquivos entre si atrav\u00e9s de um mecanismo de artefatos. Uma tarefa pode \"produzir\" um ou mais arquivos como artefatos, e tarefas subsequentes podem \"consumir\" esses artefatos.</p> <p>Isso \u00e9 \u00fatil para pipelines de CI/CD, onde uma etapa de compila\u00e7\u00e3o pode gerar um bin\u00e1rio (artefato), que \u00e9 ent\u00e3o usado por uma etapa de teste ou de implanta\u00e7\u00e3o.</p>"},{"location":"core-concepts/#como-funciona","title":"Como Funciona","text":"<ol> <li> <p>Produzindo Artefatos: Adicione a chave <code>artifacts</code> \u00e0 sua defini\u00e7\u00e3o de tarefa. O valor pode ser um \u00fanico padr\u00e3o de arquivo (ex: <code>\"report.txt\"</code>) ou uma lista (ex: <code>{\"*.log\", \"app.bin\"}</code>). Ap\u00f3s a tarefa ser executada com sucesso, o runner procurar\u00e1 por arquivos no <code>workdir</code> da tarefa que correspondam a esses padr\u00f5es e os copiar\u00e1 para um armazenamento de artefatos compartilhado para a pipeline.</p> </li> <li> <p>Consumindo Artefatos: Adicione a chave <code>consumes</code> \u00e0 defini\u00e7\u00e3o de outra tarefa (que normalmente <code>depends_on</code> da tarefa produtora). O valor deve ser o nome do arquivo do artefato que voc\u00ea deseja usar (ex: <code>\"report.txt\"</code>). Antes que esta tarefa seja executada, o runner copiar\u00e1 o artefato nomeado do armazenamento compartilhado para o <code>workdir</code> desta tarefa, tornando-o dispon\u00edvel para o <code>command</code>.</p> </li> </ol>"},{"location":"core-concepts/#exemplo-de-artefatos","title":"Exemplo de Artefatos","text":"<pre><code>TaskDefinitions = {\n  [\"ci-pipeline\"] = {\n    description = \"Demonstra o uso de artefatos.\",\n    create_workdir_before_run = true,\n    tasks = {\n      {\n        name = \"build\",\n        description = \"Cria um bin\u00e1rio e o declara como um artefato.\",\n        command = \"echo 'binary_content' &gt; app.bin\",\n        artifacts = {\"app.bin\"}\n      },\n      {\n        name = \"test\",\n        description = \"Consome o bin\u00e1rio para executar testes.\",\n        depends_on = \"build\",\n        consumes = {\"app.bin\"},\n        command = function(params)\n          -- Neste ponto, 'app.bin' existe no workdir desta tarefa\n          local content, err = fs.read(params.workdir .. \"/app.bin\")\n          if content == \"binary_content\" then\n            log.info(\"Artefato consumido com sucesso!\")\n            return true\n          else\n            return false, \"Conte\u00fado do artefato incorreto!\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre> <p>\ud83d\udcdc Defining Tasks in Lua Tasks are defined in Lua files, typically within a <code>TaskDefinitions</code> table. Each task can have a name, description, and a <code>command</code> (either a string for a shell command or a Lua function). For modular pipelines, tasks can declare dependencies using <code>depends_on</code> and receive outputs from previous tasks via the <code>inputs</code> table.</p> <p>Here's an example using our GCP Hub-and-Spoke orchestration pipeline, demonstrating how tasks are chained and how data flows between them:</p> <pre><code>-- examples/gcp_pulumi_orchestration.lua\n--\n-- This pipeline demonstrates a complete, modular orchestration for deploying a GCP Hub and Spoke network.\n\nTaskDefinitions = {\n  gcp_deployment = {\n    description = \"Orchestrates the deployment of a GCP Hub and Spoke architecture.\",\n    tasks = {\n      {\n        name = \"setup_workspace\",\n        command = function()\n          log.info(\"Cleaning up previous run artifacts...\")\n          fs.rm_r(values.paths.base_workdir)\n          fs.mkdir(values.paths.base_workdir)\n          return true, \"Workspace cleaned and created.\"\n        end\n      },\n      {\n        name = \"clone_hub_repo\",\n        depends_on = \"setup_workspace\",\n        command = function()\n          log.info(\"Cloning Hub repository...\")\n          local hub_repo = git.clone(values.repos.hub.url, values.repos.hub.path)\n          log.info(\"Hub repo cloned to: \" .. hub_repo.path)\n          -- Return the cloned repository object to be used by dependent tasks\n          return true, \"Hub repo cloned.\", { repo = hub_repo }\n        end\n      },\n      {\n        name = \"clone_spoke_repo\",\n        depends_on = \"setup_workspace\",\n        command = function()\n          log.info(\"Cloning Spoke repository...\")\n          local spoke_repo = git.clone(values.repos.spoke.url, values.repos.spoke.path)\n          log.info(\"Spoke repo cloned to: \" .. spoke_repo.path)\n          -- Return the cloned repository object\n          return true, \"Spoke repo cloned.\", { repo = spoke_repo }\n        end\n      },\n      {\n        name = \"setup_spoke_venv\",\n        depends_on = \"clone_spoke_repo\", -- Depends on the spoke repo being cloned\n        command = function(inputs) -- Receives inputs from dependent tasks\n          log.info(\"Setting up Python venv for the host manager...\")\n          local spoke_repo = inputs.clone_spoke_repo.repo -- Access the repo from the 'clone_spoke_repo' task's output\n          local spoke_venv = python.venv(values.paths.spoke_venv)\n            :create()\n            :pip(\"install setuptools\")\n            :pip(\"install -r \" .. spoke_repo.path .. \"/requirements.txt\")\n          log.info(\"Python venv for spoke is ready at: \" .. values.paths.spoke_venv)\n          -- Return the venv object\n          return true, \"Spoke venv created.\", { venv = spoke_venv, repo = spoke_repo }\n        end\n      },\n      {\n        name = \"deploy_hub_stack\",\n        depends_on = \"clone_hub_repo\", -- Depends on the hub repo being cloned\n        command = function(inputs) -- Receives inputs from dependent tasks\n          log.info(\"Deploying GCP Hub Network...\")\n          local hub_repo = inputs.clone_hub_repo.repo -- Access the repo from the 'clone_hub_repo' task's output\n          local hub_stack = pulumi.stack(values.pulumi.hub.stack_name, {\n            workdir = hub_repo.path,\n            login = values.pulumi.login_url\n          })\n          hub_stack:select():config_map(values.pulumi.hub.config)\n          local hub_result = hub_stack:up({ yes = true })\n          if not hub_result.success then\n            log.error(\"Hub stack deployment failed: \" .. hub_result.stdout)\n            return false, \"Hub stack deployment failed.\"\n          end\n          log.info(\"Hub stack deployed successfully.\")\n          local hub_outputs = hub_stack:outputs()\n          -- Return the outputs of the hub stack\n          return true, \"Hub stack deployed.\", { outputs = hub_outputs }\n        end\n      },\n      {\n        name = \"deploy_spoke_stack\",\n        depends_on = { \"setup_spoke_venv\", \"deploy_hub_stack\" }, -- Depends on venv setup and hub deployment\n        command = function(inputs) -- Receives inputs from multiple dependent tasks\n          log.info(\"Deploying GCP Spoke Host...\")\n          local spoke_repo = inputs.setup_spoke_venv.repo -- Access repo from venv setup task\n          local spoke_venv = inputs.setup_spoke_venv.venv -- Access venv from venv setup task\n          local hub_outputs = inputs.deploy_hub_stack.outputs -- Access hub outputs from hub deployment task\n\n          local spoke_stack = pulumi.stack(values.pulumi.spoke.stack_name, {\n            workdir = spoke_repo.path,\n            login = values.pulumi.login_url,\n            venv = spoke_venv\n          })\n\n          local spoke_config = values.pulumi.spoke.config\n          spoke_config.hub_network_self_link = hub_outputs.network_self_link -- Use hub output in spoke config\n\n          spoke_stack:select():config_map(spoke_config)\n          local spoke_result = spoke_stack:up({ yes = true })\n          if not spoke_result.success then\n            log.error(\"Spoke stack deployment failed: \" .. spoke_result.stdout)\n            return false, \"Spoke stack deployment failed.\"\n          end\n          log.info(\"Spoke stack deployed successfully.\")\n          local spoke_outputs = spoke_stack:outputs()\n          return true, \"Spoke stack deployed.\", { outputs = spoke_outputs }\n        end\n      },\n      {\n          name = \"final_summary\",\n          depends_on = \"deploy_spoke_stack\", -- Depends on the final deployment task\n          command = function(inputs)\n              log.info(\"GCP Hub and Spoke orchestration completed successfully!\")\n              -- You can access outputs from dependencies like this:\n              -- local hub_outputs = inputs.deploy_hub_stack.outputs\n              -- local spoke_outputs = inputs.deploy_spoke_stack.outputs\n              return true, \"Orchestration successful.\"\n          end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"core-concepts/#parametros-e-outputs","title":"Par\u00e2metros e Outputs","text":"<ul> <li>Par\u00e2metros (<code>params</code>): Podem ser passados para as tarefas via linha de comando ou definidos na pr\u00f3pria tarefa. A fun\u00e7\u00e3o <code>command</code> e as fun\u00e7\u00f5es <code>run_if</code>/<code>abort_if</code> podem acess\u00e1-los.</li> <li>Outputs (<code>deps</code>): As fun\u00e7\u00f5es Lua de <code>command</code> podem retornar uma tabela de outputs. Tarefas que dependem desta tarefa podem acessar esses outputs atrav\u00e9s do argumento <code>deps</code>.</li> </ul>"},{"location":"core-concepts/#exportando-dados-para-a-cli","title":"Exportando Dados para a CLI","text":"<p>Al\u00e9m dos outputs de tarefas, o <code>sloth-runner</code> fornece uma fun\u00e7\u00e3o global <code>export()</code> que permite passar dados de dentro de um script diretamente para a sa\u00edda da linha de comando.</p>"},{"location":"core-concepts/#exporttabela","title":"<code>export(tabela)</code>","text":"<ul> <li><code>tabela</code>: Uma tabela Lua cujos pares de chave-valor ser\u00e3o exportados.</li> </ul> <p>Quando voc\u00ea executa uma tarefa com a flag <code>--return</code>, os dados passados para a fun\u00e7\u00e3o <code>export()</code> ser\u00e3o mesclados com o output da tarefa final e impressos como um \u00fanico objeto JSON. Se houver chaves duplicadas, o valor da fun\u00e7\u00e3o <code>export()</code> ter\u00e1 preced\u00eancia.</p> <p>Isso \u00e9 \u00fatil para extrair informa\u00e7\u00f5es importantes de qualquer ponto do seu script, n\u00e3o apenas do valor de retorno da \u00faltima tarefa.</p> <p>Exemplo:</p> <pre><code>command = function(params, deps)\n  -- L\u00f3gica da tarefa...\n  local some_data = {\n    info = \"Este \u00e9 um dado importante\",\n    timestamp = os.time()\n  }\n\n  -- Exporta a tabela\n  export(some_data)\n\n  -- A tarefa pode continuar e retornar seu pr\u00f3prio output\n  return true, \"Tarefa conclu\u00edda\", { status = \"ok\" }\nend\n</code></pre> <p>Executando com <code>--return</code> resultaria em uma sa\u00edda JSON como: <pre><code>{\n  \"info\": \"Este \u00e9 um dado importante\",\n  \"timestamp\": 1678886400,\n  \"status\": \"ok\"\n}\n</code></pre></p>"},{"location":"core-concepts/#modulos-built-in","title":"M\u00f3dulos Built-in","text":"<p>O Sloth-Runner exp\u00f5e v\u00e1rias funcionalidades Go como m\u00f3dulos Lua, permitindo que suas tarefas interajam com o sistema e servi\u00e7os externos. Al\u00e9m dos m\u00f3dulos b\u00e1sicos (<code>exec</code>, <code>fs</code>, <code>net</code>, <code>data</code>, <code>log</code>, <code>import</code>, <code>parallel</code>), o Sloth-Runner agora inclui m\u00f3dulos avan\u00e7ados para Git, Pulumi e Salt.</p> <p>Esses m\u00f3dulos oferecem uma API fluente e intuitiva para automa\u00e7\u00e3o complexa.</p> <ul> <li><code>exec</code> module: Para executar comandos de shell arbitr\u00e1rios.</li> <li><code>fs</code> module: Para opera\u00e7\u00f5es de sistema de arquivos (leitura, escrita, etc.).</li> <li><code>net</code> module: Para fazer requisi\u00e7\u00f5es HTTP e downloads.</li> <li><code>data</code> module: Para parsear e serializar JSON e YAML.</li> <li><code>log</code> module: Para registrar mensagens no console do Sloth-Runner.</li> <li><code>import</code> function: Para importar outros arquivos Lua e reutilizar tarefas.</li> <li><code>parallel</code> function: Para executar tarefas em paralelo.</li> <li><code>git</code> module: Para interagir com reposit\u00f3rios Git.</li> <li><code>pulumi</code> module: Para orquestrar stacks do Pulumi.</li> <li><code>salt</code> module: Para executar comandos SaltStack.</li> </ul> <p>Para detalhes sobre cada m\u00f3dulo, consulte suas respectivas se\u00e7\u00f5es na documenta\u00e7\u00e3o.</p> <p>Voltar ao \u00cdndice</p>"},{"location":"getting-started/","title":"In\u00edcio R\u00e1pido","text":"<p>Bem-vindo ao Sloth-Runner! Este guia o ajudar\u00e1 a come\u00e7ar a usar a ferramenta rapidamente.</p>"},{"location":"getting-started/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Para instalar o <code>sloth-runner</code> em seu sistema, voc\u00ea pode usar o script <code>install.sh</code> fornecido. Este script detecta automaticamente seu sistema operacional e arquitetura, baixa a vers\u00e3o mais recente do GitHub e coloca o execut\u00e1vel <code>sloth-runner</code> em <code>/usr/local/bin</code>.</p> <pre><code>bash &lt;(curl -sL https://raw.githubusercontent.com/chalkan3/sloth-runner/master/install.sh)\n</code></pre> <p>Nota: O script <code>install.sh</code> requer privil\u00e9gios de <code>sudo</code> para mover o execut\u00e1vel para <code>/usr/local/bin</code>.</p>"},{"location":"getting-started/#uso-basico","title":"Uso B\u00e1sico","text":"<p>Para executar um arquivo de tarefa Lua:</p> <pre><code>sloth-runner run -f examples/basic_pipeline.lua\n</code></pre> <p>Para listar as tarefas em um arquivo:</p> <pre><code>sloth-runner list -f examples/basic_pipeline.lua\n</code></pre>"},{"location":"getting-started/#agendador-de-tarefas-novo","title":"Agendador de Tarefas (Novo!)","text":"<p>O Sloth-Runner agora inclui um poderoso agendador de tarefas que permite automatizar a execu\u00e7\u00e3o de seus fluxos de trabalho em segundo plano usando sintaxe cron. Para mais detalhes sobre como configurar e usar o agendador, consulte a documenta\u00e7\u00e3o completa em Agendador de Tarefas.</p>"},{"location":"getting-started/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Agora que voc\u00ea tem o Sloth-Runner instalado e funcionando, explore os Conceitos Essenciais para entender como definir suas tarefas, ou mergulhe diretamente nos novos M\u00f3dulos Built-in para automa\u00e7\u00e3o avan\u00e7ada com Git, Pulumi e Salt.</p>"},{"location":"repl/","title":"Interactive REPL","text":"<p>The <code>sloth-runner repl</code> command drops you into an interactive Read-Eval-Print Loop (REPL) session. This is a powerful tool for debugging, exploration, and quick experimentation with the sloth-runner modules.</p>"},{"location":"repl/#starting-the-repl","title":"Starting the REPL","text":"<p>To start a session, simply run: <pre><code>sloth-runner repl\n</code></pre></p> <p>You can also pre-load a workflow file to have its <code>TaskDefinitions</code> and any helper functions available in the session. This is incredibly useful for debugging an existing pipeline.</p> <pre><code>sloth-runner repl -f /path/to/your/pipeline.lua\n</code></pre>"},{"location":"repl/#features","title":"Features","text":""},{"location":"repl/#live-environment","title":"Live Environment","text":"<p>The REPL provides a live Lua environment where you can execute any Lua code. All the built-in sloth-runner modules (<code>aws</code>, <code>docker</code>, <code>fs</code>, <code>log</code>, etc.) are pre-loaded and ready to use.</p> <pre><code>sloth&gt; log.info(\"Hello from the REPL!\")\nsloth&gt; result = fs.read(\"README.md\")\nsloth&gt; print(string.sub(result, 1, 50))\n</code></pre>"},{"location":"repl/#autocompletion","title":"Autocompletion","text":"<p>The REPL has a sophisticated autocompletion system. - Start typing the name of a global variable or module (e.g., <code>aws</code>) and press <code>Tab</code> to see suggestions. - Type a module name followed by a dot (e.g., <code>docker.</code>) and press <code>Tab</code> to see all the functions available in that module.</p>"},{"location":"repl/#history","title":"History","text":"<p>The REPL keeps a history of your commands. Use the up and down arrow keys to navigate through previous commands.</p>"},{"location":"repl/#example-session","title":"Example Session","text":"<p>Here is an example of using the REPL to debug a Docker command.</p> <pre><code>$ sloth-runner repl\nSloth-Runner Interactive REPL\nType 'exit' or 'quit' to leave.\nsloth&gt; result = docker.exec({\"ps\", \"-a\"})\nsloth&gt; print(result.stdout)\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nsloth&gt; -- Now let's try to build an image\nsloth&gt; build_result = docker.build({tag=\"my-test\", path=\"./examples/docker\"})\nsloth&gt; print(build_result.success)\ntrue\nsloth&gt; exit\nBye!\n</code></pre>"},{"location":"scheduler/","title":"Task Scheduler","text":"<p>The <code>sloth-runner</code> now includes a built-in task scheduler, allowing you to automate the execution of your Lua-defined tasks at specified intervals using cron syntax.</p>"},{"location":"scheduler/#features","title":"Features","text":"<ul> <li>Background Process: The scheduler runs as a persistent background process, independent of your terminal session.</li> <li>Cron-based Scheduling: Define task schedules using flexible cron strings.</li> <li>Persistence: Scheduled tasks are loaded from a configuration file, ensuring they resume after restarts.</li> <li>Integration with Existing Tasks: The scheduler leverages the existing <code>sloth-runner run</code> command to execute your tasks.</li> </ul>"},{"location":"scheduler/#configuration-scheduleryaml","title":"Configuration: <code>scheduler.yaml</code>","text":"<p>Scheduled tasks are defined in a YAML file, typically named <code>scheduler.yaml</code>. This file specifies the tasks to run, their schedule, and the Lua file, group, and task name.</p> <pre><code>scheduled_tasks:\n  - name: \"my_daily_backup\"\n    schedule: \"0 0 * * *\" # Every day at midnight\n    task_file: \"examples/my_workflow.lua\"\n    task_group: \"backup_group\"\n    task_name: \"perform_backup\"\n  - name: \"hourly_report_generation\"\n    schedule: \"0 * * * *\" # Every hour\n    task_file: \"examples/reporting.lua\"\n    task_group: \"reports\"\n    task_name: \"generate_report\"\n</code></pre> <p>Fields:</p> <ul> <li><code>name</code> (string, required): A unique name for the scheduled task.</li> <li><code>schedule</code> (string, required): The cron string defining when the task should run. Supports standard cron syntax and some predefined schedules (e.g., <code>@every 1h</code>, <code>@daily</code>). Refer to robfig/cron documentation for details.</li> <li><code>task_file</code> (string, required): The path to the Lua task definition file.</li> <li><code>task_group</code> (string, required): The name of the task group within the Lua file.</li> <li><code>task_name</code> (string, required): The name of the specific task to execute within the task group.</li> </ul>"},{"location":"scheduler/#cli-commands","title":"CLI Commands","text":""},{"location":"scheduler/#sloth-runner-scheduler-enable","title":"<code>sloth-runner scheduler enable</code>","text":"<p>Starts the <code>sloth-runner</code> scheduler as a background process. This command ensures the scheduler is running and ready to process scheduled tasks.</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (or <code>-c</code>): Specifies the path to your <code>scheduler.yaml</code> configuration file. Defaults to <code>scheduler.yaml</code> in the current directory.</li> </ul> <p>Upon execution, the command will print the PID of the background scheduler process. The scheduler will continue to run even if your terminal session is closed.</p>"},{"location":"scheduler/#sloth-runner-scheduler-disable","title":"<code>sloth-runner scheduler disable</code>","text":"<p>Stops the running <code>sloth-runner</code> scheduler background process.</p> <pre><code>sloth-runner scheduler disable\n</code></pre> <p>This command will attempt to gracefully terminate the scheduler process. If successful, it will remove the PID file created by the <code>enable</code> command.</p>"},{"location":"scheduler/#sloth-runner-scheduler-list","title":"<code>sloth-runner scheduler list</code>","text":"<p>Lists all scheduled tasks defined in the <code>scheduler.yaml</code> configuration file. This command provides an overview of your configured tasks, their schedules, and associated Lua task details.</p> <pre><code>sloth-runner scheduler list --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (or <code>-c</code>): Specifies the path to your <code>scheduler.yaml</code> configuration file. Defaults to <code>scheduler.yaml</code> in the current directory.</li> </ul> <p>Example Output:</p> <pre><code># Configured Scheduled Tasks\n\nNAME                     | SCHEDULE    | FILE                     | GROUP        | TASK\nmy_daily_backup          | 0 0 * * *   | examples/my_workflow.lua | backup_group | perform_backup\nhourly_report_generation | 0 * * * *   | examples/reporting.lua   | reports      | generate_report\n</code></pre>"},{"location":"scheduler/#sloth-runner-scheduler-delete-task_name","title":"<code>sloth-runner scheduler delete &lt;task_name&gt;</code>","text":"<p>Deletes a specific scheduled task from the <code>scheduler.yaml</code> configuration file. This command removes the task definition, and the scheduler will no longer execute it.</p> <pre><code>sloth-runner scheduler delete my_daily_backup --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>&lt;task_name&gt;</code> (string, required): The unique name of the scheduled task to delete.</li> <li><code>--scheduler-config</code> (or <code>-c</code>): Specifies the path to your <code>scheduler.yaml</code> configuration file. Defaults to <code>scheduler.yaml</code> in the current directory.</li> </ul> <p>Important: This command modifies your <code>scheduler.yaml</code> file. Ensure you have a backup if necessary. If the scheduler is currently running, you may need to disable and re-enable it for the changes to take effect immediately.</p>"},{"location":"scheduler/#logging-and-error-handling","title":"Logging and Error Handling","text":"<p>The scheduler logs its activities and the execution status of scheduled tasks to standard output and standard error. It's recommended to redirect these outputs to a log file when running in a production environment.</p> <p>If a scheduled task fails, the scheduler will log the error and continue with other scheduled tasks. It will not stop due to individual task failures.</p>"},{"location":"scheduler/#example","title":"Example","text":"<ol> <li> <p>Create a <code>scheduler.yaml</code> file:</p> <pre><code>scheduled_tasks:\n  - name: \"my_test_task\"\n    schedule: \"@every 1m\"\n    task_file: \"examples/basic_pipeline.lua\"\n    task_group: \"basic_pipeline\"\n    task_name: \"fetch_data\"\n</code></pre> </li> <li> <p>Enable the scheduler:</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> </li> <li> <p>Observe the output. Every minute, you should see messages indicating the execution of <code>my_test_task</code>.</p> </li> <li> <p>To stop the scheduler:</p> <pre><code>sloth-runner scheduler disable\n</code></pre> </li> </ol>"},{"location":"testing/","title":"Testing Workflows","text":"<p>The sloth-runner includes a built-in testing framework that allows you to write unit and integration tests for your task workflows. Writing tests for your automation is crucial for ensuring reliability, preventing regressions, and having confidence when making changes.</p>"},{"location":"testing/#the-test-command","title":"The <code>test</code> Command","text":"<p>You can run a test file using the <code>sloth-runner test</code> command. It requires two main files: the workflow you want to test and the test script itself.</p> <pre><code>sloth-runner test -w &lt;path_to_workflow.lua&gt; -f &lt;path_to_test_file.lua&gt;\n</code></pre> <ul> <li><code>-w, --workflow</code>: Specifies the path to the main <code>TaskDefinitions</code> file that you want to test.</li> <li><code>-f, --file</code>: Specifies the path to your test file.</li> </ul>"},{"location":"testing/#writing-tests","title":"Writing Tests","text":"<p>Tests are written in Lua and use two new global modules provided by the test runner: <code>test</code> and <code>assert</code>.</p>"},{"location":"testing/#the-test-module","title":"The <code>test</code> Module","text":"<p>The <code>test</code> module is used to structure your tests and to run specific tasks from your workflow.</p> <ul> <li><code>test.describe(suite_name, function)</code>: Groups related tests into a \"suite\". This is for organization.</li> <li><code>test.it(function)</code>: Defines an individual test case. The description of the test should be included in the assertion messages inside this function.</li> <li><code>test.run_task(task_name)</code>: This is the core function of the testing framework. It executes a single task by its name from the loaded workflow file. It returns a <code>result</code> table containing the execution details.</li> </ul> <p>The <code>result</code> table returned by <code>run_task</code> has the following structure:</p> <pre><code>{\n  success = true, -- boolean: true if the task succeeded, false otherwise\n  message = \"Task executed successfully\", -- string: The message returned by the task\n  duration = \"1.23ms\", -- string: The execution duration\n  output = { ... }, -- table: The output table returned by the task\n  error = nil -- string: The error message if the task failed\n}\n</code></pre>"},{"location":"testing/#the-assert-module","title":"The <code>assert</code> Module","text":"<p>The <code>assert</code> module provides functions to check the results of your task executions.</p> <ul> <li><code>assert.is_true(value, message)</code>: Checks if the <code>value</code> is true.</li> <li><code>assert.equals(actual, expected, message)</code>: Checks if the <code>actual</code> value is equal to the <code>expected</code> value.</li> </ul>"},{"location":"testing/#example","title":"Example","text":"<p>Here is a complete example of a test file (<code>examples/basic_pipeline_test.lua</code>) that tests the <code>examples/basic_pipeline.lua</code> workflow.</p> <pre><code>-- examples/basic_pipeline_test.lua\n\ntest.describe(\"Basic Pipeline Tests\", function()\n  test.it(function()\n    local result = test.run_task(\"fetch_data\")\n    assert.is_true(result.success, \"fetch_data should run successfully\")\n  end)\n\n  test.it(function()\n    local result = test.run_task(\"process_data\")\n    assert.is_true(result.success, \"process_data task should succeed\")\n\n    -- Note: This test is simplified. In a real scenario, you might want to\n    -- mock the input from the 'fetch_data' dependency.\n    local expected_output = \"processed_some_data_from_api\"\n    local actual_output = result.output and result.output.final_data\n\n    assert.equals(actual_output, expected_output, \"process_data should produce the correct output\")\n  end)\n\n  test.it(function()\n    assert.equals(\"hello\", \"world\", \"this assertion is designed to fail\")\n  end)\nend)\n</code></pre> <p>When you run this test, you will get a clear report in your terminal indicating which assertions passed and which failed, along with a final summary.</p>"},{"location":"testing/#mocking-modules","title":"Mocking Modules","text":"<p>To test the logic of your pipelines without making real external calls (e.g., to AWS, Docker, or Terraform), the testing framework includes a powerful mocking feature.</p>"},{"location":"testing/#strict-mocking-policy","title":"Strict Mocking Policy","text":"<p>The test runner enforces a strict mocking policy. When running in test mode, any call to a module function (like <code>aws.exec</code> or <code>docker.build</code>) that has not been explicitly mocked will cause the test to fail immediately. This ensures that your tests are fully self-contained, deterministic, and do not have unintended side effects.</p>"},{"location":"testing/#testmockfunction_name-mock_definition","title":"<code>test.mock(function_name, mock_definition)</code>","text":"<p>This function allows you to define a fake return value for any mockable module function.</p> <ul> <li><code>function_name</code> (string): The full name of the function to mock (e.g., <code>\"aws.s3.sync\"</code>, <code>\"docker.build\"</code>).</li> <li><code>mock_definition</code> (table): A table that defines what the mocked function should return. It must contain a <code>returns</code> key, which is a list of the values the function will return.</li> </ul> <p>The <code>returns</code> list is crucial because Lua functions can return multiple values.</p> <p>Example:</p> <pre><code>-- Mock a function that returns a single result table\ntest.mock(\"docker.build\", {\n  returns = {\n    { success = true, stdout = \"Successfully built image\" }\n  }\n})\n\n-- Mock a function that returns two values (e.g., a value and an error)\n-- This simulates a successful call to terraform.output\ntest.mock(\"terraform.output\", {\n  returns = { \"my_file.txt\", nil }\n})\n\n-- This simulates a failed call\ntest.mock(\"terraform.output\", {\n  returns = { nil, \"output not found\" }\n})\n</code></pre>"},{"location":"testing/#complete-mocking-example","title":"Complete Mocking Example","text":"<p>Let's say you have a task that calls <code>aws.exec</code> and has logic that depends on the output.</p> <p>Task in <code>my_workflow.lua</code>: <pre><code>-- ...\n{\n  name = \"check-account\",\n  command = function()\n    local result = aws.exec({\"sts\", \"get-caller-identity\"})\n    local data = data.parse_json(result.stdout)\n    if data.Account == \"123456789012\" then\n      return true, \"Correct account.\"\n    else\n      return false, \"Wrong account.\"\n    end\n  end\n}\n-- ...\n</code></pre></p> <p>Test in <code>my_test.lua</code>: <pre><code>test.describe(\"Account Check Logic\", function()\n  test.it(function()\n    -- Mock the return value of aws.exec\n    test.mock(\"aws.exec\", {\n      returns = {\n        {\n          success = true,\n          stdout = '{\"Account\": \"123456789012\"}'\n        }\n      }\n    })\n\n    -- Run the task that uses the mock\n    local result = test.run_task(\"check-account\")\n\n    -- Assert that the task's logic worked correctly with the mocked data\n    assert.is_true(result.success, \"Task should succeed with the correct account ID\")\n    assert.equals(result.message, \"Correct account.\", \"Message should be correct\")\n  end)\nend)\n</code></pre></p>"},{"location":"en/","title":"Sloth-Runner Documentation","text":"<p>Welcome to the comprehensive documentation for Sloth-Runner, your flexible tool for task automation and workflow orchestration using Lua scripts.</p> <p>Here you will find detailed guides, API references, and practical examples to help you make the most of Sloth-Runner's power.</p>"},{"location":"en/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Getting Started</li> <li>Core Concepts</li> <li>Distributed Task Execution</li> <li>CLI Commands</li> <li>Interactive REPL</li> <li>Built-in Modules:<ul> <li>AWS Module</li> <li>Azure Module</li> <li>Data Module</li> <li>DigitalOcean Module</li> <li>Docker Module</li> <li>Exec Module</li> <li>FS Module</li> <li>GCP Module</li> <li>Git Module</li> <li>Log Module</li> <li>Net Module</li> <li>Notifications Module</li> <li>Pulumi Module</li> <li>Python Module</li> <li>Salt Module</li> <li>Terraform Module</li> </ul> </li> <li>Advanced Examples</li> </ul> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"en/CLI/","title":"CLI Commands","text":"<p>The <code>sloth-runner</code> command-line interface (CLI) is the primary way to interact with your task pipelines. It provides commands to run, list, validate, and manage your workflows.</p>"},{"location":"en/CLI/#sloth-runner-run","title":"<code>sloth-runner run</code>","text":"<p>Executes tasks defined in a Lua configuration file. This is the most common command you will use.</p> <p>Usage: <pre><code>sloth-runner run [flags]\n</code></pre></p> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: (Required) Path to the Lua task configuration file.</li> <li><code>-g, --group string</code>: Run tasks only from a specific task group. If not provided, <code>sloth-runner</code> will run tasks from all groups.</li> <li><code>-t, --tasks string</code>: A comma-separated list of specific tasks to run (e.g., <code>task1,task2</code>). If not provided, all tasks in the specified group (or all groups) will be considered.</li> <li><code>-v, --values string</code>: Path to a YAML file with values to be passed to your Lua scripts. These values are accessible in Lua via the global <code>values</code> table.</li> <li><code>-d, --dry-run</code>: Simulates the execution of tasks. It will print the tasks that would be run and in what order, but will not execute their <code>command</code>.</li> <li><code>--return</code>: Prints the final output of the executed tasks as a JSON object to stdout. This includes both the return value of the last task and any data passed to the global <code>export()</code> function.</li> <li><code>-y, --yes</code>: Bypasses the interactive task selection prompt when no specific tasks are provided with <code>-t</code>.</li> <li><code>--interactive</code>: Enable interactive mode for task execution, prompting for user input before each task.</li> </ul> <p>Examples:</p> <ul> <li>Run all tasks in a specific group:     <pre><code>sloth-runner run -f examples/basic_pipeline.lua -g my_group\n</code></pre></li> <li>Run a single, specific task:     <pre><code>sloth-runner run -f examples/basic_pipeline.lua -g my_group -t my_task\n</code></pre></li> <li>Run multiple tasks and get their combined output as JSON:     <pre><code>sloth-runner run -f examples/export_example.lua -t export-data-task --return\n</code></pre></li> </ul>"},{"location":"en/CLI/#sloth-runner-list","title":"<code>sloth-runner list</code>","text":"<p>Lists all available task groups and tasks defined in a Lua configuration file, along with their descriptions and dependencies.</p> <p>Usage: <pre><code>sloth-runner list [flags]\n</code></pre></p> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: (Required) Path to the Lua task configuration file.</li> <li><code>-v, --values string</code>: Path to a YAML values file, in case your task definitions depend on it.</li> </ul>"},{"location":"en/CLI/#sloth-runner-new","title":"<code>sloth-runner new</code>","text":"<p>Generates a new boilerplate Lua task definition file from a template.</p> <p>Usage: <pre><code>sloth-runner new &lt;group-name&gt; [flags]\n</code></pre></p> <p>Arguments:</p> <ul> <li><code>&lt;group-name&gt;</code>: The name of the main task group to be created in the file.</li> </ul> <p>Flags:</p> <ul> <li><code>-t, --template string</code>: The template to use. Default is <code>simple</code>. Run <code>sloth-runner template list</code> to see all available options.</li> <li><code>-o, --output string</code>: The path to the output file. If not provided, the generated content will be printed to stdout.</li> <li><code>--set key=value</code>: Pass key-value pairs to the template for dynamic content generation.</li> </ul> <p>Example: <pre><code>sloth-runner new my-python-pipeline -t python -o my_pipeline.lua\n</code></pre></p>"},{"location":"en/CLI/#sloth-runner-validate","title":"<code>sloth-runner validate</code>","text":"<p>Validates the syntax and basic structure of a Lua task file without executing any tasks.</p> <p>Usage: <pre><code>sloth-runner validate [flags]\n</code></pre></p> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: (Required) Path to the Lua task configuration file to validate.</li> <li><code>-v, --values string</code>: Path to a YAML values file, if needed for validation.</li> </ul>"},{"location":"en/CLI/#sloth-runner-test","title":"<code>sloth-runner test</code>","text":"<p>Executes a Lua-based test file against a workflow file. (This is an advanced feature).</p> <p>Usage: <pre><code>sloth-runner test [flags]\n</code></pre></p> <p>Flags:</p> <ul> <li><code>-w, --workflow string</code>: (Required) Path to the Lua workflow file to be tested.</li> <li><code>-f, --file string</code>: (Required) Path to the Lua test file.</li> </ul>"},{"location":"en/CLI/#sloth-runner-template-list","title":"<code>sloth-runner template list</code>","text":"<p>Lists all available templates that can be used with the <code>sloth-runner new</code> command.</p> <p>Usage: <pre><code>sloth-runner template list\n</code></pre></p>"},{"location":"en/CLI/#sloth-runner-artifacts","title":"<code>sloth-runner artifacts</code>","text":"<p>Manages task artifacts, which are files or directories produced by tasks.</p> <p>Subcommands:</p> <ul> <li><code>sloth-runner artifacts list</code>: Lists all collected artifacts.</li> <li><code>sloth-runner artifacts get &lt;artifact_path&gt;</code>: Downloads a specific artifact.</li> <li><code>sloth-runner artifacts clean</code>: Cleans up old or unwanted artifacts.</li> </ul>"},{"location":"en/CLI/#sloth-runner-version","title":"<code>sloth-runner version</code>","text":"<p>Displays the current version of <code>sloth-runner</code>.</p> <pre><code>sloth-runner version\n</code></pre>"},{"location":"en/CLI/#sloth-runner-scheduler","title":"<code>sloth-runner scheduler</code>","text":"<p>Manages the <code>sloth-runner</code> task scheduler, allowing you to enable, disable, list, and delete scheduled tasks.</p> <p>For detailed information on scheduler commands and configuration, refer to the Task Scheduler documentation.</p> <p>Subcommands:</p> <ul> <li><code>sloth-runner scheduler enable</code>: Starts the scheduler as a background process.</li> <li><code>sloth-runner scheduler disable</code>: Stops the running scheduler process.</li> <li><code>sloth-runner scheduler list</code>: Lists all configured scheduled tasks.</li> <li><code>sloth-runner scheduler delete &lt;task_name&gt;</code>: Deletes a specific scheduled task.</li> </ul>"},{"location":"en/advanced-examples/","title":"Advanced Examples","text":"<p>This section presents more complex examples and use cases that combine multiple Sloth-Runner modules for end-to-end automation.</p>"},{"location":"en/advanced-examples/#full-example-end-to-end-cicd-pipeline","title":"Full Example: End-to-End CI/CD Pipeline","text":"<p>This tutorial demonstrates how to build a complete CI/CD pipeline using the <code>git</code>, <code>pulumi</code>, and <code>salt</code> modules to version code, provision infrastructure, and deploy an application.</p>"},{"location":"en/advanced-examples/#scenario","title":"Scenario","text":"<p>Imagine you have a Pulumi infrastructure project and an application project. You want to automate the following flow:</p> <ol> <li>Clone the infrastructure repository.</li> <li>Update a version file within the repository.</li> <li>Commit and push this change to Git.</li> <li>Execute <code>pulumi up</code> to provision or update the infrastructure (e.g., a staging environment).</li> <li>Use Salt to configure the provisioned servers and deploy the application.</li> </ol>"},{"location":"en/advanced-examples/#lua-script-examplespulumi_git_combined_examplelua","title":"Lua Script (<code>examples/pulumi_git_combined_example.lua</code>)","text":"<pre><code>-- examples/pulumi_git_combined_example.lua\n\ncommand = function(params)\n    log.info(\"Starting combined Pulumi and Git example...\")\n\n    local pulumi_repo_url = \"https://github.com/my-org/my-pulumi-infra.git\" -- Example Pulumi repo\n    local pulumi_repo_path = \"./pulumi-infra-checkout\"\n    local new_infra_version = params.infra_version or \"v1.0.0-infra\"\n    local pulumi_project_workdir = pulumi_repo_path .. \"/my-vpc-project\" -- Subdirectory within the cloned repo\n    local repo\n\n    -- 1. Clone or open the Pulumi repository\n    log.info(\"Step 1: Cloning or opening Pulumi repository...\")\n    if not fs.exists(pulumi_repo_path) then\n        log.info(\"Cloning Pulumi repository: \" .. pulumi_repo_url)\n        local cloned_repo, clone_err = git.clone(pulumi_repo_url, pulumi_repo_path)\n        if clone_err then\n            log.error(\"Failed to clone Pulumi repository: \" .. clone_err)\n            return false, \"Git clone failed.\"\n        end\n        repo = cloned_repo\n    else\n        log.info(\"Pulumi repository already exists, opening local reference.\")\n        local opened_repo, open_err = git.repo(pulumi_repo_path)\n        if open_err then\n            log.error(\"Failed to open Pulumi repository: \" .. open_err)\n            return false, \"Git repo open failed.\"\n        end\n        repo = opened_repo\n    end\n\n    if not repo then\n        return false, \"Failed to get Pulumi repository reference.\"\n    end\n\n    -- 2. Update the repository (pull)\n    log.info(\"Step 2: Pulling latest changes from Pulumi repository...\")\n    repo:checkout(\"main\"):pull(\"origin\", \"main\")\n    local pull_result = repo:result()\n    if not pull_result.success then\n        log.error(\"Failed to pull Pulumi repository: \" .. pull_result.stderr)\n        return false, \"Git pull failed.\"\n    end\n    log.info(\"Pulumi repository updated. Stdout: \" .. pull_result.stdout)\n\n    -- 3. Simulate a change in the Pulumi code (e.g., update a version file)\n    log.info(\"Step 3: Simulating a change in Pulumi code (updating version file)...\")\n    local infra_version_file = pulumi_repo_path .. \"/INFRA_VERSION\"\n    fs.write(infra_version_file, new_infra_version)\n    log.info(\"Updated INFRA_VERSION file to: \" .. new_infra_version)\n\n    -- 4. Commit and push the changes\n    log.info(\"Step 4: Committing and pushing infrastructure version change...\")\n    local commit_message = \"ci: Bump infrastructure version to \" .. new_infra_version\n    repo:add(infra_version_file)\n        :commit(commit_message)\n        :push(\"origin\", \"main\") -- No follow_tags here, just the commit\n\n    local push_result = repo:result()\n    if not push_result.success then\n        log.error(\"Failed to push infrastructure changes: \" .. push_result.stderr)\n        return false, \"Git push failed for infra changes.\"\n    end\n    log.info(\"Infrastructure version change pushed. Stdout: \" .. push_result.stdout)\n\n    -- 5. Execute 'pulumi up' for the project\n    log.info(\"Step 5: Running pulumi up for the infrastructure project...\")\n    local infra_stack = pulumi.stack(\"my-org/my-infra/dev\", {\n        workdir = pulumi_project_workdir -- Use the subdirectory of the Pulumi project\n    })\n\n    local pulumi_up_result = infra_stack:up({ non_interactive = true })\n\n    if not pulumi_up_result.success then\n        log.error(\"Pulumi up failed: \" .. pulumi_up_result.stderr)\n        return false, \"Pulumi up failed.\"\n    end\n    log.info(\"Pulumi up completed successfully. Stdout: \" .. pulumi_up_result.stdout)\n\n    -- 6. Configure and deploy application using Salt (Example)\n    log.info(\"Step 6: Configuring and deploying application using Salt...\")\n    -- Assuming Pulumi up provided the server IP or hostname\n    -- For this example, we'll use a fictitious IP\n    local server_ip = \"192.168.1.100\" -- Replace with actual output from Pulumi, if any\n    local salt_target = salt.target(server_ip)\n\n    log.info(\"Running Salt test.ping on \" .. server_ip .. \"...\")\n    salt_target:ping()\n    local ping_result = salt_target:result()\n    if not ping_result.success then\n        log.error(\"Salt ping failed for \" .. server_ip .. \": \" .. ping_result.stderr)\n        return false, \"Salt ping failed.\"\n    end\n    log.info(\"Salt ping successful. Stdout: \" .. data.to_json(ping_result.stdout)) -- Assuming ping returns JSON\n\n    log.info(\"Applying Salt state 'app.install' on \" .. server_ip .. \"...\")\n    salt_target:cmd('state.apply', 'app.install')\n    local salt_apply_result = salt_target:result()\n    if not salt_apply_result.success then\n        log.error(\"Salt state.apply failed for \" .. server_ip .. \": \" .. salt_apply_result.stderr)\n        return false, \"Salt state.apply failed.\"\n    end\n    log.info(\"Salt state.apply successful. Stdout: \" .. data.to_json(salt_apply_result.stdout))\n\n    log.info(\"Combined Pulumi and Git example finished successfully.\")\n    return true, \"Combined Pulumi and Git example finished.\"\nend\n\nTaskDefinitions = {\n    pulumi_git_combined_example = {\n        description = \"Demonstrates combined usage of 'pulumi' and 'git' modules for CI/CD pipeline.\",\n        tasks = {\n            {\n                name = \"run_combined_example\",\n                command = command,\n                params = {\n                    infra_version = \"v1.0.0-test-combined\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"en/core-concepts/","title":"Core Concepts","text":"<p>This document explains the fundamental concepts of <code>sloth-runner</code>, helping you understand how to define and orchestrate complex workflows.</p>"},{"location":"en/core-concepts/#the-taskdefinitions-table","title":"The <code>TaskDefinitions</code> Table","text":"<p>The entry point for any <code>sloth-runner</code> workflow is a Lua file that returns a global table named <code>TaskDefinitions</code>. This table is a dictionary where each key is a Task Group name.</p> <pre><code>-- my_pipeline.lua\nTaskDefinitions = {\n  -- Task Groups are defined here\n}\n</code></pre>"},{"location":"en/core-concepts/#task-groups","title":"Task Groups","text":"<p>A Task Group is a collection of related tasks. It can also define properties that affect all tasks within it.</p> <p>Group Properties:</p> <ul> <li><code>description</code> (string): A description of what the group does.</li> <li><code>tasks</code> (table): A list of individual task tables.</li> <li><code>create_workdir_before_run</code> (boolean): If <code>true</code>, a temporary working directory is created for the group before any task runs. This directory is passed to each task.</li> <li><code>clean_workdir_after_run</code> (function): A Lua function that decides if the temporary workdir should be deleted after the group finishes. It receives the final result of the group (<code>{success = true/false, ...}</code>). Returning <code>true</code> deletes the directory.</li> </ul> <p>Example: <pre><code>TaskDefinitions = {\n  my_group = {\n    description = \"A group that manages its own temporary directory.\",\n    create_workdir_before_run = true,\n    clean_workdir_after_run = function(result)\n      if not result.success then\n        log.warn(\"Group failed. Workdir will be kept for debugging.\")\n      end\n      return result.success -- Only clean up if everything succeeded\n    end,\n    tasks = {\n      -- Tasks go here\n    }\n  }\n}\n</code></pre></p>"},{"location":"en/core-concepts/#individual-tasks","title":"Individual Tasks","text":"<p>A task is a single unit of work. It's defined as a table with several available properties to control its behavior.</p>"},{"location":"en/core-concepts/#basic-properties","title":"Basic Properties","text":"<ul> <li><code>name</code> (string): The unique name of the task within its group.</li> <li><code>description</code> (string): A brief description of what the task does.</li> <li><code>command</code> (string or function): The core action of the task.<ul> <li>As a string: It's executed as a shell command.</li> <li>As a function: The Lua function is executed. It receives two arguments: <code>params</code> (a table of its parameters) and <code>deps</code> (a table containing the outputs of its dependencies). The function must return:<ol> <li><code>boolean</code>: <code>true</code> for success, <code>false</code> for failure.</li> <li><code>string</code>: A message describing the result.</li> <li><code>table</code> (optional): A table of outputs that other tasks can depend on.</li> </ol> </li> </ul> </li> </ul>"},{"location":"en/core-concepts/#dependency-and-execution-flow","title":"Dependency and Execution Flow","text":"<ul> <li><code>depends_on</code> (string or table): A list of task names that must complete successfully before this task can run.</li> <li><code>next_if_fail</code> (string or table): A list of task names to run only if this task fails. This is useful for cleanup or notification tasks.</li> <li><code>async</code> (boolean): If <code>true</code>, the task runs in the background, and the runner does not wait for it to complete before starting the next task in the execution order.</li> </ul>"},{"location":"en/core-concepts/#error-handling-and-robustness","title":"Error Handling and Robustness","text":"<ul> <li><code>retries</code> (number): The number of times to retry a task if it fails. Default is <code>0</code>.</li> <li><code>timeout</code> (string): A duration (e.g., <code>\"10s\"</code>, <code>\"1m\"</code>) after which the task will be terminated if it's still running.</li> </ul>"},{"location":"en/core-concepts/#conditional-execution","title":"Conditional Execution","text":"<ul> <li><code>run_if</code> (string or function): The task will be skipped unless this condition is met.<ul> <li>As a string: A shell command. An exit code of <code>0</code> means the condition is met.</li> <li>As a function: A Lua function that returns <code>true</code> if the task should run.</li> </ul> </li> <li><code>abort_if</code> (string or function): The entire workflow will be aborted if this condition is met.<ul> <li>As a string: A shell command. An exit code of <code>0</code> means abort.</li> <li>As a function: A Lua function that returns <code>true</code> to abort.</li> </ul> </li> </ul>"},{"location":"en/core-concepts/#lifecycle-hooks","title":"Lifecycle Hooks","text":"<ul> <li><code>pre_exec</code> (function): A Lua function that runs before the main <code>command</code>.</li> <li><code>post_exec</code> (function): A Lua function that runs after the main <code>command</code> has completed successfully.</li> </ul>"},{"location":"en/core-concepts/#reusability","title":"Reusability","text":"<ul> <li><code>uses</code> (table): Specifies a pre-defined task from another file (loaded via <code>import</code>) to use as a base. The current task definition can then override properties like <code>params</code> or <code>description</code>.</li> <li><code>params</code> (table): A dictionary of key-value pairs that can be passed to the task's <code>command</code> function.</li> <li><code>artifacts</code> (string or table): A file pattern (glob) or a list of patterns specifying which files from the task's <code>workdir</code> should be saved as artifacts after a successful run.</li> <li><code>consumes</code> (string or table): The name of an artifact (or a list of names) from a previous task that should be copied into this task's <code>workdir</code> before it runs.</li> </ul>"},{"location":"en/core-concepts/#artifact-management","title":"Artifact Management","text":"<p>Sloth-Runner allows tasks to share files with each other through an artifact mechanism. One task can \"produce\" one or more files as artifacts, and subsequent tasks can \"consume\" those artifacts.</p> <p>This is useful for CI/CD pipelines where a build step might generate a binary (the artifact), which is then used by a testing or deployment step.</p>"},{"location":"en/core-concepts/#how-it-works","title":"How It Works","text":"<ol> <li> <p>Producing Artifacts: Add the <code>artifacts</code> key to your task definition. The value can be a single file pattern (e.g., <code>\"report.txt\"</code>) or a list (e.g., <code>{\"*.log\", \"app.bin\"}</code>). After the task runs successfully, the runner will find files in the task's <code>workdir</code> matching these patterns and copy them to a shared artifact storage for the pipeline.</p> </li> <li> <p>Consuming Artifacts: Add the <code>consumes</code> key to another task's definition (which typically <code>depends_on</code> the producer task). The value should be the filename of the artifact you want to use (e.g., <code>\"report.txt\"</code>). Before this task runs, the runner will copy the named artifact from the shared storage into this task's <code>workdir</code>, making it available to the <code>command</code>.</p> </li> </ol>"},{"location":"en/core-concepts/#artifacts-example","title":"Artifacts Example","text":"<pre><code>TaskDefinitions = {\n  [\"ci-pipeline\"] = {\n    description = \"Demonstrates the use of artifacts.\",\n    create_workdir_before_run = true,\n    tasks = {\n      {\n        name = \"build\",\n        description = \"Creates a binary and declares it as an artifact.\",\n        command = \"echo 'binary_content' &gt; app.bin\",\n        artifacts = {\"app.bin\"}\n      },\n      {\n        name = \"test\",\n        description = \"Consumes the binary to run tests.\",\n        depends_on = \"build\",\n        consumes = {\"app.bin\"},\n        command = function(params)\n          -- At this point, 'app.bin' exists in this task's workdir\n          local content, err = fs.read(params.workdir .. \"/app.bin\")\n          if content == \"binary_content\" then\n            log.info(\"Successfully consumed artifact!\")\n            return true\n          else\n            return false, \"Artifact content was incorrect!\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/core-concepts/#global-functions","title":"Global Functions","text":"<p><code>sloth-runner</code> provides global functions in the Lua environment to help orchestrate workflows.</p>"},{"location":"en/core-concepts/#importpath","title":"<code>import(path)</code>","text":"<p>Loads another Lua file and returns the value it returns. This is the primary mechanism for creating reusable task modules. The path is relative to the file calling <code>import</code>.</p> <p>Example (<code>reusable_tasks.lua</code>): <pre><code>-- Import a module that returns a table of task definitions\nlocal docker_tasks = import(\"shared/docker.lua\")\n\nTaskDefinitions = {\n  main = {\n    tasks = {\n      {\n        -- Use the 'build' task from the imported module\n        uses = docker_tasks.build,\n        params = { image_name = \"my-app\" }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"en/core-concepts/#paralleltasks","title":"<code>parallel(tasks)</code>","text":"<p>Executes a list of tasks concurrently and waits for all of them to complete.</p> <ul> <li><code>tasks</code> (table): A list of task tables to run in parallel.</li> </ul> <p>Example: <pre><code>command = function()\n  log.info(\"Starting 3 tasks in parallel...\")\n  local results, err = parallel({\n    { name = \"short_task\", command = \"sleep 1\" },\n    { name = \"medium_task\", command = \"sleep 2\" },\n    { name = \"long_task\", command = \"sleep 3\" }\n  })\n  if err then\n    return false, \"Parallel execution failed\"\n  end\n  return true, \"All parallel tasks finished.\"\nend\n</code></pre></p>"},{"location":"en/core-concepts/#exporttable","title":"<code>export(table)</code>","text":"<p>Exports data from any point in a script to the CLI. When the <code>--return</code> flag is used, all exported tables are merged with the final task's output into a single JSON object.</p> <ul> <li><code>table</code>: A Lua table to be exported.</li> </ul> <p>Example: <pre><code>command = function()\n  export({ important_value = \"data from the middle of a task\" })\n  return true, \"Task done\", { final_output = \"some result\" }\nend\n</code></pre> Running with <code>--return</code> would produce: <pre><code>{\n  \"important_value\": \"data from the middle of a task\",\n  \"final_output\": \"some result\"\n}\n</code></pre></p>"},{"location":"en/distributed/","title":"Distributed Task Execution","text":"<p><code>sloth-runner</code> supports distributed task execution, allowing you to run tasks on remote agents. This enables scalable and distributed workflows, where different parts of your pipeline can be executed on different machines.</p>"},{"location":"en/distributed/#how-it-works","title":"How it Works","text":"<p>The distributed execution model in <code>sloth-runner</code> follows a master-agent architecture:</p> <ol> <li>Master: The main <code>sloth-runner</code> instance acts as the master. It parses the workflow definition, identifies tasks configured to run on remote agents, and dispatches them.</li> <li>Agent: A <code>sloth-runner</code> instance running in <code>agent</code> mode on a remote machine. It listens for incoming task execution requests from the master, executes the tasks, and sends back the results.</li> </ol>"},{"location":"en/distributed/#configuring-remote-tasks","title":"Configuring Remote Tasks","text":"<p>To run a task on a remote agent, you need to specify the <code>delegate_to</code> field in either the task group or the individual task definition.</p>"},{"location":"en/distributed/#1-delegate-to-an-agent-at-the-task-group-level","title":"1. Delegate to an Agent at the Task Group Level","text":"<p>You can define the agent directly within your <code>TaskDefinitions</code> group using the <code>delegate_to</code> field. All tasks within this group will then be delegated to this agent unless overridden by a task-specific <code>delegate_to</code>.</p> <pre><code>TaskDefinitions = {\n  my_distributed_group = {\n    description = \"A task group with distributed tasks.\",\n    delegate_to = { address = \"localhost:50051\" }, -- Define the agent for the entire group\n    tasks = {\n      {\n        name = \"remote_hello\",\n        description = \"Runs a hello world task on a remote agent.\",\n        -- No 'delegate_to' field needed here, it inherits from the group\n        command = function(params)\n          log.info(\"Hello from remote agent!\")\n          return true, \"Remote task executed.\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/distributed/#2-delegate-to-an-agent-at-the-task-level","title":"2. Delegate to an Agent at the Task Level","text":"<p>Alternatively, you can specify the <code>delegate_to</code> field directly on an individual task. This will override any group-level delegation or allow for ad-hoc remote execution.</p> <pre><code>TaskDefinitions = {\n  my_group = {\n    description = \"A task group with a specific remote task.\",\n    tasks = {\n      {\n        name = \"specific_remote_task\",\n        description = \"Runs this task on a specific remote agent.\",\n        delegate_to = { address = \"192.168.1.100:50051\" }, -- Define agent for this task only\n        command = function(params)\n          log.info(\"Hello from a specific remote agent!\")\n          return true, \"Specific remote task executed.\"\n        end\n      },\n      {\n        name = \"local_task\",\n        description = \"This task runs locally.\",\n        command = \"echo 'Hello from local machine!'\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/distributed/#running-an-agent","title":"Running an Agent","text":"<p>To start a <code>sloth-runner</code> instance in agent mode, use the <code>agent</code> command:</p> <pre><code>sloth-runner agent -p 50051\n</code></pre> <ul> <li><code>-p, --port</code>: Specifies the port the agent should listen on. Defaults to <code>50051</code>.</li> </ul> <p>When an agent starts, it will listen for incoming gRPC requests from the master <code>sloth-runner</code> instance. Upon receiving a task, it will execute it in its local environment and return the result, along with any updated workspace files, back to the master.</p>"},{"location":"en/distributed/#workspace-synchronization","title":"Workspace Synchronization","text":"<p>When a task is dispatched to a remote agent, <code>sloth-runner</code> automatically handles the synchronization of the task's workspace:</p> <ol> <li>Master to Agent: The master creates a tarball of the current task's working directory and sends it to the agent.</li> <li>Agent Execution: The agent extracts the tarball into a temporary directory, executes the task within that directory, and any changes made to the files in the temporary directory are captured.</li> <li>Agent to Master: After task completion, the agent creates a tarball of the modified temporary directory and sends it back to the master. The master then extracts this tarball, updating its local workspace with any changes made by the remote task.</li> </ol> <p>This ensures that remote tasks have access to all necessary files and that any modifications they make are reflected back in the main workflow.</p>"},{"location":"en/enhanced-agent-output/","title":"Enhanced <code>sloth-runner agent run</code> Output","text":""},{"location":"en/enhanced-agent-output/#purpose","title":"Purpose","text":"<p>This feature significantly improves the visual presentation and informational content of the <code>sloth-runner agent run</code> command's output. Previously, the output was a plain text dump, making it difficult to quickly ascertain the status and details of remote command executions. The enhancement aims to provide a more elegant, colorful, and robust user experience by leveraging the <code>pterm</code> library for terminal output.</p> <p>The primary goals of this enhancement are: *   Clarity: Clearly distinguish between successful and failed command executions. *   Readability: Present information in a structured and easy-to-digest format. *   Expressiveness: Utilize colors and visual elements to convey status and highlight important details. *   Completeness: Ensure all relevant information (command, stdout, stderr, error messages) is presented comprehensively.</p>"},{"location":"en/enhanced-agent-output/#usage","title":"Usage","text":"<p>The usage of the <code>sloth-runner agent run</code> command remains the same. You execute it from your local machine (where the master is running) to instruct a registered agent to execute a shell command.</p> <pre><code>go run ./cmd/sloth-runner agent run &lt;agent_name&gt; '&lt;command_to_execute&gt;'\n</code></pre> <ul> <li><code>&lt;agent_name&gt;</code>: The name of the agent registered with the master (e.g., <code>agent1</code>, <code>agent2</code>).</li> <li><code>&lt;command_to_execute&gt;</code>: The shell command you want the agent to execute. Ensure proper quoting to prevent your local shell from interpreting the command before it reaches the agent.</li> </ul>"},{"location":"en/enhanced-agent-output/#output-style","title":"Output Style","text":"<p>The enhanced output now utilizes <code>pterm.DefaultBox</code> to encapsulate the command execution results, providing a clear visual boundary. Different colors and prefixes are used to indicate success or failure, and sections for the command, standard output, and standard error are clearly delineated.</p>"},{"location":"en/enhanced-agent-output/#successful-command-execution","title":"Successful Command Execution","text":"<p>Upon successful execution of a command on a remote agent, the output will be presented within a green-bordered box, with a <code>SUCCESS</code> title. It will clearly state that the command was successful, show the executed command, and display any <code>Stdout</code> content.</p> <p>Example Command: <pre><code>go run ./cmd/sloth-runner agent run agent1 'echo \"Hello from agent1 on $(hostname)\"'\n</code></pre></p> <p>Example Output: <pre><code>\u250c\u2500  SUCCESS  Command Execution Result on agent1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n|  SUCCESS  Command executed successfully!                |\n|  INFO  Command: echo \"Hello from agent1 on $(hostname)\" |\n| # Stdout:                                               |\n| Hello from agent1 on ladyguica                          |\n|                                                         |\n|                                                         |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p>"},{"location":"en/enhanced-agent-output/#failed-command-execution","title":"Failed Command Execution","text":"<p>In the event of a command failing on a remote agent, the output will be presented within a red-bordered box, with an <code>ERROR</code> title. It will clearly indicate that the command failed, show the executed command, and display any <code>Stdout</code>, <code>Stderr</code>, and the specific <code>Error</code> message returned by the agent.</p> <p>Example Command (Hypothetical Failure): <pre><code>go run ./cmd/sloth-runner agent run agent1 'non_existent_command'\n</code></pre></p> <p>Example Output (Hypothetical): <pre><code>\u250c\u2500  ERROR  Command Execution Result on agent1 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n|  ERROR  Command failed on agent1!                     |\n|  INFO  Command: non_existent_command                  |\n| # Stderr:                                             |\n| bash: non_existent_command: command not found         |\n| # Error:                                              |\n| exit status 127                                       |\n|                                                       |\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>This enhanced output ensures that users receive immediate, clear, and visually distinct feedback on the status of their remote agent commands, significantly improving the debugging and monitoring experience.</p>"},{"location":"en/getting-started/","title":"Getting Started","text":"<p>Welcome to Sloth-Runner! This guide will help you get started with the tool quickly.</p>"},{"location":"en/getting-started/#installation","title":"Installation","text":"<p>To install <code>sloth-runner</code> on your system, you can use the provided <code>install.sh</code> script. This script automatically detects your operating system and architecture, downloads the latest release from GitHub, and places the <code>sloth-runner</code> executable in <code>/usr/local/bin</code>.</p> <pre><code>bash &lt;(curl -sL https://raw.githubusercontent.com/chalkan3/sloth-runner/master/install.sh)\n</code></pre> <p>Note: The <code>install.sh</code> script requires <code>sudo</code> privileges to move the executable to <code>/usr/local/bin</code>.</p>"},{"location":"en/getting-started/#basic-usage","title":"Basic Usage","text":"<p>To run a Lua task file:</p> <pre><code>sloth-runner run -f examples/basic_pipeline.lua\n</code></pre> <p>To list tasks in a file:</p> <pre><code>sloth-runner list -f examples/basic_pipeline.lua\n</code></pre>"},{"location":"en/getting-started/#next-steps","title":"Next Steps","text":"<p>Now that you have Sloth-Runner installed and running, explore the Core Concepts to understand how to define your tasks, or dive directly into the new Built-in Modules for advanced automation with Git, Pulumi, and Salt.</p> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"en/master-agent-architecture/","title":"Sloth-Runner Master-Agent Architecture","text":"<p><code>sloth-runner</code> is designed with a master-agent architecture to facilitate distributed task execution. This allows you to orchestrate and run tasks across multiple remote machines from a central control point.</p>"},{"location":"en/master-agent-architecture/#core-concepts","title":"Core Concepts","text":""},{"location":"en/master-agent-architecture/#master-server","title":"Master Server","text":"<p>The Master Server is the central component of the <code>sloth-runner</code> ecosystem. Its primary responsibilities include:</p> <ul> <li>Agent Registry: Maintains a registry of all connected and available agents.</li> <li>Task Orchestration: Receives task execution requests and dispatches them to the appropriate agents.</li> <li>Communication Hub: Acts as the communication hub between the user (via the CLI) and the agents.</li> </ul>"},{"location":"en/master-agent-architecture/#agent","title":"Agent","text":"<p>An Agent is a lightweight process that runs on a remote machine. Its main functions are:</p> <ul> <li>Registration: Registers itself with the Master Server upon startup, providing its network address and name.</li> <li>Task Execution: Receives commands and tasks from the Master Server and executes them locally.</li> <li>Status Reporting: Reports the status and output of executed tasks back to the Master Server.</li> </ul>"},{"location":"en/master-agent-architecture/#communication-protocol","title":"Communication Protocol","text":"<p>Master and Agents communicate using gRPC, a high-performance, open-source universal RPC framework. This ensures efficient and reliable communication between the distributed components.</p>"},{"location":"en/master-agent-architecture/#installation-and-startup","title":"Installation and Startup","text":""},{"location":"en/master-agent-architecture/#master-server-installation","title":"Master Server Installation","text":"<p>To set up the <code>sloth-runner</code> Master Server, you typically run it on your local machine or a designated control server. The master listens for agent connections on a specified port.</p> <p>Command:</p> <pre><code>go run ./cmd/sloth-runner master -p &lt;port&gt; [--daemon]\n</code></pre> <ul> <li><code>-p, --port &lt;port&gt;</code>: Specifies the port on which the master server will listen for agent connections. The default port is <code>50053</code>.</li> <li><code>--daemon</code>: (Optional) Runs the master server as a background daemon process. This is recommended for continuous operation.</li> </ul> <p>Example:</p> <p>To start the master server on port <code>50053</code> in daemon mode:</p> <pre><code>go run ./cmd/sloth-runner master -p 50053 --daemon\n</code></pre> <p>Upon successful startup, the master will log that it is listening for agent registrations.</p>"},{"location":"en/master-agent-architecture/#agent-installation","title":"Agent Installation","text":"<p>Agents are deployed on the remote machines where you intend to execute tasks. Each agent needs to be configured with a unique name and the address of the Master Server.</p> <p>Command:</p> <pre><code>sloth-runner agent start --name &lt;agent_name&gt; --master &lt;master_ip&gt;:&lt;master_port&gt; --port &lt;agent_port&gt; --bind-address &lt;agent_ip&gt; [--daemon]\n</code></pre> <ul> <li><code>--name &lt;agent_name&gt;</code>: A unique name for this agent (e.g., <code>agent1</code>, <code>web-server-agent</code>). This name is used by the master to identify and address the agent.</li> <li><code>--master &lt;master_ip&gt;:&lt;master_port&gt;</code>: The IP address and port of the running Master Server. Agents will connect to this address to register and receive tasks.</li> <li><code>--port &lt;agent_port&gt;</code>: The port on which the agent itself will listen for direct communication from the master (e.g., for task execution requests). The default port is <code>50051</code>.</li> <li><code>--bind-address &lt;agent_ip&gt;</code>: Crucial for remote agents. This specifies the specific IPv4 address that the agent should bind to and report to the master. This ensures the master can correctly connect to the agent, especially in environments with multiple network interfaces or IPv6 preference. Always set this to the remote machine's accessible IPv4 address.</li> <li><code>--daemon</code>: (Optional) Runs the agent as a background daemon process.</li> </ul> <p>Example:</p> <p>To start an agent named <code>agent1</code> on a machine with IP <code>192.168.1.16</code>, connecting to a master at <code>192.168.1.21:50053</code>, and listening on port <code>50051</code>:</p> <pre><code>sloth-runner agent start --name agent1 --master 192.168.1.21:50053 --port 50051 --bind-address 192.168.1.16 --daemon\n</code></pre>"},{"location":"en/master-agent-architecture/#task-execution-workflow","title":"Task Execution Workflow","text":"<ol> <li>Master Startup: The <code>sloth-runner</code> master server starts and begins listening for agent registrations.</li> <li>Agent Startup &amp; Registration: An agent starts on a remote machine, connects to the configured master, and registers itself, providing its unique name and accessible network address.</li> <li>Agent Listing: The user can list all registered agents using <code>sloth-runner agent list</code> from the master's machine.</li> <li>Task Request: The user initiates a task execution on a specific agent using <code>sloth-runner agent run &lt;agent_name&gt; &lt;command&gt;</code>.</li> <li>Task Dispatch: The master receives the request, looks up the agent's address in its registry, and dispatches the command to the target agent via gRPC.</li> <li>Task Execution: The agent receives the command, executes it locally (e.g., using <code>bash -c &lt;command&gt;</code>), and captures its standard output, standard error, and exit status.</li> <li>Result Reporting: The agent sends the execution results (stdout, stderr, success/failure) back to the master.</li> <li>Output Presentation: The master receives the results and presents them to the user in a clear, formatted, and colored output (as described in the Enhanced <code>sloth-runner agent run</code> Output documentation).</li> </ol> <p>This architecture provides a flexible and scalable way to manage and execute tasks across your infrastructure. </p>"},{"location":"en/repl/","title":"Interactive REPL","text":"<p>The <code>sloth-runner repl</code> command drops you into an interactive Read-Eval-Print Loop (REPL) session. This is a powerful tool for debugging, exploration, and quick experimentation with the sloth-runner modules.</p>"},{"location":"en/repl/#starting-the-repl","title":"Starting the REPL","text":"<p>To start a session, simply run: <pre><code>sloth-runner repl\n</code></pre></p> <p>You can also pre-load a workflow file to have its <code>TaskDefinitions</code> and any helper functions available in the session. This is incredibly useful for debugging an existing pipeline.</p> <pre><code>sloth-runner repl -f /path/to/your/pipeline.lua\n</code></pre>"},{"location":"en/repl/#features","title":"Features","text":""},{"location":"en/repl/#live-environment","title":"Live Environment","text":"<p>The REPL provides a live Lua environment where you can execute any Lua code. All the built-in sloth-runner modules (<code>aws</code>, <code>docker</code>, <code>fs</code>, <code>log</code>, etc.) are pre-loaded and ready to use.</p> <pre><code>sloth&gt; log.info(\"Hello from the REPL!\")\nsloth&gt; result = fs.read(\"README.md\")\nsloth&gt; print(string.sub(result, 1, 50))\n</code></pre>"},{"location":"en/repl/#autocompletion","title":"Autocompletion","text":"<p>The REPL has a sophisticated autocompletion system. - Start typing the name of a global variable or module (e.g., <code>aws</code>) and press <code>Tab</code> to see suggestions. - Type a module name followed by a dot (e.g., <code>docker.</code>) and press <code>Tab</code> to see all the functions available in that module.</p>"},{"location":"en/repl/#history","title":"History","text":"<p>The REPL keeps a history of your commands. Use the up and down arrow keys to navigate through previous commands.</p>"},{"location":"en/repl/#example-session","title":"Example Session","text":"<p>Here is an example of using the REPL to debug a Docker command.</p> <pre><code>$ sloth-runner repl\nSloth-Runner Interactive REPL\nType 'exit' or 'quit' to leave.\nsloth&gt; result = docker.exec({\"ps\", \"-a\"})\nsloth&gt; print(result.stdout)\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nsloth&gt; -- Now let's try to build an image\nsloth&gt; build_result = docker.build({tag=\"my-test\", path=\"./examples/docker\"})\nsloth&gt; print(build_result.success)\ntrue\nsloth&gt; exit\nBye!\n</code></pre>"},{"location":"en/testing/","title":"Testing Workflows","text":"<p>The sloth-runner includes a built-in testing framework that allows you to write unit and integration tests for your task workflows. Writing tests for your automation is crucial for ensuring reliability, preventing regressions, and having confidence when making changes.</p>"},{"location":"en/testing/#the-test-command","title":"The <code>test</code> Command","text":"<p>You can run a test file using the <code>sloth-runner test</code> command. It requires two main files: the workflow you want to test and the test script itself.</p> <pre><code>sloth-runner test -w &lt;path_to_workflow.lua&gt; -f &lt;path_to_test_file.lua&gt;\n</code></pre> <ul> <li><code>-w, --workflow</code>: Specifies the path to the main <code>TaskDefinitions</code> file that you want to test.</li> <li><code>-f, --file</code>: Specifies the path to your test file.</li> </ul>"},{"location":"en/testing/#writing-tests","title":"Writing Tests","text":"<p>Tests are written in Lua and use two new global modules provided by the test runner: <code>test</code> and <code>assert</code>.</p>"},{"location":"en/testing/#the-test-module","title":"The <code>test</code> Module","text":"<p>The <code>test</code> module is used to structure your tests and to run specific tasks from your workflow.</p> <ul> <li><code>test.describe(suite_name, function)</code>: Groups related tests into a \"suite\". This is for organization.</li> <li><code>test.it(function)</code>: Defines an individual test case. The description of the test should be included in the assertion messages inside this function.</li> <li><code>test.run_task(task_name)</code>: This is the core function of the testing framework. It executes a single task by its name from the loaded workflow file. It returns a <code>result</code> table containing the execution details.</li> </ul> <p>The <code>result</code> table returned by <code>run_task</code> has the following structure:</p> <pre><code>{\n  success = true, -- boolean: true if the task succeeded, false otherwise\n  message = \"Task executed successfully\", -- string: The message returned by the task\n  duration = \"1.23ms\", -- string: The execution duration\n  output = { ... }, -- table: The output table returned by the task\n  error = nil -- string: The error message if the task failed\n}\n</code></pre>"},{"location":"en/testing/#the-assert-module","title":"The <code>assert</code> Module","text":"<p>The <code>assert</code> module provides functions to check the results of your task executions.</p> <ul> <li><code>assert.is_true(value, message)</code>: Checks if the <code>value</code> is true.</li> <li><code>assert.equals(actual, expected, message)</code>: Checks if the <code>actual</code> value is equal to the <code>expected</code> value.</li> </ul>"},{"location":"en/testing/#mocking-modules","title":"Mocking Modules","text":"<p>To test the logic of your pipelines without making real external calls (e.g., to AWS, Docker, or Terraform), the testing framework includes a powerful mocking feature.</p>"},{"location":"en/testing/#strict-mocking-policy","title":"Strict Mocking Policy","text":"<p>The test runner enforces a strict mocking policy. When running in test mode, any call to a module function (like <code>aws.exec</code> or <code>docker.build</code>) that has not been explicitly mocked will cause the test to fail immediately. This ensures that your tests are fully self-contained, deterministic, and do not have unintended side effects.</p>"},{"location":"en/testing/#testmockfunction_name-mock_definition","title":"<code>test.mock(function_name, mock_definition)</code>","text":"<p>This function allows you to define a fake return value for any mockable module function.</p> <ul> <li><code>function_name</code> (string): The full name of the function to mock (e.g., <code>\"aws.s3.sync\"</code>, <code>\"docker.build\"</code>).</li> <li><code>mock_definition</code> (table): A table that defines what the mocked function should return. It must contain a <code>returns</code> key, which is a list of the values the function will return.</li> </ul> <p>The <code>returns</code> list is crucial because Lua functions can return multiple values.</p> <p>Example:</p> <pre><code>-- Mock a function that returns a single result table\ntest.mock(\"docker.build\", {\n  returns = {\n    { success = true, stdout = \"Successfully built image\" }\n  }\n})\n\n-- Mock a function that returns two values (e.g., a value and an error)\n-- This simulates a successful call to terraform.output\ntest.mock(\"terraform.output\", {\n  returns = { \"my_file.txt\", nil }\n})\n\n-- This simulates a failed call\ntest.mock(\"terraform.output\", {\n  returns = { nil, \"output not found\" }\n})\n</code></pre>"},{"location":"en/testing/#complete-mocking-example","title":"Complete Mocking Example","text":"<p>Let's say you have a task that calls <code>aws.exec</code> and has logic that depends on the output.</p> <p>Task in <code>my_workflow.lua</code>: <pre><code>-- ...\n{\n  name = \"check-account\",\n  command = function()\n    local result = aws.exec({\"sts\", \"get-caller-identity\"})\n    local data = data.parse_json(result.stdout)\n    if data.Account == \"123456789012\" then\n      return true, \"Correct account.\"\n    else\n      return false, \"Wrong account.\"\n    end\n  end\n}\n-- ...\n</code></pre></p> <p>Test in <code>my_test.lua</code>: <pre><code>test.describe(\"Account Check Logic\", function()\n  test.it(function()\n    -- Mock the return value of aws.exec\n    test.mock(\"aws.exec\", {\n      returns = {\n        {\n          success = true,\n          stdout = '{\"Account\": \"123456789012\"}'\n        }\n      }\n    })\n\n    -- Run the task that uses the mock\n    local result = test.run_task(\"check-account\")\n\n    -- Assert that the task's logic worked correctly with the mocked data\n    assert.is_true(result.success, \"Task should succeed with the correct account ID\")\n    assert.equals(result.message, \"Correct account.\", \"Message should be correct\")\n  end)\nend)\n</code></pre></p>"},{"location":"en/modules/aws/","title":"AWS Module","text":"<p>The <code>aws</code> module provides a comprehensive interface for interacting with Amazon Web Services using the AWS CLI. It is designed to work seamlessly with standard AWS credential chains and also has first-class support for <code>aws-vault</code> for enhanced security.</p>"},{"location":"en/modules/aws/#configuration","title":"Configuration","text":"<p>No specific configuration in <code>values.yaml</code> is required. The module relies on your environment being configured to interact with AWS. This can be achieved through: - IAM roles for EC2 instances or ECS/EKS tasks. - Standard environment variables (<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, etc.). - A configured <code>~/.aws/credentials</code> file. - Using <code>aws-vault</code> with a named profile.</p>"},{"location":"en/modules/aws/#generic-executor","title":"Generic Executor","text":""},{"location":"en/modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>This is the core function of the module. It executes any AWS CLI command and returns the result.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to the AWS CLI (e.g., <code>{\"s3\", \"ls\", \"--recursive\"}</code>).</li> <li><code>opts</code> (table): Optional. A table of options for the execution.<ul> <li><code>profile</code> (string): If provided, the command will be executed using <code>aws-vault exec &lt;profile&gt; -- aws ...</code>. If omitted, it will run <code>aws ...</code> directly.</li> </ul> </li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command. - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>-- Using default credentials\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- Using an aws-vault profile\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"my-prod-profile\"})\n</code></pre>"},{"location":"en/modules/aws/#s3-helpers","title":"S3 Helpers","text":""},{"location":"en/modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p>A high-level wrapper for the <code>aws s3 sync</code> command, useful for synchronizing directories with S3.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>source</code> (string): Required. The source directory or S3 path.</li> <li><code>destination</code> (string): Required. The destination directory or S3 path.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> <li><code>delete</code> (boolean): Optional. If <code>true</code>, adds the <code>--delete</code> flag to the sync command.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://my-app-bucket/static\",\n  profile = \"deployment-profile\",\n  delete = true\n})\nif not ok then\n  log.error(\"S3 sync failed: \" .. err)\nend\n</code></pre>"},{"location":"en/modules/aws/#secrets-manager-helpers","title":"Secrets Manager Helpers","text":""},{"location":"en/modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>Retrieves a secret's value from AWS Secrets Manager. This function simplifies the process by directly returning the <code>SecretString</code>.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>secret_id</code> (string): Required. The name or ARN of the secret to retrieve.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>secret_string</code> (string) on success.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"production/database/password\",\n  profile = \"my-app-profile\"\n})\n\nif not db_password then\n  log.error(\"Failed to get secret: \" .. err)\n  return false, \"Config failed.\"\nend\n\n-- Now you can use the db_password variable\n</code></pre>"},{"location":"en/modules/azure/","title":"Azure Module","text":"<p>The <code>azure</code> module provides an interface for interacting with Microsoft Azure using the <code>az</code> command-line tool.</p>"},{"location":"en/modules/azure/#configuration","title":"Configuration","text":"<p>This module requires the <code>az</code> CLI to be installed and authenticated. Before running pipelines that use this module, you must log in to your Azure account:</p> <pre><code>az login\n</code></pre> <p>The module will use your logged-in credentials for all commands.</p>"},{"location":"en/modules/azure/#generic-executor","title":"Generic Executor","text":""},{"location":"en/modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>Executes any <code>az</code> command. This function automatically adds the <code>--output json</code> flag (if not already present) to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>az</code> (e.g., <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Logged in as: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"en/modules/azure/#resource-group-rg-helpers","title":"Resource Group (RG) Helpers","text":""},{"location":"en/modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>Deletes a resource group.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>name</code> (string): Required. The name of the resource group to delete.</li> <li><code>yes</code> (boolean): Optional. If <code>true</code>, adds the <code>--yes</code> flag to bypass the confirmation prompt.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"my-test-rg\",\n  yes = true\n})\nif not ok then\n  log.error(\"Failed to delete resource group: \" .. err)\nend\n</code></pre>"},{"location":"en/modules/azure/#virtual-machine-vm-helpers","title":"Virtual Machine (VM) Helpers","text":""},{"location":"en/modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>Lists virtual machines.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): Optional. A table containing the following fields:<ul> <li><code>resource_group</code> (string): The name of a resource group to scope the list to. If omitted, lists VMs in the entire subscription.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>vms</code> (table) on success, where the table is a parsed JSON array of your VM objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>-- List all VMs in the subscription\nlocal all_vms, err1 = azure.vm.list()\n\n-- List VMs in a specific resource group\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"my-production-rg\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"Found VM: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"en/modules/data/","title":"Data Module","text":"<p>The <code>data</code> module provides functions for parsing and serializing data between Lua tables and common data formats like JSON and YAML.</p> <p>---\\n</p>"},{"location":"en/modules/data/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>Parses a JSON string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>json_string</code> (string): The JSON formatted string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: The resulting Lua table.</li> <li><code>error</code>: An error object if parsing fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"en/modules/data/#datato_jsonlua_table","title":"<code>data.to_json(lua_table)</code>","text":"<p>Serializes a Lua table into a JSON string.</p> <ul> <li>Parameters:<ul> <li><code>lua_table</code> (table): The Lua table to serialize.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The resulting JSON string.</li> <li><code>error</code>: An error object if serialization fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"en/modules/data/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>Parses a YAML string into a Lua table.</p> <ul> <li>Parameters:<ul> <li><code>yaml_string</code> (string): The YAML formatted string to parse.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: The resulting Lua table.</li> <li><code>error</code>: An error object if parsing fails.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"en/modules/data/#datato_yamllua_table","title":"<code>data.to_yaml(lua_table)</code>","text":"<p>Serializes a Lua table into a YAML string.</p> <ul> <li>Parameters:<ul> <li><code>lua_table</code> (table): The Lua table to serialize.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The resulting YAML string.</li> <li><code>error</code>: An error object if serialization fails.</li> </ul> </li> </ul>"},{"location":"en/modules/data/#example","title":"Example","text":"<pre><code>command = function()\n  local data = require(\"data\")\n\n  -- JSON Example\n  log.info(\"Testing JSON serialization...\")\n  local my_table = { name = \"sloth-runner\", version = 1.0, features = { \"tasks\", \"lua\" } }\n  local json_str, err = data.to_json(my_table)\n  if err then\n    return false, \"Failed to serialize to JSON: \" .. err\n  end\n  print(\"Serialized JSON: \" .. json_str)\n\n  log.info(\"Testing JSON parsing...\")\n  local parsed_table, err = data.parse_json(json_str)\n  if err then\n    return false, \"Failed to parse JSON: \" .. err\n  end\n  log.info(\"Parsed name from JSON: \" .. parsed_table.name)\n\n  -- YAML Example\n  log.info(\"Testing YAML serialization...\")\n  local yaml_str, err = data.to_yaml(my_table)\n  if err then\n    return false, \"Failed to serialize to YAML: \" .. err\n  end\n  print(\"Serialized YAML:\\n\" .. yaml_str)\n\n  log.info(\"Testing YAML parsing...\")\n  parsed_table, err = data.parse_yaml(yaml_str)\n  if err then\n    return false, \"Failed to parse YAML: \" .. err\n  end\n  log.info(\"Parsed version from YAML: \" .. parsed_table.version)\n\n  return true, \"Data module operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/digitalocean/","title":"DigitalOcean Module","text":"<p>The <code>digitalocean</code> module provides an interface for interacting with your DigitalOcean resources using the <code>doctl</code> command-line tool.</p>"},{"location":"en/modules/digitalocean/#configuration","title":"Configuration","text":"<p>This module requires the <code>doctl</code> CLI to be installed and authenticated. The standard way to do this is to generate a personal access token in your DigitalOcean control panel and set it as the <code>DIGITALOCEAN_ACCESS_TOKEN</code> environment variable.</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"your_do_api_token_here\"\n</code></pre> <p>The module will automatically use this token for all commands.</p>"},{"location":"en/modules/digitalocean/#generic-executor","title":"Generic Executor","text":""},{"location":"en/modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>Executes any <code>doctl</code> command. This function automatically adds the <code>--output json</code> flag to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>doctl</code> (e.g., <code>{\"compute\", \"droplet\", \"list\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Account status: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"en/modules/digitalocean/#droplets-helpers","title":"Droplets Helpers","text":""},{"location":"en/modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>A high-level wrapper to list all Droplets in your account.</p> <p>Returns:</p> <ul> <li><code>droplets</code> (table) on success, where the table is a parsed JSON array of your Droplet objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"Found Droplet: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"en/modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>Deletes a specific Droplet by its ID.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>id</code> (string): Required. The ID of the Droplet to delete.</li> <li><code>force</code> (boolean): Optional. If <code>true</code>, adds the <code>--force</code> flag to bypass the confirmation prompt. Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"Failed to delete droplet: \" .. err)\nend\n</code></pre>"},{"location":"en/modules/docker/","title":"Docker Module","text":"<p>The <code>docker</code> module provides a convenient interface for interacting with the Docker daemon, allowing you to build, run, and push Docker images as part of your pipelines.</p>"},{"location":"en/modules/docker/#configuration","title":"Configuration","text":"<p>This module requires the <code>docker</code> CLI to be installed and the Docker daemon to be running and accessible.</p>"},{"location":"en/modules/docker/#functions","title":"Functions","text":""},{"location":"en/modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>Executes any raw <code>docker</code> command.</p> <ul> <li><code>args</code> (table): Required. A list of arguments to pass to the <code>docker</code> command (e.g., <code>{\"ps\", \"-a\"}</code>).</li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"en/modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>Builds a Docker image using <code>docker build</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag for the image (e.g., <code>my-app:latest</code>).</li> <li><code>path</code> (string): Required. The build context path.</li> <li><code>dockerfile</code> (string): Optional. The path to the Dockerfile.</li> <li><code>build_args</code> (table): Optional. A table of build arguments (e.g., <code>{VERSION = \"1.0\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>Pushes a Docker image to a registry using <code>docker push</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag of the image to push.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>Runs a Docker container using <code>docker run</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>image</code> (string): Required. The image to run.</li> <li><code>name</code> (string): Optional. The name for the container.</li> <li><code>detach</code> (boolean): Optional. If <code>true</code>, runs the container in the background (<code>-d</code>).</li> <li><code>ports</code> (table): Optional. A list of port mappings (e.g., <code>{\"8080:80\"}</code>).</li> <li><code>env</code> (table): Optional. A table of environment variables (e.g., <code>{MY_VAR = \"value\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/docker/#example","title":"Example","text":"<pre><code>local image_tag = \"my-test-image:latest\"\n\n-- Task 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"Build failed\" end\n\n-- Task 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"my-test-container\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"Run failed\" end\n\n-- Task 3: Push (after successful testing)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"Push failed\" end\n</code></pre>"},{"location":"en/modules/exec/","title":"Exec Module","text":"<p>The <code>exec</code> module is one of the most fundamental modules in <code>sloth-runner</code>. It provides a powerful function to execute arbitrary shell commands, giving you full control over the execution environment.</p>"},{"location":"en/modules/exec/#execruncommand-options","title":"<code>exec.run(command, [options])</code>","text":"<p>Executes a shell command using <code>bash -c</code>.</p>"},{"location":"en/modules/exec/#parameters","title":"Parameters","text":"<ul> <li><code>command</code> (string): The shell command to execute.</li> <li><code>options</code> (table, optional): A table of options to control the execution.<ul> <li><code>workdir</code> (string): The working directory where the command should be executed. If not provided, it runs in the task group's temporary directory (if available) or the current directory.</li> <li><code>env</code> (table): A dictionary of environment variables (key-value pairs) to set for the command's execution. These are added to the existing environment.</li> </ul> </li> </ul>"},{"location":"en/modules/exec/#returns","title":"Returns","text":"<p>A table containing the result of the command execution:</p> <ul> <li><code>success</code> (boolean): <code>true</code> if the command exited with a code of <code>0</code>, otherwise <code>false</code>.</li> <li><code>stdout</code> (string): The standard output from the command.</li> <li><code>stderr</code> (string): The standard error output from the command.</li> </ul>"},{"location":"en/modules/exec/#example","title":"Example","text":"<p>This example demonstrates how to use <code>exec.run</code> with a custom working directory and environment variables.</p> <pre><code>-- examples/exec_module_example.lua\n\nTaskDefinitions = {\n  main = {\n    description = \"A task to demonstrate the exec module.\",\n    tasks = {\n      {\n        name = \"run-with-options\",\n        description = \"Executes a command with a custom workdir and environment.\",\n        command = function()\n          log.info(\"Preparing to run a custom command...\")\n\n          local exec = require(\"exec\")\n\n          -- Create a temporary directory for the example\n          local temp_dir = \"/tmp/sloth-exec-test\"\n          fs.mkdir(temp_dir)\n          fs.write(temp_dir .. \"/test.txt\", \"hello from test file\")\n\n          -- Define options\n          local options = {\n            workdir = temp_dir,\n            env = {\n              MY_VAR = \"SlothRunner\",\n              ANOTHER_VAR = \"is_awesome\"\n            }\n          }\n\n          -- Execute the command\n          local result = exec.run(\"echo 'MY_VAR is $MY_VAR' &amp;&amp; ls -l &amp;&amp; cat test.txt\", options)\n\n          -- Clean up the temporary directory\n          fs.rm_r(temp_dir)\n\n          if result.success then\n            log.info(\"Command executed successfully!\")\n            print(\"--- STDOUT ---\")\n            print(result.stdout)\n            print(\"--------------\")\n            return true, \"Exec command successful.\"\n          else\n            log.error(\"Exec command failed.\")\n            log.error(\"Stderr: \" .. result.stderr)\n            return false, \"Exec command failed.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/modules/fs/","title":"FS Module","text":"<p>The <code>fs</code> module provides essential functions for interacting with the file system directly from your Lua scripts.</p>"},{"location":"en/modules/fs/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>Reads the entire content of a file.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> </ul> </li> <li>Returns:<ul> <li><code>string</code>: The content of the file.</li> <li><code>error</code>: An error object if the read fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>Writes content to a file, overwriting it if it already exists.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to write.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the write fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>Appends content to the end of a file. Creates the file if it doesn't exist.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file.</li> <li><code>content</code> (string): The content to append.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the append fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>Checks if a file or directory exists at the given path.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to check.</li> </ul> </li> <li>Returns:<ul> <li><code>boolean</code>: <code>true</code> if the path exists, <code>false</code> otherwise.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>Creates a directory at the given path, including any necessary parent directories (like <code>mkdir -p</code>).</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The directory path to create.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the creation fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>Removes a single file.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the file to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the removal fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>Removes a file or directory recursively (like <code>rm -rf</code>).</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to remove.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the removal fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>Lists the contents of a directory.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the directory.</li> </ul> </li> <li>Returns:<ul> <li><code>table</code>: A table containing the names of files and subdirectories.</li> <li><code>error</code>: An error object if the listing fails.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#fstmpname","title":"<code>fs.tmpname()</code>","text":"<p>Generates a unique temporary directory path. Note: This function only returns the name; it does not create the directory.</p> <ul> <li>Returns:<ul> <li><code>string</code>: A unique path suitable for a temporary directory.</li> <li><code>error</code>: An error object if a name could not be generated.</li> </ul> </li> </ul>"},{"location":"en/modules/fs/#example","title":"Example","text":"<pre><code>command = function()\n  local fs = require(\"fs\")\n\n  local tmp_dir = \"/tmp/fs-example\"\n  log.info(\"Creating directory: \" .. tmp_dir)\n  fs.mkdir(tmp_dir)\n\n  local file_path = tmp_dir .. \"/my_file.txt\"\n  log.info(\"Writing to file: \" .. file_path)\n  fs.write(file_path, \"Hello, Sloth Runner!\\n\")\n\n  log.info(\"Appending to file...\")\n  fs.append(file_path, \"This is a new line.\")\n\n  if fs.exists(file_path) then\n    log.info(\"File content: \" .. fs.read(file_path))\n  end\n\n  log.info(\"Listing contents of \" .. tmp_dir)\n  local contents = fs.ls(tmp_dir)\n  for i, name in ipairs(contents) do\n    print(\"- \" .. name)\n  end\n\n  log.info(\"Cleaning up...\")\n  fs.rm_r(tmp_dir)\n\n  return true, \"FS module operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/gcp/","title":"GCP Module","text":"<p>The <code>gcp</code> module provides a simple interface for executing Google Cloud CLI (<code>gcloud</code>) commands from within a <code>sloth-runner</code> task.</p>"},{"location":"en/modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>Executes a <code>gcloud</code> command with the specified arguments.</p>"},{"location":"en/modules/gcp/#parameters","title":"Parameters","text":"<ul> <li><code>args</code> (table): A Lua table (array) of strings representing the arguments to pass to the <code>gcloud</code> command. For example, <code>{\"compute\", \"instances\", \"list\"}</code>.</li> </ul>"},{"location":"en/modules/gcp/#returns","title":"Returns","text":"<p>A table containing the result of the command execution with the following keys:</p> <ul> <li><code>stdout</code> (string): The standard output from the command.</li> <li><code>stderr</code> (string): The standard error output from the command.</li> <li><code>exit_code</code> (number): The exit code of the command. An exit code of <code>0</code> typically indicates success.</li> </ul>"},{"location":"en/modules/gcp/#example","title":"Example","text":"<p>This example defines a task that lists all Compute Engine instances in the <code>us-central1</code> region for a specific project.</p> <pre><code>-- examples/gcp_cli_example.lua\n\nTaskDefinitions = {\n  main = {\n    description = \"A task to list GCP compute instances.\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"Lists GCE instances in us-central1.\",\n        command = function()\n          log.info(\"Listing GCP instances...\")\n\n          -- require the gcp module to make it available\n          local gcp = require(\"gcp\")\n\n          -- Execute the gcloud command\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"my-gcp-project-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- Check the result\n          if result and result.exit_code == 0 then\n            log.info(\"Successfully listed instances.\")\n            print(\"--- INSTANCE LIST ---\")\n            print(result.stdout)\n            print(\"---------------------\")\n            return true, \"GCP command successful.\"\n          else\n            log.error(\"Failed to list GCP instances.\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"GCP command failed.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"en/modules/git/","title":"Git Module","text":"<p>The <code>git</code> module provides a fluent API to interact with Git repositories, allowing you to automate common version control operations like cloning, committing, and pushing.</p>"},{"location":"en/modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>Clones a Git repository to a local path.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL of the repository to clone.</li> <li><code>path</code> (string): The local directory to clone into.</li> </ul> </li> <li>Returns:<ul> <li><code>repo</code> (object): A <code>GitRepo</code> object on success.</li> <li><code>error</code>: An error object if the clone fails.</li> </ul> </li> </ul>"},{"location":"en/modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>Opens an existing local Git repository.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The path to the existing local repository.</li> </ul> </li> <li>Returns:<ul> <li><code>repo</code> (object): A <code>GitRepo</code> object on success.</li> <li><code>error</code>: An error object if the path is not a valid Git repository.</li> </ul> </li> </ul>"},{"location":"en/modules/git/#the-gitrepo-object","title":"The <code>GitRepo</code> Object","text":"<p>This object represents a local repository and provides chainable methods for performing Git operations.</p>"},{"location":"en/modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>Checks out a specific branch, tag, or commit.</p> <ul> <li>Parameters: <code>ref</code> (string).</li> </ul>"},{"location":"en/modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>Pulls changes from a remote.</p> <ul> <li>Parameters: <code>remote</code> (string), <code>branch</code> (string).</li> </ul>"},{"location":"en/modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>Stages files for a commit.</p> <ul> <li>Parameters: <code>pattern</code> (string), e.g., <code>\".\"</code> or <code>\"path/to/file.txt\"</code>.</li> </ul>"},{"location":"en/modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>Creates a commit.</p> <ul> <li>Parameters: <code>message</code> (string).</li> </ul>"},{"location":"en/modules/git/#repotagname-message","title":"<code>repo:tag(name, [message])</code>","text":"<p>Creates a new tag.</p> <ul> <li>Parameters: <code>name</code> (string), <code>message</code> (string, optional).</li> </ul>"},{"location":"en/modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, [options])</code>","text":"<p>Pushes commits to a remote.</p> <ul> <li>Parameters:<ul> <li><code>remote</code> (string).</li> <li><code>branch</code> (string).</li> <li><code>options</code> (table, optional): e.g., <code>{ follow_tags = true }</code>.</li> </ul> </li> </ul>"},{"location":"en/modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>This method is called at the end of a chain to get the result of the last operation.</p> <ul> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string), and <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"en/modules/git/#example","title":"Example","text":"<p>This example demonstrates a full CI/CD-like workflow: clone, create a version file, add, commit, tag, and push.</p> <pre><code>command = function()\n  local git = require(\"git\")\n  local repo_path = \"/tmp/git-example-repo\"\n\n  -- Clean up previous runs\n  fs.rm_r(repo_path)\n\n  -- 1. Clone the repository\n  log.info(\"Cloning repository...\")\n  local repo, err = git.clone(\"https://github.com/chalkan3/sloth-runner.git\", repo_path)\n  if err then\n    return false, \"Failed to clone: \" .. err\n  end\n\n  -- 2. Create and write a version file\n  fs.write(repo_path .. \"/VERSION\", \"1.2.3\")\n\n  -- 3. Chain Git commands: add -&gt; commit -&gt; tag -&gt; push\n  log.info(\"Adding, committing, tagging, and pushing...\")\n  repo:add(\".\"):commit(\"ci: Bump version to 1.2.3\"):tag(\"v1.2.3\"):push(\"origin\", \"main\", { follow_tags = true })\n\n  -- 4. Get the result of the final operation (push)\n  local result = repo:result()\n\n  if not result.success then\n    log.error(\"Git push failed: \" .. result.stderr)\n    return false, \"Git push failed.\"\n  end\n\n  log.info(\"Successfully pushed new version tag.\")\n  return true, \"Git operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/log/","title":"Log Module","text":"<p>The <code>log</code> module provides a simple and essential interface for logging messages from within your Lua scripts to the <code>sloth-runner</code> console. Using this module is the standard way to provide feedback and debug information during a task's execution.</p>"},{"location":"en/modules/log/#loginfomessage","title":"<code>log.info(message)</code>","text":"<p>Logs a message at the INFO level. This is the standard level for general, informative messages.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#logwarnmessage","title":"<code>log.warn(message)</code>","text":"<p>Logs a message at the WARN level. This is suitable for non-critical issues that should be brought to the user's attention.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#logerrormessage","title":"<code>log.error(message)</code>","text":"<p>Logs a message at the ERROR level. This should be used for significant errors that might cause a task to fail.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<p>Logs a message at the DEBUG level. These messages are typically hidden unless the runner is in a verbose or debug mode. They are useful for detailed diagnostic information.</p> <ul> <li>Parameters:<ul> <li><code>message</code> (string): The message to log.</li> </ul> </li> </ul>"},{"location":"en/modules/log/#example","title":"Example","text":"<pre><code>command = function()\n  -- The log module is globally available and does not need to be required.\n\n  log.info(\"Starting the logging example task.\")\n\n  local user_name = \"Sloth\"\n  log.debug(\"Current user is: \" .. user_name)\n\n  if user_name ~= \"Sloth\" then\n    log.warn(\"The user is not the expected one.\")\n  end\n\n  log.info(\"Task is performing its main action...\")\n\n  local success = true -- Simulate a successful operation\n  if not success then\n    log.error(\"The main action failed unexpectedly!\")\n    return false, \"Main action failed\"\n  end\n\n  log.info(\"Logging example task finished successfully.\")\n  return true, \"Logging demonstrated.\"\nend\n</code></pre>"},{"location":"en/modules/net/","title":"Net Module","text":"<p>The <code>net</code> module provides functions for making HTTP requests and downloading files, allowing your tasks to interact with web services and remote resources.</p>"},{"location":"en/modules/net/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>Performs an HTTP GET request to the specified URL.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to send the GET request to.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string): The response body as a string.</li> <li><code>status_code</code> (number): The HTTP status code of the response.</li> <li><code>headers</code> (table): A table containing the response headers.</li> <li><code>error</code> (string): An error message if the request failed.</li> </ul> </li> </ul>"},{"location":"en/modules/net/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>Performs an HTTP POST request to the specified URL.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL to send the POST request to.</li> <li><code>body</code> (string): The request body to send.</li> <li><code>headers</code> (table, optional): A table of request headers to set.</li> </ul> </li> <li>Returns:<ul> <li><code>body</code> (string): The response body as a string.</li> <li><code>status_code</code> (number): The HTTP status code of the response.</li> <li><code>headers</code> (table): A table containing the response headers.</li> <li><code>error</code> (string): An error message if the request failed.</li> </ul> </li> </ul>"},{"location":"en/modules/net/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>Downloads a file from a URL and saves it to a local path.</p> <ul> <li>Parameters:<ul> <li><code>url</code> (string): The URL of the file to download.</li> <li><code>destination_path</code> (string): The local file path to save the downloaded content.</li> </ul> </li> <li>Returns:<ul> <li><code>error</code>: An error object if the download fails.</li> </ul> </li> </ul>"},{"location":"en/modules/net/#example","title":"Example","text":"<pre><code>command = function()\n  local net = require(\"net\")\n\n  -- Example GET request\n  log.info(\"Performing GET request to httpbin.org...\")\n  local body, status, headers, err = net.http_get(\"https://httpbin.org/get\")\n  if err then\n    log.error(\"GET request failed: \" .. err)\n    return false, \"GET request failed\"\n  end\n  log.info(\"GET request successful! Status: \" .. status)\n  -- print(\"Response Body: \" .. body)\n\n  -- Example POST request\n  log.info(\"Performing POST request to httpbin.org...\")\n  local post_body = '{\"name\": \"sloth-runner\", \"awesome\": true}'\n  local post_headers = { [\"Content-Type\"] = \"application/json\" }\n  body, status, headers, err = net.http_post(\"https://httpbin.org/post\", post_body, post_headers)\n  if err then\n    log.error(\"POST request failed: \" .. err)\n    return false, \"POST request failed\"\n  end\n  log.info(\"POST request successful! Status: \" .. status)\n  -- print(\"Response Body: \" .. body)\n\n  -- Example Download\n  local download_path = \"/tmp/sloth-runner-logo.svg\"\n  log.info(\"Downloading file to \" .. download_path)\n  local err = net.download(\"https://raw.githubusercontent.com/chalkan3/sloth-runner/master/assets/sloth-runner-logo.svg\", download_path)\n  if err then\n    log.error(\"Download failed: \" .. err)\n    return false, \"Download failed\"\n  end\n  log.info(\"File downloaded successfully.\")\n  fs.rm(download_path) -- Clean up\n\n  return true, \"Net module operations successful.\"\nend\n</code></pre>"},{"location":"en/modules/notifications/","title":"Notifications Module","text":"<p>The <code>notifications</code> module provides a simple way to send messages to various notification services from your pipelines. This is particularly useful for reporting the success or failure of a CI/CD workflow.</p> <p>Currently, the following services are supported: - Slack - ntfy</p>"},{"location":"en/modules/notifications/#configuration","title":"Configuration","text":"<p>Before using the module, you need to add the required credentials or URLs to your <code>configs/values.yaml</code> file. The module will read these values at runtime.</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # Your Slack Incoming Webhook URL\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # The ntfy server to use. Can be the public one or self-hosted.\n    server: \"https://ntfy.sh\"\n    # The topic to publish the notification to.\n    topic: \"your-sloth-runner-topic\"\n</code></pre>"},{"location":"en/modules/notifications/#slack","title":"Slack","text":""},{"location":"en/modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>Sends a message to a Slack channel via an Incoming Webhook.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>webhook_url</code> (string): Required. The Slack Incoming Webhook URL. It's recommended to get this from the <code>values</code> module.</li> <li><code>message</code> (string): Required. The main text of the message.</li> <li><code>pipeline</code> (string): Optional. The name of the pipeline, which will be displayed in the message attachment for context.</li> <li><code>error_details</code> (string): Optional. Any error details to include in the message attachment. This is useful for failure notifications.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- On success\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 Pipeline executed successfully!\",\n    pipeline = \"my-awesome-pipeline\"\n  })\n\n  -- On failure\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c Pipeline execution failed!\",\n    pipeline = \"my-awesome-pipeline\",\n    error_details = \"Could not connect to database.\"\n  })\nend\n</code></pre>"},{"location":"en/modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"en/modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>Sends a message to an ntfy.sh topic.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>server</code> (string): Required. The ntfy server URL.</li> <li><code>topic</code> (string): Required. The topic to send the message to.</li> <li><code>message</code> (string): Required. The body of the notification.</li> <li><code>title</code> (string): Optional. The title of the notification.</li> <li><code>priority</code> (string): Optional. Notification priority (e.g., <code>high</code>, <code>default</code>, <code>low</code>).</li> <li><code>tags</code> (table): Optional. A list of tags (emojis) to add to the notification.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- On success\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Success\",\n    message = \"The pipeline finished without errors.\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- On failure\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Failed!\",\n    message = \"The pipeline failed with an error.\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"en/modules/pkg/","title":"<code>pkg</code> Module","text":"<p>The <code>pkg</code> module provides functions for managing system packages. It automatically detects the package manager (<code>apt</code>, <code>yum</code>, <code>brew</code>) and uses <code>sudo</code> when necessary.</p>"},{"location":"en/modules/pkg/#pkginstallpackages","title":"<code>pkg.install(packages)</code>","text":"<p>Installs one or more packages.</p> <ul> <li><code>packages</code>: A string or a table of strings representing the packages to install.</li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success, <code>false</code> on failure.</li> <li>The command's output (stdout and stderr).</li> </ul> <p>Example:</p> <pre><code>local success, output = pkg.install(\"htop\")\nif not success then\n  log.error(\"Failed to install htop: \" .. output)\nend\n</code></pre>"},{"location":"en/modules/pkg/#pkgremovepackages","title":"<code>pkg.remove(packages)</code>","text":"<p>Removes one or more packages.</p> <ul> <li><code>packages</code>: A string or a table of strings representing the packages to remove.</li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success, <code>false</code> on failure.</li> <li>The command's output (stdout and stderr).</li> </ul> <p>Example:</p> <pre><code>local success, output = pkg.remove(\"htop\")\nif not success then\n  log.error(\"Failed to remove htop: \" .. output)\nend\n</code></pre>"},{"location":"en/modules/pkg/#pkgupdate","title":"<code>pkg.update()</code>","text":"<p>Updates the package list.</p> <p>Returns:</p> <ul> <li><code>true</code> on success, <code>false</code> on failure.</li> <li>The command's output (stdout and stderr).</li> </ul> <p>Example:</p> <pre><code>local success, output = pkg.update()\nif not success then\n  log.error(\"Failed to update package list: \" .. output)\nend\n</code></pre>"},{"location":"en/modules/pulumi/","title":"Pulumi Module","text":"<p>The <code>pulumi</code> module provides a fluent API to orchestrate Pulumi stacks, enabling you to manage your Infrastructure as Code (IaC) workflows directly from <code>sloth-runner</code>.</p>"},{"location":"en/modules/pulumi/#pulumistackname-options","title":"<code>pulumi.stack(name, options)</code>","text":"<p>Creates a Pulumi stack object.</p> <ul> <li>Parameters:<ul> <li><code>name</code> (string): The full name of the stack (e.g., <code>\"my-org/my-project/dev\"</code>).</li> <li><code>options</code> (table): A table of options.<ul> <li><code>workdir</code> (string): Required. The path to the Pulumi project directory.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>stack</code> (object): A <code>PulumiStack</code> object.</li> <li><code>error</code>: An error object if the stack cannot be initialized.</li> </ul> </li> </ul>"},{"location":"en/modules/pulumi/#the-pulumistack-object","title":"The <code>PulumiStack</code> Object","text":"<p>This object represents a specific Pulumi stack and provides methods for interaction.</p>"},{"location":"en/modules/pulumi/#stackupoptions","title":"<code>stack:up([options])</code>","text":"<p>Creates or updates the stack's resources by running <code>pulumi up</code>.</p> <ul> <li>Parameters:<ul> <li><code>options</code> (table, optional):<ul> <li><code>yes</code> (boolean): If <code>true</code>, passes <code>--yes</code> to approve the update automatically.</li> <li><code>config</code> (table): A dictionary of configuration values to pass to the stack.</li> <li><code>args</code> (table): A list of additional string arguments to pass to the command.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string), and <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"en/modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview([options])</code>","text":"<p>Previews the changes that would be made by an update by running <code>pulumi preview</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"en/modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh([options])</code>","text":"<p>Refreshes the stack's state by running <code>pulumi refresh</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"en/modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy([options])</code>","text":"<p>Destroys all resources in the stack by running <code>pulumi destroy</code>.</p> <ul> <li>Parameters: Same as <code>stack:up</code>.</li> <li>Returns: Same as <code>stack:up</code>.</li> </ul>"},{"location":"en/modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>Retrieves the outputs of a deployed stack.</p> <ul> <li>Returns:<ul> <li><code>outputs</code> (table): A Lua table of the stack's outputs.</li> <li><code>error</code>: An error object if fetching outputs fails.</li> </ul> </li> </ul>"},{"location":"en/modules/pulumi/#example","title":"Example","text":"<p>This example shows a common pattern: deploying a networking stack (VPC) and then using its output (<code>vpcId</code>) to configure and deploy an application stack.</p> <pre><code>command = function()\n  local pulumi = require(\"pulumi\")\n\n  -- 1. Define the VPC stack\n  local vpc_stack = pulumi.stack(\"my-org/vpc/prod\", { workdir = \"./pulumi/vpc\" })\n\n  -- 2. Deploy the VPC\n  log.info(\"Deploying VPC stack...\")\n  local vpc_result = vpc_stack:up({ yes = true })\n  if not vpc_result.success then\n    return false, \"VPC deployment failed: \" .. vpc_result.stderr\n  end\n\n  -- 3. Get the VPC ID from its outputs\n  log.info(\"Fetching VPC outputs...\")\n  local vpc_outputs, err = vpc_stack:outputs()\n  if err then\n    return false, \"Failed to get VPC outputs: \" .. err\n  end\n  local vpc_id = vpc_outputs.vpcId\n\n  -- 4. Define the App stack\n  local app_stack = pulumi.stack(\"my-org/app/prod\", { workdir = \"./pulumi/app\" })\n\n  -- 5. Deploy the App, passing the vpcId as configuration\n  log.info(\"Deploying App stack into VPC: \" .. vpc_id)\n  local app_result = app_stack:up({\n    yes = true,\n    config = { [\"my-app:vpcId\"] = vpc_id }\n  })\n  if not app_result.success then\n    return false, \"App deployment failed: \" .. app_result.stderr\n  end\n\n  log.info(\"All stacks deployed successfully.\")\n  return true, \"Pulumi orchestration complete.\"\nend\n</code></pre>"},{"location":"en/modules/python/","title":"Python Module","text":"<p>The <code>python</code> module provides a convenient way to manage Python virtual environments (<code>venv</code>) and execute scripts from within your <code>sloth-runner</code> tasks. This is particularly useful for workflows that involve Python-based tools or scripts.</p>"},{"location":"en/modules/python/#pythonvenvpath","title":"<code>python.venv(path)</code>","text":"<p>Creates a Python virtual environment object. Note that this only creates the object in Lua; the environment itself is not created on the file system until you call <code>:create()</code>.</p> <ul> <li>Parameters:<ul> <li><code>path</code> (string): The file system path where the virtual environment should be created (e.g., <code>./.venv</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>venv</code> (object): A virtual environment object with methods to interact with it.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#venvcreate","title":"<code>venv:create()</code>","text":"<p>Creates the virtual environment on the file system at the specified path.</p> <ul> <li>Returns:<ul> <li><code>error</code>: An error object if the creation fails.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#venvpipcommand","title":"<code>venv:pip(command)</code>","text":"<p>Executes a <code>pip</code> command within the context of the virtual environment.</p> <ul> <li>Parameters:<ul> <li><code>command</code> (string): The arguments to pass to <code>pip</code> (e.g., <code>install -r requirements.txt</code>).</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing the <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code> of the <code>pip</code> command.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#venvexecscript_path","title":"<code>venv:exec(script_path)</code>","text":"<p>Executes a Python script using the Python interpreter from the virtual environment.</p> <ul> <li>Parameters:<ul> <li><code>script_path</code> (string): The path to the Python script to execute.</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing the <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code> of the script execution.</li> </ul> </li> </ul>"},{"location":"en/modules/python/#example","title":"Example","text":"<p>This example demonstrates a complete lifecycle: creating a virtual environment, installing dependencies from a <code>requirements.txt</code> file, and running a Python script.</p> <pre><code>-- examples/python_venv_lifecycle_example.lua\n\nTaskDefinitions = {\n  main = {\n    description = \"A task to demonstrate the Python venv lifecycle.\",\n    create_workdir_before_run = true, -- Use a temporary workdir\n    tasks = {\n      {\n        name = \"run-python-script\",\n        description = \"Creates a venv, installs dependencies, and runs a script.\",\n        command = function(params)\n          local python = require(\"python\")\n          local workdir = params.workdir -- Get the temp workdir from the group\n\n          -- 1. Write our Python script and dependencies to the workdir\n          fs.write(workdir .. \"/requirements.txt\", \"requests==2.28.1\")\n          fs.write(workdir .. \"/main.py\", \"import requests\\nprint(f'Hello from Python! Using requests version: {requests.__version__}')\")\n\n          -- 2. Create a venv object\n          local venv_path = workdir .. \"/.venv\"\n          log.info(\"Setting up virtual environment at: \" .. venv_path)\n          local venv = python.venv(venv_path)\n\n          -- 3. Create the venv on the filesystem\n          venv:create()\n\n          -- 4. Install dependencies using pip\n          log.info(\"Installing dependencies from requirements.txt...\")\n          local pip_result = venv:pip(\"install -r \" .. workdir .. \"/requirements.txt\")\n          if pip_result.exit_code ~= 0 then\n            log.error(\"Pip install failed: \" .. pip_result.stderr)\n            return false, \"Failed to install Python dependencies.\"\n          end\n\n          -- 5. Execute the script\n          log.info(\"Running the Python script...\")\n          local exec_result = venv:exec(workdir .. \"/main.py\")\n          if exec_result.exit_code ~= 0 then\n            log.error(\"Python script failed: \" .. exec_result.stderr)\n            return false, \"Python script execution failed.\"\n          end\n\n          log.info(\"Python script executed successfully.\")\n          print(\"---\\n--- Python Script Output ---\")\n          print(exec_result.stdout)\n          print(\"----------------------------\")\n\n          return true, \"Python venv lifecycle complete.\"\n        end\n      }\n    }\n  }\n}\n</code></pre> <p>```</p>"},{"location":"en/modules/salt/","title":"Salt Module","text":"<p>The <code>salt</code> module provides a fluent API to interact with SaltStack, allowing you to run remote execution commands and manage configurations from your <code>sloth-runner</code> workflows.</p>"},{"location":"en/modules/salt/#saltclientoptions","title":"<code>salt.client([options])</code>","text":"<p>Creates a Salt client object.</p> <ul> <li>Parameters:<ul> <li><code>options</code> (table, optional): A table of options.<ul> <li><code>config_path</code> (string): Path to the Salt master configuration file.</li> </ul> </li> </ul> </li> <li>Returns:<ul> <li><code>client</code> (object): A <code>SaltClient</code> object.</li> </ul> </li> </ul>"},{"location":"en/modules/salt/#the-saltclient-object","title":"The <code>SaltClient</code> Object","text":"<p>This object represents a client for a Salt master and provides methods for targeting minions.</p>"},{"location":"en/modules/salt/#clienttargettarget_string-expr_form","title":"<code>client:target(target_string, [expr_form])</code>","text":"<p>Specifies the minion(s) to target for a command.</p> <ul> <li>Parameters:<ul> <li><code>target_string</code> (string): The target expression (e.g., <code>\"*\"</code> for all minions, <code>\"web-server-1\"</code>, or a grain value).</li> <li><code>expr_form</code> (string, optional): The type of targeting to use (e.g., <code>\"glob\"</code>, <code>\"grain\"</code>, <code>\"list\"</code>). Defaults to glob.</li> </ul> </li> <li>Returns:<ul> <li><code>target</code> (object): A <code>SaltTarget</code> object.</li> </ul> </li> </ul>"},{"location":"en/modules/salt/#the-salttarget-object","title":"The <code>SaltTarget</code> Object","text":"<p>This object represents a specific target and provides chainable methods for executing Salt functions.</p>"},{"location":"en/modules/salt/#targetcmdfunction-arg1-arg2","title":"<code>target:cmd(function, [arg1, arg2, ...])</code>","text":"<p>Executes a Salt execution module function on the target.</p> <ul> <li>Parameters:<ul> <li><code>function</code> (string): The name of the function to run (e.g., <code>\"test.ping\"</code>, <code>\"state.apply\"</code>, <code>\"cmd.run\"</code>).</li> <li><code>arg1</code>, <code>arg2</code>, ... (any): Additional arguments to pass to the Salt function.</li> </ul> </li> <li>Returns:<ul> <li><code>result</code> (table): A table containing <code>success</code> (boolean), <code>stdout</code> (string or table), and <code>stderr</code> (string). If the Salt command returns JSON, <code>stdout</code> will be a parsed Lua table.</li> </ul> </li> </ul>"},{"location":"en/modules/salt/#example","title":"Example","text":"<p>This example demonstrates targeting minions to ping them and apply a Salt state.</p> <pre><code>command = function()\n  local salt = require(\"salt\")\n\n  -- 1. Create a Salt client\n  local client = salt.client()\n\n  -- 2. Target all minions and ping them\n  log.info(\"Pinging all minions...\")\n  local ping_result = client:target(\"*\"):cmd(\"test.ping\")\n  if not ping_result.success then\n    return false, \"Failed to ping minions: \" .. ping_result.stderr\n  end\n  print(\"Ping Results:\")\n  print(data.to_yaml(ping_result.stdout)) -- stdout is a table\n\n  -- 3. Target a specific web server and apply a state\n  log.info(\"Applying 'nginx' state to web-server-1...\")\n  local apply_result = client:target(\"web-server-1\", \"glob\"):cmd(\"state.apply\", \"nginx\")\n  if not apply_result.success then\n    return false, \"Failed to apply state: \" .. apply_result.stderr\n  end\n\n  log.info(\"State applied successfully.\")\n  return true, \"Salt operations complete.\"\nend\n</code></pre>"},{"location":"en/modules/terraform/","title":"Terraform Module","text":"<p>The <code>terraform</code> module provides a high-level interface for orchestrating <code>terraform</code> CLI commands, allowing you to manage your infrastructure lifecycle directly from within a Sloth-Runner pipeline.</p>"},{"location":"en/modules/terraform/#configuration","title":"Configuration","text":"<p>This module requires the <code>terraform</code> CLI to be installed and available in the system's PATH. All commands must be executed within a specific <code>workdir</code> where your <code>.tf</code> files are located.</p>"},{"location":"en/modules/terraform/#functions","title":"Functions","text":""},{"location":"en/modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>Initializes a Terraform working directory.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory containing the Terraform files.</li> </ul> </li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"en/modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>Creates a Terraform execution plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>out</code> (string): Optional. The filename to save the generated plan to.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>Applies a Terraform plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>plan</code> (string): Optional. The path to a plan file to apply.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, applies changes without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>Destroys Terraform-managed infrastructure.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, destroys resources without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"en/modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>Reads an output variable from a Terraform state file.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>name</code> (string): Optional. The name of a specific output to read. If omitted, all outputs are returned as a table.</li> </ul> </li> <li>Returns:<ul> <li>On success: The parsed JSON value of the output (can be a string, table, etc.).</li> <li>On failure: <code>nil, error_message</code>.</li> </ul> </li> </ul>"},{"location":"en/modules/terraform/#full-lifecycle-example","title":"Full Lifecycle Example","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- Task 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init failed\" end\n\n-- Task 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan failed\" end\n\n-- Task 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply failed\" end\n\n-- Task 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output failed: \" .. err end\nlog.info(\"Terraform created file: \" .. filename)\n\n-- Task 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy failed\" end\n</code></pre>"},{"location":"modules/aws/","title":"AWS Module","text":"<p>The <code>aws</code> module provides a comprehensive interface for interacting with Amazon Web Services using the AWS CLI. It is designed to work seamlessly with standard AWS credential chains and also has first-class support for <code>aws-vault</code> for enhanced security.</p>"},{"location":"modules/aws/#configuration","title":"Configuration","text":"<p>No specific configuration in <code>values.yaml</code> is required. The module relies on your environment being configured to interact with AWS. This can be achieved through: - IAM roles for EC2 instances or ECS/EKS tasks. - Standard environment variables (<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, etc.). - A configured <code>~/.aws/credentials</code> file. - Using <code>aws-vault</code> with a named profile.</p>"},{"location":"modules/aws/#generic-executor","title":"Generic Executor","text":""},{"location":"modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>This is the core function of the module. It executes any AWS CLI command and returns the result.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to the AWS CLI (e.g., <code>{\"s3\", \"ls\", \"--recursive\"}</code>).</li> <li><code>opts</code> (table): Optional. A table of options for the execution.<ul> <li><code>profile</code> (string): If provided, the command will be executed using <code>aws-vault exec &lt;profile&gt; -- aws ...</code>. If omitted, it will run <code>aws ...</code> directly.</li> </ul> </li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command. - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>-- Using default credentials\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- Using an aws-vault profile\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"my-prod-profile\"})\n</code></pre>"},{"location":"modules/aws/#s3-helpers","title":"S3 Helpers","text":""},{"location":"modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p>A high-level wrapper for the <code>aws s3 sync</code> command, useful for synchronizing directories with S3.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>source</code> (string): Required. The source directory or S3 path.</li> <li><code>destination</code> (string): Required. The destination directory or S3 path.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> <li><code>delete</code> (boolean): Optional. If <code>true</code>, adds the <code>--delete</code> flag to the sync command.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://my-app-bucket/static\",\n  profile = \"deployment-profile\",\n  delete = true\n})\nif not ok then\n  log.error(\"S3 sync failed: \" .. err)\nend\n</code></pre>"},{"location":"modules/aws/#secrets-manager-helpers","title":"Secrets Manager Helpers","text":""},{"location":"modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>Retrieves a secret's value from AWS Secrets Manager. This function simplifies the process by directly returning the <code>SecretString</code>.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>secret_id</code> (string): Required. The name or ARN of the secret to retrieve.</li> <li><code>profile</code> (string): Optional. The <code>aws-vault</code> profile to use.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>secret_string</code> (string) on success.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"production/database/password\",\n  profile = \"my-app-profile\"\n})\n\nif not db_password then\n  log.error(\"Failed to get secret: \" .. err)\n  return false, \"Config failed.\"\nend\n\n-- Now you can use the db_password variable\n</code></pre>"},{"location":"modules/azure/","title":"Azure Module","text":"<p>The <code>azure</code> module provides an interface for interacting with Microsoft Azure using the <code>az</code> command-line tool.</p>"},{"location":"modules/azure/#configuration","title":"Configuration","text":"<p>This module requires the <code>az</code> CLI to be installed and authenticated. Before running pipelines that use this module, you must log in to your Azure account:</p> <pre><code>az login\n</code></pre> <p>The module will use your logged-in credentials for all commands.</p>"},{"location":"modules/azure/#generic-executor","title":"Generic Executor","text":""},{"location":"modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>Executes any <code>az</code> command. This function automatically adds the <code>--output json</code> flag (if not already present) to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>az</code> (e.g., <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Logged in as: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"modules/azure/#resource-group-rg-helpers","title":"Resource Group (RG) Helpers","text":""},{"location":"modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>Deletes a resource group.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>name</code> (string): Required. The name of the resource group to delete.</li> <li><code>yes</code> (boolean): Optional. If <code>true</code>, adds the <code>--yes</code> flag to bypass the confirmation prompt.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"my-test-rg\",\n  yes = true\n})\nif not ok then\n  log.error(\"Failed to delete resource group: \" .. err)\nend\n</code></pre>"},{"location":"modules/azure/#virtual-machine-vm-helpers","title":"Virtual Machine (VM) Helpers","text":""},{"location":"modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>Lists virtual machines.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): Optional. A table containing the following fields:<ul> <li><code>resource_group</code> (string): The name of a resource group to scope the list to. If omitted, lists VMs in the entire subscription.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>vms</code> (table) on success, where the table is a parsed JSON array of your VM objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>-- List all VMs in the subscription\nlocal all_vms, err1 = azure.vm.list()\n\n-- List VMs in a specific resource group\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"my-production-rg\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"Found VM: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"modules/digitalocean/","title":"DigitalOcean Module","text":"<p>The <code>digitalocean</code> module provides an interface for interacting with your DigitalOcean resources using the <code>doctl</code> command-line tool.</p>"},{"location":"modules/digitalocean/#configuration","title":"Configuration","text":"<p>This module requires the <code>doctl</code> CLI to be installed and authenticated. The standard way to do this is to generate a personal access token in your DigitalOcean control panel and set it as the <code>DIGITALOCEAN_ACCESS_TOKEN</code> environment variable.</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"your_do_api_token_here\"\n</code></pre> <p>The module will automatically use this token for all commands.</p>"},{"location":"modules/digitalocean/#generic-executor","title":"Generic Executor","text":""},{"location":"modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>Executes any <code>doctl</code> command. This function automatically adds the <code>--output json</code> flag to ensure that the output is machine-parsable.</p> <p>Parameters:</p> <ul> <li><code>args</code> (table): Required. A table of strings representing the command and arguments to pass to <code>doctl</code> (e.g., <code>{\"compute\", \"droplet\", \"list\"}</code>).</li> </ul> <p>Returns:</p> <p>A table containing the following fields: - <code>stdout</code> (string): The standard output from the command (as a JSON string). - <code>stderr</code> (string): The standard error from the command. - <code>exit_code</code> (number): The exit code of the command. <code>0</code> typically indicates success.</p> <p>Example:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Account status: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"modules/digitalocean/#droplets-helpers","title":"Droplets Helpers","text":""},{"location":"modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>A high-level wrapper to list all Droplets in your account.</p> <p>Returns:</p> <ul> <li><code>droplets</code> (table) on success, where the table is a parsed JSON array of your Droplet objects.</li> <li><code>nil, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"Found Droplet: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>Deletes a specific Droplet by its ID.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>id</code> (string): Required. The ID of the Droplet to delete.</li> <li><code>force</code> (boolean): Optional. If <code>true</code>, adds the <code>--force</code> flag to bypass the confirmation prompt. Defaults to <code>false</code>.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"Failed to delete droplet: \" .. err)\nend\n</code></pre>"},{"location":"modules/docker/","title":"Docker Module","text":"<p>The <code>docker</code> module provides a convenient interface for interacting with the Docker daemon, allowing you to build, run, and push Docker images as part of your pipelines.</p>"},{"location":"modules/docker/#configuration","title":"Configuration","text":"<p>This module requires the <code>docker</code> CLI to be installed and the Docker daemon to be running and accessible.</p>"},{"location":"modules/docker/#functions","title":"Functions","text":""},{"location":"modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>Executes any raw <code>docker</code> command.</p> <ul> <li><code>args</code> (table): Required. A list of arguments to pass to the <code>docker</code> command (e.g., <code>{\"ps\", \"-a\"}</code>).</li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>Builds a Docker image using <code>docker build</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag for the image (e.g., <code>my-app:latest</code>).</li> <li><code>path</code> (string): Required. The build context path.</li> <li><code>dockerfile</code> (string): Optional. The path to the Dockerfile.</li> <li><code>build_args</code> (table): Optional. A table of build arguments (e.g., <code>{VERSION = \"1.0\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>Pushes a Docker image to a registry using <code>docker push</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): Required. The tag of the image to push.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>Runs a Docker container using <code>docker run</code>.</p> <ul> <li><code>params</code> (table):<ul> <li><code>image</code> (string): Required. The image to run.</li> <li><code>name</code> (string): Optional. The name for the container.</li> <li><code>detach</code> (boolean): Optional. If <code>true</code>, runs the container in the background (<code>-d</code>).</li> <li><code>ports</code> (table): Optional. A list of port mappings (e.g., <code>{\"8080:80\"}</code>).</li> <li><code>env</code> (table): Optional. A table of environment variables (e.g., <code>{MY_VAR = \"value\"}</code>).</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/docker/#example","title":"Example","text":"<pre><code>local image_tag = \"my-test-image:latest\"\n\n-- Task 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"Build failed\" end\n\n-- Task 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"my-test-container\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"Run failed\" end\n\n-- Task 3: Push (after successful testing)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"Push failed\" end\n</code></pre>"},{"location":"modules/gcp/","title":"GCP Module","text":"<p>The <code>gcp</code> module provides a simple interface for executing Google Cloud CLI (<code>gcloud</code>) commands from within a <code>sloth-runner</code> task.</p>"},{"location":"modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>Executes a <code>gcloud</code> command with the specified arguments.</p>"},{"location":"modules/gcp/#parameters","title":"Parameters","text":"<ul> <li><code>args</code> (table): A Lua table (array) of strings representing the arguments to pass to the <code>gcloud</code> command. For example, <code>{\"compute\", \"instances\", \"list\"}</code>.</li> </ul>"},{"location":"modules/gcp/#returns","title":"Returns","text":"<p>A table containing the result of the command execution with the following keys:</p> <ul> <li><code>stdout</code> (string): The standard output from the command.</li> <li><code>stderr</code> (string): The standard error output from the command.</li> <li><code>exit_code</code> (number): The exit code of the command. An exit code of <code>0</code> typically indicates success.</li> </ul>"},{"location":"modules/gcp/#example","title":"Example","text":"<p>This example defines a task that lists all Compute Engine instances in the <code>us-central1</code> region for a specific project.</p> <pre><code>-- examples/gcp_cli_example.lua\n\nTaskDefinitions = {\n  main = {\n    description = \"A task to list GCP compute instances.\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"Lists GCE instances in us-central1.\",\n        command = function()\n          log.info(\"Listing GCP instances...\")\n\n          -- require the gcp module to make it available\n          local gcp = require(\"gcp\")\n\n          -- Execute the gcloud command\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"my-gcp-project-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- Check the result\n          if result and result.exit_code == 0 then\n            log.info(\"Successfully listed instances.\")\n            print(\"--- INSTANCE LIST ---\")\n            print(result.stdout)\n            print(\"---------------------\")\n            return true, \"GCP command successful.\"\n          else\n            log.error(\"Failed to list GCP instances.\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"GCP command failed.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"modules/git/","title":"M\u00f3dulo Git","text":"<p>O m\u00f3dulo <code>git</code> do Sloth-Runner fornece uma API fluente e de alto n\u00edvel para interagir com reposit\u00f3rios Git diretamente de seus scripts Lua. Isso permite automatizar opera\u00e7\u00f5es comuns do Git, como clonagem, pull, adi\u00e7\u00e3o, commit, tag e push, facilitando fluxos de trabalho de CI/CD e automa\u00e7\u00e3o de versionamento.</p>"},{"location":"modules/git/#casos-de-uso-comuns","title":"Casos de Uso Comuns","text":"<ul> <li>Automa\u00e7\u00e3o de CI/CD: Clonar reposit\u00f3rios, atualizar c\u00f3digo, commitar altera\u00e7\u00f5es geradas por scripts e empurrar para o controle de vers\u00e3o.</li> <li>Gerenciamento de Configura\u00e7\u00e3o: Puxar as \u00faltimas configura\u00e7\u00f5es de um reposit\u00f3rio Git antes de aplicar mudan\u00e7as.</li> <li>Versionamento Autom\u00e1tico: Criar tags e commits para novas vers\u00f5es de software.</li> </ul>"},{"location":"modules/git/#referencia-da-api","title":"Refer\u00eancia da API","text":""},{"location":"modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>Clona um reposit\u00f3rio Git de uma URL para um caminho local. Se o caminho j\u00e1 contiver um reposit\u00f3rio Git, a fun\u00e7\u00e3o retornar\u00e1 <code>nil</code> e uma mensagem de erro.</p> <ul> <li><code>url</code> (string): A URL do reposit\u00f3rio Git a ser clonado.</li> <li><code>path</code> (string): O caminho local onde o reposit\u00f3rio ser\u00e1 clonado.</li> </ul> <p>Retorna: *   <code>GitRepo</code> (userdata): Uma inst\u00e2ncia do objeto <code>GitRepo</code> se o clone for bem-sucedido. *   <code>error</code> (string): Uma mensagem de erro se o clone falhar ou o caminho j\u00e1 for um reposit\u00f3rio.</p>"},{"location":"modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>Obriga uma refer\u00eancia a um reposit\u00f3rio Git local existente.</p> <ul> <li><code>path</code> (string): O caminho local para o diret\u00f3rio raiz do reposit\u00f3rio Git.</li> </ul> <p>Retorna: *   <code>GitRepo</code> (userdata): Uma inst\u00e2ncia do objeto <code>GitRepo</code> se o caminho for um reposit\u00f3rio Git v\u00e1lido. *   <code>error</code> (string): Uma mensagem de erro se o caminho n\u00e3o for um reposit\u00f3rio Git.</p>"},{"location":"modules/git/#metodos-do-objeto-gitrepo-encadeaveis","title":"M\u00e9todos do Objeto <code>GitRepo</code> (Encade\u00e1veis)","text":"<p>Todos os m\u00e9todos abaixo s\u00e3o chamados na inst\u00e2ncia do <code>GitRepo</code> (ex: <code>repo:checkout(...)</code>) e retornam a pr\u00f3pria inst\u00e2ncia do <code>GitRepo</code> para permitir o encadeamento de chamadas. Para obter o resultado da \u00faltima opera\u00e7\u00e3o, use o m\u00e9todo <code>:result()</code>.</p>"},{"location":"modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>Muda o branch ou commit atual do reposit\u00f3rio.</p> <ul> <li><code>ref</code> (string): O branch, tag ou hash do commit para o qual fazer o checkout.</li> </ul>"},{"location":"modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>Puxa as \u00faltimas altera\u00e7\u00f5es de um reposit\u00f3rio remoto.</p> <ul> <li><code>remote</code> (string): O nome do remoto (ex: \"origin\").</li> <li><code>branch</code> (string): O nome do branch a ser puxado.</li> </ul>"},{"location":"modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>Adiciona arquivos ao \u00edndice (staging area) do Git.</p> <ul> <li><code>pattern</code> (string): O padr\u00e3o de arquivo a ser adicionado (ex: \".\", \"path/to/file.txt\").</li> </ul>"},{"location":"modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>Cria um novo commit com as altera\u00e7\u00f5es no \u00edndice.</p> <ul> <li><code>message</code> (string): A mensagem do commit.</li> </ul>"},{"location":"modules/git/#repotagname-message","title":"<code>repo:tag(name, message)</code>","text":"<p>Cria uma nova tag no reposit\u00f3rio.</p> <ul> <li><code>name</code> (string): O nome da tag (ex: \"v1.0.0\").</li> <li><code>message</code> (string, opcional): Uma mensagem opcional para a tag.</li> </ul>"},{"location":"modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, options)</code>","text":"<p>Empurra commits e tags para um reposit\u00f3rio remoto.</p> <ul> <li><code>remote</code> (string): O nome do remoto (ex: \"origin\").</li> <li><code>branch</code> (string): O nome do branch a ser empurrado.</li> <li><code>options</code> (tabela Lua, opcional): Uma tabela de op\u00e7\u00f5es para flags adicionais:<ul> <li><code>follow_tags</code> (booleano): Se <code>true</code>, adiciona a flag <code>--follow-tags</code> ao comando <code>git push</code>.</li> </ul> </li> </ul>"},{"location":"modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>Retorna o resultado da \u00faltima opera\u00e7\u00e3o Git executada na inst\u00e2ncia do <code>GitRepo</code>.</p> <p>Retorna: *   <code>result</code> (tabela Lua): Uma tabela contendo:     *   <code>success</code> (booleano): <code>true</code> se a opera\u00e7\u00e3o foi bem-sucedida, <code>false</code> caso contr\u00e1rio.     *   <code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando Git.     *   <code>stderr</code> (string): A sa\u00edda de erro padr\u00e3o do comando Git.     *   <code>error</code> (string ou <code>nil</code>): Uma mensagem de erro Go se a execu\u00e7\u00e3o do comando falhou.</p>"},{"location":"modules/git/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"modules/git/#exemplo-basico-de-automacao-git","title":"Exemplo B\u00e1sico de Automa\u00e7\u00e3o Git","text":"<p>Este exemplo demonstra como clonar um reposit\u00f3rio, fazer um pull, simular uma altera\u00e7\u00e3o, commitar e empurrar as mudan\u00e7as.</p> <pre><code>-- examples/git_example.lua\n\ncommand = function(params)\n    log.info(\"Iniciando exemplo de automa\u00e7\u00e3o Git...\")\n\n    local repo_url = \"https://github.com/chalkan3/sloth-runner.git\" -- Usando o pr\u00f3prio sloth-runner para exemplo\n    local repo_path = \"./sloth-runner-checkout\"\n    local new_version = params.version or \"v1.0.0-test\" -- Vers\u00e3o de exemplo\n    local repo\n\n    -- Clona o reposit\u00f3rio se ele ainda n\u00e3o existir no disco\n    if not fs.exists(repo_path) then\n        log.info(\"Cloning repository: \" .. repo_url .. \" into \" .. repo_path)\n        local cloned_repo, clone_err = git.clone(repo_url, repo_path)\n        if clone_err then\n            log.error(\"Failed to clone repository: \" .. clone_err)\n            return false, \"Git clone failed.\"\n        end\n        repo = cloned_repo\n    else\n        log.info(\"Repository already exists, opening local reference: \" .. repo_path)\n        local opened_repo, open_err = git.repo(repo_path) -- Apenas obt\u00e9m o objeto para o repo local\n        if open_err then\n            log.error(\"Failed to open repository: \" .. open_err)\n            return false, \"Git repo open failed.\"\n        end\n        repo = opened_repo\n    end\n\n    if not repo then\n        return false, \"Failed to clone or open repository.\"\n    end\n\n    log.info(\"Starting git operations on \" .. repo.RepoPath .. \"...\")\n\n    -- Executa uma sequ\u00eancia de comandos de forma fluente e encadeada\n    -- Nota: Cada opera\u00e7\u00e3o retorna o objeto 'repo' para encadeamento.\n    -- Para verificar o sucesso de cada passo, voc\u00ea deve chamar :result() ap\u00f3s cada um,\n    -- ou no final da cadeia para o \u00faltimo comando.\n\n    log.info(\"Checking out main branch and pulling latest changes...\")\n    repo:checkout(\"main\"):pull(\"origin\", \"main\")\n    local pull_result = repo:result() -- Obt\u00e9m o resultado do \u00faltimo comando (pull)\n    if not pull_result.success then\n        log.error(\"Failed to checkout or pull: \" .. pull_result.stderr)\n        return false, \"Git checkout/pull failed.\"\n    end\n    log.info(\"Checkout and pull successful. Stdout: \" .. pull_result.stdout)\n\n    -- Simula uma altera\u00e7\u00e3o no reposit\u00f3rio\n    local version_file_path = repo_path .. \"/VERSION_EXAMPLE\" -- Usar um nome diferente para n\u00e3o conflitar\n    fs.write(version_file_path, new_version)\n    log.info(\"Updated VERSION_EXAMPLE file to: \" .. new_version)\n\n    -- Adiciona, commita, tagueia e empurra as mudan\u00e7as de forma encadeada\n    local commit_message = \"ci: Example bump version to \" .. new_version\n    log.info(\"Adding, committing, tagging, and pushing changes...\")\n\n    -- Encadeamento: add -&gt; commit -&gt; tag -&gt; push\n    repo:add(version_file_path)\n        :commit(commit_message)\n        :tag(new_version, \"Release \" .. new_version)\n        :push(\"origin\", \"main\", { follow_tags = true })\n\n    local final_push_result = repo:result() -- Obt\u00e9m o resultado do \u00faltimo comando (push)\n\n    -- Verifica o resultado da \u00faltima opera\u00e7\u00e3o na cadeia\n    if not final_push_result.success then\n        log.error(\"Failed to push changes: \" .. final_push_result.stderr)\n        return false, \"Git push failed.\"\n    end\n\n    log.info(\"Successfully pushed version \" .. new_version .. \" to origin. Stdout: \" .. final_push_result.stdout)\n    log.info(\"Exemplo de automa\u00e7\u00e3o Git conclu\u00eddo com sucesso.\")\n    return true, \"Git automation example finished.\"\nend\n\nTaskDefinitions = {\n    git_automation_example = {\n        description = \"Demonstrates using the 'git' module for repository automation.\",\n        tasks = {\n            {\n                name = \"run_git_automation\",\n                command = command,\n                params = {\n                    version = \"v1.0.0-test\" -- Par\u00e2metro de exemplo\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>Voltar aos M\u00f3dulos | Voltar ao \u00cdndice</p>"},{"location":"modules/notifications/","title":"Notifications Module","text":"<p>The <code>notifications</code> module provides a simple way to send messages to various notification services from your pipelines. This is particularly useful for reporting the success or failure of a CI/CD workflow.</p> <p>Currently, the following services are supported: - Slack - ntfy</p>"},{"location":"modules/notifications/#configuration","title":"Configuration","text":"<p>Before using the module, you need to add the required credentials or URLs to your <code>configs/values.yaml</code> file. The module will read these values at runtime.</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # Your Slack Incoming Webhook URL\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # The ntfy server to use. Can be the public one or self-hosted.\n    server: \"https://ntfy.sh\"\n    # The topic to publish the notification to.\n    topic: \"your-sloth-runner-topic\"\n</code></pre>"},{"location":"modules/notifications/#slack","title":"Slack","text":""},{"location":"modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>Sends a message to a Slack channel via an Incoming Webhook.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>webhook_url</code> (string): Required. The Slack Incoming Webhook URL. It's recommended to get this from the <code>values</code> module.</li> <li><code>message</code> (string): Required. The main text of the message.</li> <li><code>pipeline</code> (string): Optional. The name of the pipeline, which will be displayed in the message attachment for context.</li> <li><code>error_details</code> (string): Optional. Any error details to include in the message attachment. This is useful for failure notifications.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- On success\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 Pipeline executed successfully!\",\n    pipeline = \"my-awesome-pipeline\"\n  })\n\n  -- On failure\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c Pipeline execution failed!\",\n    pipeline = \"my-awesome-pipeline\",\n    error_details = \"Could not connect to database.\"\n  })\nend\n</code></pre>"},{"location":"modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>Sends a message to an ntfy.sh topic.</p> <p>Parameters:</p> <ul> <li><code>params</code> (table): A table containing the following fields:<ul> <li><code>server</code> (string): Required. The ntfy server URL.</li> <li><code>topic</code> (string): Required. The topic to send the message to.</li> <li><code>message</code> (string): Required. The body of the notification.</li> <li><code>title</code> (string): Optional. The title of the notification.</li> <li><code>priority</code> (string): Optional. Notification priority (e.g., <code>high</code>, <code>default</code>, <code>low</code>).</li> <li><code>tags</code> (table): Optional. A list of tags (emojis) to add to the notification.</li> </ul> </li> </ul> <p>Returns:</p> <ul> <li><code>true</code> on success.</li> <li><code>false, error_message</code> on failure.</li> </ul> <p>Example:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- On success\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Success\",\n    message = \"The pipeline finished without errors.\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- On failure\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Failed!\",\n    message = \"The pipeline failed with an error.\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"modules/pulumi/","title":"M\u00f3dulo Pulumi","text":"<p>O m\u00f3dulo <code>pulumi</code> do Sloth-Runner permite que voc\u00ea orquestre suas stacks do Pulumi diretamente de seus scripts Lua. Isso \u00e9 ideal para fluxos de trabalho de Infraestrutura como C\u00f3digo (IaC) onde voc\u00ea precisa provisionar, atualizar ou destruir recursos de nuvem como parte de uma pipeline de automa\u00e7\u00e3o maior.</p>"},{"location":"modules/pulumi/#casos-de-uso-comuns","title":"Casos de Uso Comuns","text":"<ul> <li>Provisionamento Din\u00e2mico: Criar ambientes de staging ou teste sob demanda.</li> <li>Atualiza\u00e7\u00f5es de Infraestrutura: Automatizar o deploy de novas vers\u00f5es da sua infraestrutura.</li> <li>Gerenciamento de Ambientes: Destruir ambientes ap\u00f3s o uso para economizar custos.</li> <li>Integra\u00e7\u00e3o CI/CD: Executar <code>pulumi up</code> ou <code>preview</code> como parte de um pipeline de CI/CD.</li> </ul>"},{"location":"modules/pulumi/#referencia-da-api","title":"Refer\u00eancia da API","text":""},{"location":"modules/pulumi/#pulumistackname-options_table","title":"<code>pulumi.stack(name, options_table)</code>","text":"<p>Cria uma nova inst\u00e2ncia de uma stack Pulumi, permitindo que voc\u00ea interaja com ela.</p> <ul> <li><code>name</code> (string): O nome completo da stack Pulumi (ex: \"my-org/my-project/dev\").</li> <li><code>options_table</code> (tabela Lua): Uma tabela de op\u00e7\u00f5es para configurar a stack:<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio raiz do projeto Pulumi associado a esta stack.</li> </ul> </li> </ul> <p>Retorna: *   <code>PulumiStack</code> (userdata): Uma inst\u00e2ncia do objeto <code>PulumiStack</code> para a stack especificada.</p>"},{"location":"modules/pulumi/#metodos-do-objeto-pulumistack","title":"M\u00e9todos do Objeto <code>PulumiStack</code>","text":"<p>Todos os m\u00e9todos abaixo s\u00e3o chamados na inst\u00e2ncia do <code>PulumiStack</code> (ex: <code>my_stack:up(...)</code>).</p>"},{"location":"modules/pulumi/#stackupoptions","title":"<code>stack:up(options)</code>","text":"<p>Executa o comando <code>pulumi up</code> para criar ou atualizar os recursos da stack.</p> <ul> <li><code>options</code> (tabela Lua, opcional): Uma tabela de op\u00e7\u00f5es para o comando <code>up</code>:<ul> <li><code>non_interactive</code> (booleano): Se <code>true</code>, adiciona as flags <code>--non-interactive</code> e <code>--yes</code> ao comando <code>pulumi up</code>.</li> <li><code>config</code> (tabela Lua): Uma tabela de pares chave-valor para passar configura\u00e7\u00f5es para a stack (ex: <code>[\"my-app:vpcId\"] = vpc_id</code>).</li> <li><code>args</code> (tabela Lua de strings): Uma lista de argumentos adicionais a serem passados diretamente para o comando <code>pulumi up</code>.</li> </ul> </li> </ul> <p>Retorna: *   <code>result</code> (tabela Lua): Uma tabela contendo:     *   <code>success</code> (booleano): <code>true</code> se a opera\u00e7\u00e3o foi bem-sucedida, <code>false</code> caso contr\u00e1rio.     *   <code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando Pulumi.     *   <code>stderr</code> (string): A sa\u00edda de erro padr\u00e3o do comando Pulumi.     *   <code>error</code> (string ou <code>nil</code>): Uma mensagem de erro Go se a execu\u00e7\u00e3o do comando falhou.</p>"},{"location":"modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview(options)</code>","text":"<p>Executa o comando <code>pulumi preview</code> para mostrar uma pr\u00e9via das altera\u00e7\u00f5es que seriam aplicadas.</p> <ul> <li><code>options</code> (tabela Lua, opcional): As mesmas op\u00e7\u00f5es que para <code>stack:up()</code>.</li> </ul> <p>Retorna: *   <code>result</code> (tabela Lua): O mesmo formato de retorno que <code>stack:up()</code>.</p>"},{"location":"modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh(options)</code>","text":"<p>Executa o comando <code>pulumi refresh</code> para atualizar o estado da stack com os recursos reais na nuvem.</p> <ul> <li><code>options</code> (tabela Lua, opcional): As mesmas op\u00e7\u00f5es que para <code>stack:up()</code>.</li> </ul> <p>Retorna: *   <code>result</code> (tabela Lua): O mesmo formato de retorno que <code>stack:up()</code>.</p>"},{"location":"modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy(options)</code>","text":"<p>Executa o comando <code>pulumi destroy</code> para destruir todos os recursos da stack.</p> <ul> <li><code>options</code> (tabela Lua, opcional): As mesmas op\u00e7\u00f5es que para <code>stack:up()</code>.</li> </ul> <p>Retorna: *   <code>result</code> (tabela Lua): O mesmo formato de retorno que <code>stack:up()</code>.</p>"},{"location":"modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>Obt\u00e9m os outputs da stack Pulumi.</p> <p>Retorna: *   <code>outputs</code> (tabela Lua): Uma tabela Lua onde as chaves s\u00e3o os nomes dos outputs e os valores s\u00e3o os respectivos outputs da stack. *   <code>error</code> (string ou <code>nil</code>): Uma mensagem de erro se a opera\u00e7\u00e3o falhar.</p>"},{"location":"modules/pulumi/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"modules/pulumi/#exemplo-basico-de-orquestracao-pulumi","title":"Exemplo B\u00e1sico de Orquestra\u00e7\u00e3o Pulumi","text":"<p>Este exemplo demonstra como fazer o deploy de duas stacks Pulumi, passando um output da primeira como input para a segunda.</p> <pre><code>-- examples/pulumi_example.lua\n\ncommand = function()\n    log.info(\"Iniciando exemplo de orquestra\u00e7\u00e3o Pulumi...\")\n\n    -- Exemplo 1: Deploy de uma stack base (e.g., VPC)\n    log.info(\"Deploying the base infrastructure stack (VPC)...\")\n    local vpc_stack = pulumi.stack(\"my-org/vpc-network/prod\", {\n        workdir = \"./pulumi/vpc\" -- Assumindo que o diret\u00f3rio do projeto Pulumi est\u00e1 aqui\n    })\n\n    -- Executa 'pulumi up' de forma n\u00e3o-interativa\n    local vpc_result = vpc_stack:up({ non_interactive = true })\n\n    -- Verifica o resultado do deploy da VPC\n    if not vpc_result.success then\n        log.error(\"VPC stack deployment failed: \" .. vpc_result.stderr)\n        return false, \"VPC deployment failed.\"\n    end\n    log.info(\"VPC stack deployed successfully. Stdout: \" .. vpc_result.stdout)\n\n    -- Obt\u00e9m os outputs da stack da VPC\n    local vpc_outputs, outputs_err = vpc_stack:outputs()\n    if outputs_err then\n        log.error(\"Failed to get VPC stack outputs: \" .. outputs_err)\n        return false, \"Failed to get VPC outputs.\"\n    end\n\n    local vpc_id = vpc_outputs.vpcId -- Assumindo que a stack exporta 'vpcId'\n    if not vpc_id then\n        log.warn(\"VPC stack did not export 'vpcId'. Continuing without it.\")\n        vpc_id = \"unknown-vpc-id\"\n    end\n    log.info(\"Obtained VPC ID from outputs: \" .. vpc_id)\n\n    -- Exemplo 2: Deploy de uma stack de aplica\u00e7\u00e3o, usando outputs da stack anterior como config\n    log.info(\"Deploying the application stack into VPC: \" .. vpc_id)\n    local app_stack = pulumi.stack(\"my-org/app-server/prod\", {\n        workdir = \"./pulumi/app\" -- Assumindo que o diret\u00f3rio do projeto Pulumi da app est\u00e1 aqui\n    })\n\n    -- Executa 'pulumi up' passando outputs da stack anterior como configura\u00e7\u00e3o\n    local app_result = app_stack:up({\n        non_interactive = true,\n        config = {\n            [\"my-app:vpcId\"] = vpc_id,\n            [\"aws:region\"] = \"us-east-1\"\n        }\n    })\n\n    -- Verifica o resultado do deploy da aplica\u00e7\u00e3o\n    if not app_result.success then\n        log.error(\"Application stack deployment failed: \" .. app_result.stderr)\n        return false, \"Application deployment failed.\"\n    end\n    log.info(\"Application stack deployed successfully. Stdout: \" .. app_result.stdout)\n\n    log.info(\"Exemplo de orquestra\u00e7\u00e3o Pulumi conclu\u00eddo com sucesso.\")\n    return true, \"Pulumi orchestration example finished.\"\nend\n\nTaskDefinitions = {\n    pulumi_orchestration_example = {\n        description = \"Demonstrates using the 'pulumi' module to orchestrate infrastructure stacks.\",\n        tasks = {\n            {\n                name = \"run_pulumi_orchestration\",\n                command = command\n            }\n        }\n    }\n}\n</code></pre> <p>Voltar aos M\u00f3dulos | Voltar ao \u00cdndice</p>"},{"location":"modules/salt/","title":"M\u00f3dulo Salt","text":"<p>O m\u00f3dulo <code>salt</code> do Sloth-Runner fornece uma API fluente para interagir com o SaltStack diretamente de seus scripts Lua. Isso permite automatizar a orquestra\u00e7\u00e3o e configura\u00e7\u00e3o de servidores, integrando o poder do Salt em seus fluxos de trabalho do Sloth-Runner.</p>"},{"location":"modules/salt/#casos-de-uso-comuns","title":"Casos de Uso Comuns","text":"<ul> <li>Automa\u00e7\u00e3o de Configura\u00e7\u00e3o: Aplicar estados Salt (<code>state.apply</code>) em minions espec\u00edficos.</li> <li>Verifica\u00e7\u00e3o de Status: Realizar pings (<code>test.ping</code>) para verificar a conectividade com minions.</li> <li>Execu\u00e7\u00e3o Remota de Comandos: Executar comandos arbitr\u00e1rios (<code>cmd.run</code>) em um ou mais minions.</li> <li>Orquestra\u00e7\u00e3o de Deployments: Coordenar a implanta\u00e7\u00e3o de aplica\u00e7\u00f5es usando fun\u00e7\u00f5es Salt.</li> </ul>"},{"location":"modules/salt/#referencia-da-api","title":"Refer\u00eancia da API","text":""},{"location":"modules/salt/#salttargettarget_string","title":"<code>salt.target(target_string)</code>","text":"<p>Define o alvo (minion ou grupo de minions) para as opera\u00e7\u00f5es Salt subsequentes.</p> <ul> <li><code>target_string</code> (string): O ID do minion, glob, lista, ou outro tipo de alvo suportado pelo Salt.</li> </ul> <p>Retorna: *   <code>SaltTargeter</code> (userdata): Uma inst\u00e2ncia do objeto <code>SaltTargeter</code> para o alvo especificado.</p>"},{"location":"modules/salt/#metodos-do-objeto-salttargeter-encadeaveis","title":"M\u00e9todos do Objeto <code>SaltTargeter</code> (Encade\u00e1veis)","text":"<p>Todos os m\u00e9todos abaixo s\u00e3o chamados na inst\u00e2ncia do <code>SaltTargeter</code> (ex: <code>minion:ping()</code>) e retornam a pr\u00f3pria inst\u00e2ncia do <code>SaltTargeter</code> para permitir o encadeamento de chamadas. Para obter o resultado da \u00faltima opera\u00e7\u00e3o, use o m\u00e9todo <code>:result()</code>.</p>"},{"location":"modules/salt/#targetping","title":"<code>target:ping()</code>","text":"<p>Executa o comando <code>test.ping</code> no alvo definido.</p>"},{"location":"modules/salt/#targetcmdfunction-args","title":"<code>target:cmd(function, ...args)</code>","text":"<p>Executa uma fun\u00e7\u00e3o Salt arbitr\u00e1ria no alvo.</p> <ul> <li><code>function</code> (string): O nome da fun\u00e7\u00e3o Salt a ser executada (ex: \"state.apply\", \"cmd.run\", \"pkg.upgrade\").</li> <li><code>...args</code> (variadic): Argumentos adicionais a serem passados para a fun\u00e7\u00e3o Salt.</li> </ul>"},{"location":"modules/salt/#targetresult","title":"<code>target:result()</code>","text":"<p>Retorna o resultado da \u00faltima opera\u00e7\u00e3o Salt executada na inst\u00e2ncia do <code>SaltTargeter</code>.</p> <p>Retorna: *   <code>result</code> (tabela Lua): Uma tabela contendo:     *   <code>success</code> (booleano): <code>true</code> se a opera\u00e7\u00e3o foi bem-sucedida, <code>false</code> caso contr\u00e1rio.     *   <code>stdout</code> (string ou tabela Lua): A sa\u00edda padr\u00e3o do comando Salt. Se o Salt retornar JSON v\u00e1lido, ser\u00e1 uma tabela Lua.     *   <code>stderr</code> (string): A sa\u00edda de erro padr\u00e3o do comando Salt.     *   <code>error</code> (string ou <code>nil</code>): Uma mensagem de erro Go se a execu\u00e7\u00e3o do comando falhou.</p>"},{"location":"modules/salt/#exemplos-de-uso","title":"Exemplos de Uso","text":""},{"location":"modules/salt/#exemplo-basico-de-orquestracao-salt","title":"Exemplo B\u00e1sico de Orquestra\u00e7\u00e3o Salt","text":"<p>Este exemplo demonstra como usar a API fluente do Salt para realizar pings e executar comandos em minions.</p> <pre><code>-- examples/fluent_salt_api_test.lua\n\ncommand = function()\n    log.info(\"Iniciando teste da API fluente do Salt...\")\n\n    -- Teste 1: Executando comandos no minion 'keiteguica'\n    log.info(\"Testando alvo \u00fanico: keiteguica\")\n    -- Encadeia o comando ping() para o alvo 'keiteguica'\n    salt.target('keiteguica'):ping()\n\n    log.info(\"--------------------------------------------------\")\n\n    -- Teste 2: Executando comandos em m\u00faltiplos minions usando globbing\n    log.info(\"Testando alvo com glob: vm-gcp-squid-proxy*\")\n    -- Encadeia os comandos ping() e cmd() para alvos que correspondem ao padr\u00e3o\n    salt.target('vm-gcp-squid-proxy*'):ping():cmd('pkg.upgrade')\n\n    log.info(\"Teste da API fluente do Salt conclu\u00eddo.\")\n\n    log.info(\"Executando 'ls -la' via Salt e tratando a sa\u00edda...\")\n    local result_stdout, result_stderr, result_err = salt.target('keiteguica'):cmd('cmd.run', 'ls -la'):result()\n\n    if result_err ~= nil then\n        log.error(\"Erro ao executar 'ls -la' via Salt: \" .. result_err)\n        log.error(\"Stderr: \" .. result_stderr)\n    else\n        log.info(\"Sa\u00edda de 'ls -la' via Salt:\")\n        -- Se a sa\u00edda for uma tabela (JSON), voc\u00ea pode iterar sobre ela ou convert\u00ea-la para string\n        if type(result_stdout) == \"table\" then\n            log.info(\"Sa\u00edda JSON (tabela): \" .. data.to_json(result_stdout))\n        else\n            log.info(result_stdout)\n        end\n    end\n    log.info(\"Tratamento da sa\u00edda de 'ls -la' via Salt conclu\u00eddo.\")\n\n    return true, \"Comandos da API fluente do Salt e 'ls -la' executados com sucesso.\"\nend\n\nTaskDefinitions = {\n    test_fluent_salt = {\n        description = \"Demonstrates using the 'salt' module for SaltStack orchestration.\",\n        tasks = {\n            {\n                name = \"run_salt_orchestration\",\n                command = command\n            }\n        }\n    }\n}\n</code></pre> <p>Voltar aos M\u00f3dulos | Voltar ao \u00cdndice</p>"},{"location":"modules/terraform/","title":"Terraform Module","text":"<p>The <code>terraform</code> module provides a high-level interface for orchestrating <code>terraform</code> CLI commands, allowing you to manage your infrastructure lifecycle directly from within a Sloth-Runner pipeline.</p>"},{"location":"modules/terraform/#configuration","title":"Configuration","text":"<p>This module requires the <code>terraform</code> CLI to be installed and available in the system's PATH. All commands must be executed within a specific <code>workdir</code> where your <code>.tf</code> files are located.</p>"},{"location":"modules/terraform/#functions","title":"Functions","text":""},{"location":"modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>Initializes a Terraform working directory.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory containing the Terraform files.</li> </ul> </li> <li>Returns: A result table with <code>success</code>, <code>stdout</code>, <code>stderr</code>, and <code>exit_code</code>.</li> </ul>"},{"location":"modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>Creates a Terraform execution plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>out</code> (string): Optional. The filename to save the generated plan to.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>Applies a Terraform plan.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>plan</code> (string): Optional. The path to a plan file to apply.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, applies changes without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>Destroys Terraform-managed infrastructure.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>auto_approve</code> (boolean): Optional. If <code>true</code>, destroys resources without interactive approval.</li> </ul> </li> <li>Returns: A result table.</li> </ul>"},{"location":"modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>Reads an output variable from a Terraform state file.</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): Required. The path to the directory.</li> <li><code>name</code> (string): Optional. The name of a specific output to read. If omitted, all outputs are returned as a table.</li> </ul> </li> <li>Returns:<ul> <li>On success: The parsed JSON value of the output (can be a string, table, etc.).</li> <li>On failure: <code>nil, error_message</code>.</li> </ul> </li> </ul>"},{"location":"modules/terraform/#full-lifecycle-example","title":"Full Lifecycle Example","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- Task 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init failed\" end\n\n-- Task 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan failed\" end\n\n-- Task 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply failed\" end\n\n-- Task 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output failed: \" .. err end\nlog.info(\"Terraform created file: \" .. filename)\n\n-- Task 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy failed\" end\n</code></pre>"},{"location":"pt/","title":"Documenta\u00e7\u00e3o do Sloth-Runner","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o completa do Sloth-Runner, sua ferramenta flex\u00edvel para automa\u00e7\u00e3o de tarefas e orquestra\u00e7\u00e3o de fluxos de trabalho usando scripts Lua.</p> <p>Aqui voc\u00ea encontrar\u00e1 guias detalhados, refer\u00eancias de API e exemplos pr\u00e1ticos para aproveitar ao m\u00e1ximo o poder do Sloth-Runner.</p>"},{"location":"pt/#indice","title":"\u00cdndice","text":"<ul> <li>Agendador de Tarefas</li> <li>In\u00edcio R\u00e1pido</li> <li>Conceitos Essenciais</li> <li>Exemplos Pr\u00e1ticos</li> <li>Funcionalidades Avan\u00e7adas</li> <li>REPL Interativo</li> <li>M\u00f3dulos Built-in:<ul> <li>M\u00f3dulo AWS</li> <li>M\u00f3dulo Azure</li> <li>M\u00f3dulo DigitalOcean</li> <li>M\u00f3dulo Docker</li> <li>M\u00f3dulo Git</li> <li>M\u00f3dulo Pulumi</li> <li>M\u00f3dulo Salt</li> <li>M\u00f3dulo Terraform</li> </ul> </li> <li>Exemplos Avan\u00e7ados</li> </ul>"},{"location":"pt/CLI/","title":"Comandos da CLI","text":"<p>A interface de linha de comando (CLI) do <code>sloth-runner</code> \u00e9 a principal forma de interagir com seus pipelines de tarefas. Ela fornece comandos para executar, listar, validar e gerenciar seus fluxos de trabalho.</p>"},{"location":"pt/CLI/#sloth-runner-run","title":"<code>sloth-runner run</code>","text":"<p>Executa tarefas definidas em um arquivo de configura\u00e7\u00e3o Lua.</p> <p>Uso: <code>sloth-runner run [flags]</code></p> <p>Descri\u00e7\u00e3o: O comando <code>run</code> executa tarefas definidas em um arquivo de modelo Lua. Voc\u00ea pode especificar o arquivo, vari\u00e1veis de ambiente e direcionar tarefas ou grupos espec\u00edficos.</p> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: Caminho para o arquivo de configura\u00e7\u00e3o de tarefas Lua (padr\u00e3o: \"examples/basic_pipeline.lua\")</li> <li><code>-e, --env string</code>: Ambiente para as tarefas (ex: Development, Production) (padr\u00e3o: \"Development\")</li> <li><code>-p, --prod</code>: Definir como verdadeiro para ambiente de produ\u00e7\u00e3o (padr\u00e3o: false)</li> <li><code>--shards string</code>: Lista de n\u00fameros de shard separados por v\u00edrgula (ex: 1,2,3) (padr\u00e3o: \"1,2,3\")</li> <li><code>-t, --tasks string</code>: Lista de tarefas espec\u00edficas a serem executadas, separadas por v\u00edrgula (ex: tarefa1,tarefa2)</li> <li><code>-g, --group string</code>: Executa tarefas apenas de um grupo de tarefas espec\u00edfico</li> <li><code>-v, --values string</code>: Caminho para um arquivo YAML com valores a serem passados para as tarefas Lua</li> <li><code>-d, --dry-run</code>: Simula a execu\u00e7\u00e3o das tarefas sem realmente execut\u00e1-las (padr\u00e3o: false)</li> <li><code>--return</code>: Retorna a sa\u00edda das tarefas de destino como JSON (padr\u00e3o: false)</li> <li><code>-y, --yes</code>: Ignora a sele\u00e7\u00e3o interativa de tarefas e executa todas as tarefas (padr\u00e3o: false)</li> <li><code>--interactive</code>: Habilita o modo interativo para execu\u00e7\u00e3o de tarefas, solicitando a entrada do usu\u00e1rio antes de cada tarefa.</li> </ul>"},{"location":"pt/CLI/#sloth-runner-list","title":"<code>sloth-runner list</code>","text":"<p>Lista todos os grupos de tarefas e tarefas dispon\u00edveis.</p> <p>Uso: <code>sloth-runner list [flags]</code></p> <p>Descri\u00e7\u00e3o: O comando <code>list</code> exibe todos os grupos de tarefas e suas respectivas tarefas, juntamente com suas descri\u00e7\u00f5es e depend\u00eancias.</p> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: Caminho para o arquivo de configura\u00e7\u00e3o de tarefas Lua (padr\u00e3o: \"examples/basic_pipeline.lua\")</li> <li><code>-e, --env string</code>: Ambiente para as tarefas (ex: Development, Production) (padr\u00e3o: \"Development\")</li> <li><code>-p, --prod</code>: Definir como verdadeiro para ambiente de produ\u00e7\u00e3o (padr\u00e3o: false)</li> <li><code>--shards string</code>: Lista de n\u00fameros de shard separados por v\u00edrgula (ex: 1,2,3) (padr\u00e3o: \"1,2,3\")</li> <li><code>-v, --values string</code>: Caminho para um arquivo YAML com valores a serem passados para as tarefas Lua</li> </ul>"},{"location":"pt/CLI/#sloth-runner-validate","title":"<code>sloth-runner validate</code>","text":"<p>Valida a sintaxe e a estrutura de um arquivo de tarefas Lua.</p> <p>Uso: <code>sloth-runner validate [flags]</code></p> <p>Descri\u00e7\u00e3o: O comando <code>validate</code> verifica um arquivo de tarefas Lua quanto a erros de sintaxe e garante que a tabela <code>TaskDefinitions</code> esteja corretamente estruturada.</p> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: Caminho para o arquivo de configura\u00e7\u00e3o de tarefas Lua (padr\u00e3o: \"examples/basic_pipeline.lua\")</li> <li><code>-e, --env string</code>: Ambiente para as tarefas (ex: Development, Production) (padr\u00e3o: \"Development\")</li> <li><code>-p, --prod</code>: Definir como verdadeiro para ambiente de produ\u00e7\u00e3o (padr\u00e3o: false)</li> <li><code>--shards string</code>: Lista de n\u00fameros de shard separados por v\u00edrgula (ex: 1,2,3) (padr\u00e3o: \"1,2,3\")</li> <li><code>-v, --values string</code>: Caminho para um arquivo YAML com valores a serem passados para as tarefas Lua</li> </ul>"},{"location":"pt/CLI/#sloth-runner-test","title":"<code>sloth-runner test</code>","text":"<p>Executa um arquivo de teste Lua para um fluxo de trabalho de tarefas.</p> <p>Uso: <code>sloth-runner test -w &lt;workflow-file&gt; -f &lt;test-file&gt;</code></p> <p>Descri\u00e7\u00e3o: O comando <code>test</code> executa um arquivo de teste Lua especificado contra um fluxo de trabalho. Dentro do arquivo de teste, voc\u00ea pode usar os m\u00f3dulos 'test' e 'assert' para validar os comportamentos das tarefas.</p> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: Caminho para o arquivo de teste Lua (obrigat\u00f3rio)</li> <li><code>-w, --workflow string</code>: Caminho para o arquivo de fluxo de trabalho Lua a ser testado (obrigat\u00f3rio)</li> </ul>"},{"location":"pt/CLI/#sloth-runner-repl","title":"<code>sloth-runner repl</code>","text":"<p>Inicia uma sess\u00e3o REPL interativa.</p> <p>Uso: <code>sloth-runner repl [flags]</code></p> <p>Descri\u00e7\u00e3o: O comando <code>repl</code> inicia um Loop de Leitura-Avalia\u00e7\u00e3o-Impress\u00e3o interativo que permite executar c\u00f3digo Lua e interagir com todos os m\u00f3dulos sloth-runner integrados. Voc\u00ea pode opcionalmente carregar um arquivo de fluxo de trabalho para ter seu contexto dispon\u00edvel.</p> <p>Flags:</p> <ul> <li><code>-f, --file string</code>: Caminho para um arquivo de fluxo de trabalho Lua a ser carregado na sess\u00e3o REPL</li> </ul>"},{"location":"pt/CLI/#sloth-runner-version","title":"<code>sloth-runner version</code>","text":"<p>Imprime o n\u00famero da vers\u00e3o do sloth-runner.</p> <p>Uso: <code>sloth-runner version</code></p> <p>Descri\u00e7\u00e3o: Todo software tem vers\u00f5es. Esta \u00e9 a do sloth-runner.</p>"},{"location":"pt/CLI/#sloth-runner-scheduler","title":"<code>sloth-runner scheduler</code>","text":"<p>Gerencia o agendador de tarefas do <code>sloth-runner</code>, permitindo habilitar, desabilitar, listar e excluir tarefas agendadas.</p> <p>Para informa\u00e7\u00f5es detalhadas sobre os comandos e configura\u00e7\u00e3o do agendador, consulte a documenta\u00e7\u00e3o do Agendador de Tarefas.</p> <p>Subcomandos:</p> <ul> <li><code>sloth-runner scheduler enable</code>: Inicia o agendador como um processo em segundo plano.</li> <li><code>sloth-runner scheduler disable</code>: Para o processo do agendador em execu\u00e7\u00e3o.</li> <li><code>sloth-runner scheduler list</code>: Lista todas as tarefas agendadas configuradas.</li> <li><code>sloth-runner scheduler delete &lt;task_name&gt;</code>: Exclui uma tarefa agendada espec\u00edfica.</li> </ul>"},{"location":"pt/CLI/#sloth-runner-template-list","title":"<code>sloth-runner template list</code>","text":"<p>Lista todos os modelos dispon\u00edveis.</p> <p>Uso: <code>sloth-runner template list</code></p> <p>Descri\u00e7\u00e3o: Exibe uma tabela de todos os modelos dispon\u00edveis que podem ser usados com o comando 'new'.</p>"},{"location":"pt/CLI/#sloth-runner-artifacts","title":"<code>sloth-runner artifacts</code>","text":"<p>Gerencia os artefatos de tarefas, que s\u00e3o arquivos ou diret\u00f3rios produzidos pelas tarefas.</p> <p>Subcomandos:</p> <ul> <li><code>sloth-runner artifacts list</code>: Lista todos os artefatos coletados.</li> <li><code>sloth-runner artifacts get &lt;artifact_path&gt;</code>: Baixa um artefato espec\u00edfico.</li> <li><code>sloth-runner artifacts clean</code>: Limpa artefatos antigos ou indesejados.</li> </ul>"},{"location":"pt/CLI/#modelos","title":"\ud83d\udcc4 Modelos","text":"<p><code>sloth-runner</code> oferece v\u00e1rios modelos para criar rapidamente novos arquivos de defini\u00e7\u00e3o de tarefas.</p> Nome do Modelo Descri\u00e7\u00e3o <code>simple</code> Gera um \u00fanico grupo com uma tarefa 'hello world'. Ideal para come\u00e7ar. <code>python</code> Cria um pipeline para configurar um ambiente Python, instalar depend\u00eancias e executar um script. <code>parallel</code> Demonstra como executar v\u00e1rias tarefas simultaneamente. <code>python-pulumi</code> Pipeline para implantar infraestrutura Pulumi gerenciada com Python. <code>python-pulumi-salt</code> Provisiona infraestrutura com Pulumi e a configura usando SaltStack. <code>git-python-pulumi</code> Pipeline CI/CD: Clona um reposit\u00f3rio, configura o ambiente e implanta com Pulumi. <code>dummy</code> Gera uma tarefa fict\u00edcia que n\u00e3o faz nada."},{"location":"pt/CLI/#sloth-runner-new-group-name","title":"<code>sloth-runner new &lt;group-name&gt;</code>","text":"<p>Gera um novo arquivo de defini\u00e7\u00e3o de tarefas a partir de um modelo.</p> <p>Uso: <code>sloth-runner new &lt;group-name&gt; [flags]</code></p> <p>Descri\u00e7\u00e3o: O comando <code>new</code> cria um arquivo de defini\u00e7\u00e3o de tarefas Lua boilerplate. Voc\u00ea pode escolher entre diferentes modelos e especificar um arquivo de sa\u00edda. Execute <code>sloth-runner template list</code> para ver as op\u00e7\u00f5es.</p> <p>Argumentos:</p> <ul> <li><code>&lt;group-name&gt;</code>: O nome do grupo de tarefas a ser gerado.</li> </ul> <p>Flags:</p> <ul> <li><code>-o, --output string</code>: Caminho do arquivo de sa\u00edda (padr\u00e3o: stdout)</li> <li><code>-t, --template string</code>: Modelo a ser usado. Veja <code>template list</code> para op\u00e7\u00f5es. (padr\u00e3o: \"simple\")</li> <li><code>--set key=value</code>: Passa pares chave-valor para o modelo para gera\u00e7\u00e3o din\u00e2mica de conte\u00fado.</li> </ul>"},{"location":"pt/CLI/#sloth-runner-check-dependencies","title":"<code>sloth-runner check dependencies</code>","text":"<p>Verifica as ferramentas CLI externas necess\u00e1rias.</p> <p>Uso: <code>sloth-runner check dependencies</code></p> <p>Descri\u00e7\u00e3o: Verifica se todas as ferramentas de linha de comando externas usadas pelos v\u00e1rios m\u00f3dulos (por exemplo, docker, aws, doctl) est\u00e3o instaladas e dispon\u00edveis no PATH do sistema.</p>"},{"location":"pt/advanced-examples/","title":"Exemplos Avan\u00e7ados","text":"<p>Esta se\u00e7\u00e3o apresenta exemplos mais complexos e cen\u00e1rios de uso que combinam m\u00faltiplos m\u00f3dulos do Sloth-Runner para automa\u00e7\u00e3o de ponta a ponta.</p>"},{"location":"pt/advanced-examples/#exemplo-completo-pipeline-de-cicd-end-to-end","title":"Exemplo Completo: Pipeline de CI/CD End-to-End","text":"<p>Este tutorial demonstra como construir um pipeline de CI/CD completo usando os m\u00f3dulos <code>git</code>, <code>pulumi</code> e <code>salt</code> para versionar c\u00f3digo, provisionar infraestrutura e implantar uma aplica\u00e7\u00e3o.</p>"},{"location":"pt/advanced-examples/#cenario","title":"Cen\u00e1rio","text":"<p>Imagine que voc\u00ea tem um projeto de infraestrutura Pulumi e um projeto de aplica\u00e7\u00e3o. Voc\u00ea quer automatizar o seguinte fluxo:</p> <ol> <li>Clonar o reposit\u00f3rio da infraestrutura.</li> <li>Atualizar um arquivo de vers\u00e3o dentro do reposit\u00f3rio.</li> <li>Committar e empurrar essa altera\u00e7\u00e3o para o Git.</li> <li>Executar <code>pulumi up</code> para provisionar ou atualizar a infraestrutura (por exemplo, um ambiente de staging).</li> <li>Usar o Salt para configurar os servidores provisionados e implantar a aplica\u00e7\u00e3o.</li> </ol>"},{"location":"pt/advanced-examples/#script-lua-examplespulumi_git_combined_examplelua","title":"Script Lua (<code>examples/pulumi_git_combined_example.lua</code>)","text":"<pre><code>-- examples/pulumi_git_combined_example.lua\n\ncommand = function(params)\n    log.info(\"Iniciando exemplo combinado Pulumi e Git...\")\n\n    local pulumi_repo_url = \"https://github.com/my-org/my-pulumi-infra.git\" -- Exemplo de repo Pulumi\n    local pulumi_repo_path = \"./pulumi-infra-checkout\"\n    local new_infra_version = params.infra_version or \"v1.0.0-infra\"\n    local pulumi_project_workdir = pulumi_repo_path .. \"/my-vpc-project\" -- Subdiret\u00f3rio dentro do repo clonado\n    local repo\n\n    -- 1. Clonar ou abrir o reposit\u00f3rio Pulumi\n    log.info(\"Step 1: Cloning or opening Pulumi repository...\")\n    if not fs.exists(pulumi_repo_path) then\n        log.info(\"Cloning Pulumi repository: \" .. pulumi_repo_url)\n        local cloned_repo, clone_err = git.clone(pulumi_repo_url, pulumi_repo_path)\n        if clone_err then\n            log.error(\"Failed to clone Pulumi repository: \" .. clone_err)\n            return false, \"Git clone failed.\"\n        end\n        repo = cloned_repo\n    else\n        log.info(\"Pulumi repository already exists, opening local reference.\")\n        local opened_repo, open_err = git.repo(pulumi_repo_path)\n        if open_err then\n            log.error(\"Failed to open Pulumi repository: \" .. open_err)\n            return false, \"Git repo open failed.\"\n        end\n        repo = opened_repo\n    end\n\n    if not repo then\n        return false, \"Failed to get Pulumi repository reference.\"\n    end\n\n    -- 2. Atualizar o reposit\u00f3rio (pull)\n    log.info(\"Step 2: Pulling latest changes from Pulumi repository...\")\n    repo:checkout(\"main\"):pull(\"origin\", \"main\")\n    local pull_result = repo:result()\n    if not pull_result.success then\n        log.error(\"Failed to pull Pulumi repository: \" .. pull_result.stderr)\n        return false, \"Git pull failed.\"\n    end\n    log.info(\"Pulumi repository updated. Stdout: \" .. pull_result.stdout)\n\n    -- 3. Simular uma altera\u00e7\u00e3o no c\u00f3digo Pulumi (e.g., atualizar um arquivo de vers\u00e3o)\n    log.info(\"Step 3: Simulating a change in Pulumi code (updating version file)...\")\n    local infra_version_file = pulumi_repo_path .. \"/INFRA_VERSION\"\n    fs.write(infra_version_file, new_infra_version)\n    log.info(\"Updated INFRA_VERSION file to: \" .. new_infra_version)\n\n    -- 4. Commitar e empurrar as mudan\u00e7as\n    log.info(\"Step 4: Committing and pushing infrastructure version change...\")\n    local commit_message = \"ci: Bump infrastructure version to \" .. new_infra_version\n    repo:add(infra_version_file)\n        :commit(commit_message)\n        :push(\"origin\", \"main\") -- Sem follow_tags aqui, apenas o commit\n\n    local push_result = repo:result()\n    if not push_result.success then\n        log.error(\"Failed to push infrastructure changes: \" .. push_result.stderr)\n        return false, \"Git push failed for infra changes.\"\n    end\n    log.info(\"Infrastructure version change pushed. Stdout: \" .. push_result.stdout)\n\n    -- 5. Executar 'pulumi up' para o projeto\n    log.info(\"Step 5: Running pulumi up for the infrastructure project...\")\n    local infra_stack = pulumi.stack(\"my-org/my-infra/dev\", {\n        workdir = pulumi_project_workdir -- Usar o subdiret\u00f3rio do projeto Pulumi\n    })\n\n    local pulumi_up_result = infra_stack:up({ non_interactive = true })\n\n    if not pulumi_up_result.success then\n        log.error(\"Pulumi up failed: \" .. pulumi_up_result.stderr)\n        return false, \"Pulumi up failed.\"\n    end\n    log.info(\"Pulumi up completed successfully. Stdout: \" .. pulumi_up_result.stdout)\n\n    -- 6. Configurar e implantar a aplica\u00e7\u00e3o usando Salt (Exemplo)\n    log.info(\"Step 6: Configuring and deploying application using Salt...\")\n    -- Assumindo que o Pulumi up forneceu o IP ou hostname do servidor\n    -- Para este exemplo, vamos usar um IP fict\u00edcio\n    local server_ip = \"192.168.1.100\" -- Substitua pelo output real do Pulumi, se houver\n    local salt_target = salt.target(server_ip)\n\n    log.info(\"Running Salt test.ping on \" .. server_ip .. \"...\")\n    salt_target:ping()\n    local ping_result = salt_target:result()\n    if not ping_result.success then\n        log.error(\"Salt ping failed for \" .. server_ip .. \": \" .. ping_result.stderr)\n        return false, \"Salt ping failed.\"\n    end\n    log.info(\"Salt ping successful. Stdout: \" .. data.to_json(ping_result.stdout)) -- Assumindo que ping retorna JSON\n\n    log.info(\"Applying Salt state 'app.install' on \" .. server_ip .. \"...\")\n    salt_target:cmd('state.apply', 'app.install')\n    local salt_apply_result = salt_target:result()\n    if not salt_apply_result.success then\n        log.error(\"Salt state.apply failed for \" .. server_ip .. \": \" .. salt_apply_result.stderr)\n        return false, \"Salt state.apply failed.\"\n    end\n    log.info(\"Salt state.apply successful. Stdout: \" .. data.to_json(salt_apply_result.stdout))\n\n    log.info(\"Exemplo combinado Pulumi e Git conclu\u00eddo com sucesso.\")\n    return true, \"Combined Pulumi and Git example finished.\"\nend\n\nTaskDefinitions = {\n    pulumi_git_combined_example = {\n        description = \"Demonstrates combined usage of 'pulumi' and 'git' modules for CI/CD pipeline.\",\n        tasks = {\n            {\n                name = \"run_combined_example\",\n                command = command,\n                params = {\n                    infra_version = \"v1.0.0-test-combined\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"pt/advanced-features/","title":"Funcionalidades Avan\u00e7adas","text":"<p>Este documento aborda algumas das funcionalidades mais avan\u00e7adas do <code>sloth-runner</code>, projetadas para aprimorar seus fluxos de trabalho de desenvolvimento, depura\u00e7\u00e3o e configura\u00e7\u00e3o.</p>"},{"location":"pt/advanced-features/#executor-de-tarefas-interativo","title":"Executor de Tarefas Interativo","text":"<p>Para fluxos de trabalho complexos, pode ser \u00fatil percorrer as tarefas uma a uma, inspecionar suas sa\u00eddas e decidir se deve prosseguir, pular ou tentar novamente uma tarefa. O executor de tarefas interativo fornece uma maneira poderosa de depurar e desenvolver seus pipelines de tarefas.</p> <p>Para usar o executor interativo, adicione a flag <code>--interactive</code> ao comando <code>sloth-runner run</code>:</p> <pre><code>sloth-runner run -f examples/basic_pipeline.lua --yes --interactive\n</code></pre> <p>Quando habilitado, o executor pausar\u00e1 antes de executar cada tarefa e solicitar\u00e1 uma a\u00e7\u00e3o:</p> <pre><code>? Tarefa: fetch_data (Simula a busca de dados brutos)\n&gt; executar\n  pular\n  abortar\n  continuar\n</code></pre> <p>A\u00e7\u00f5es:</p> <ul> <li>executar: (Padr\u00e3o) Prossegue com a execu\u00e7\u00e3o da tarefa atual.</li> <li>pular: Pula a tarefa atual e passa para a pr\u00f3xima na ordem de execu\u00e7\u00e3o.</li> <li>abortar: Aborta imediatamente toda a execu\u00e7\u00e3o da tarefa.</li> <li>continuar: Executa a tarefa atual e todas as subsequentes sem mais prompts, desativando efetivamente o modo interativo para o resto da execu\u00e7\u00e3o.</li> </ul>"},{"location":"pt/advanced-features/#modelagem-aprimorada-de-valuesyaml","title":"Modelagem Aprimorada de <code>values.yaml</code>","text":"<p>Voc\u00ea pode tornar seus arquivos <code>values.yaml</code> mais din\u00e2micos usando a sintaxe de modelo Go para injetar vari\u00e1veis de ambiente. Isso \u00e9 particularmente \u00fatil para fornecer informa\u00e7\u00f5es sens\u00edveis (como tokens ou chaves) ou configura\u00e7\u00f5es espec\u00edficas do ambiente sem codific\u00e1-las.</p> <p>O <code>sloth-runner</code> processa o <code>values.yaml</code> como um modelo Go, disponibilizando quaisquer vari\u00e1veis de ambiente no mapa <code>.Env</code>.</p> <p>Exemplo:</p> <ol> <li> <p>Crie um arquivo <code>values.yaml</code> com um placeholder de modelo:</p> <p><pre><code># values.yaml\napi_key: \"{{ .Env.MY_API_KEY }}\"\nregion: \"{{ .Env.AWS_REGION | default \"us-east-1\" }}\"\n</code></pre> Nota: Voc\u00ea pode usar <code>default</code> para fornecer um valor de fallback se a vari\u00e1vel de ambiente n\u00e3o estiver definida.</p> </li> <li> <p>Crie uma tarefa Lua que use esses valores:</p> <pre><code>-- my_task.lua\nTaskDefinitions = {\n  my_group = {\n    tasks = {\n      {\n        name = \"deploy\",\n        command = function()\n          log.info(\"Implantando na regi\u00e3o: \" .. values.region)\n          log.info(\"Usando a chave de API (primeiros 5 caracteres): \" .. string.sub(values.api_key, 1, 5) .. \"...\")\n          return true, \"Implanta\u00e7\u00e3o bem-sucedida.\"\n        end\n      }\n    }\n  }\n}\n</code></pre> </li> <li> <p>Execute a tarefa com as vari\u00e1veis de ambiente definidas:</p> <pre><code>export MY_API_KEY=\"supersecretkey12345\"\nexport AWS_REGION=\"us-west-2\"\n\nsloth-runner run -f my_task.lua -v values.yaml --yes\n</code></pre> </li> </ol> <p>Sa\u00edda:</p> <p>A sa\u00edda mostrar\u00e1 que os valores das vari\u00e1veis de ambiente foram substitu\u00eddos corretamente:</p> <pre><code>INFO Implantando na regi\u00e3o: us-west-2\nINFO Usando a chave de API (primeiros 5 caracteres): super...\n</code></pre>"},{"location":"pt/core-concepts/","title":"Conceitos Essenciais","text":"<p>Este documento explica os conceitos fundamentais do <code>sloth-runner</code>, ajudando voc\u00ea a entender como definir e orquestrar fluxos de trabalho complexos.</p>"},{"location":"pt/core-concepts/#a-tabela-taskdefinitions","title":"A Tabela <code>TaskDefinitions</code>","text":"<p>O ponto de entrada para qualquer fluxo de trabalho do <code>sloth-runner</code> \u00e9 um arquivo Lua que retorna uma tabela global chamada <code>TaskDefinitions</code>. Esta tabela \u00e9 um dicion\u00e1rio onde cada chave \u00e9 o nome de um Grupo de Tarefas.</p> <pre><code>-- meu_pipeline.lua\nTaskDefinitions = {\n  -- Grupos de Tarefas s\u00e3o definidos aqui\n}\n</code></pre>"},{"location":"pt/core-concepts/#grupos-de-tarefas","title":"Grupos de Tarefas","text":"<p>Um Grupo de Tarefas \u00e9 uma cole\u00e7\u00e3o de tarefas relacionadas. Ele tamb\u00e9m pode definir propriedades que afetam todas as tarefas dentro dele.</p> <p>Propriedades do Grupo:</p> <ul> <li><code>description</code> (string): Uma descri\u00e7\u00e3o do que o grupo faz.</li> <li><code>tasks</code> (tabela): Uma lista de tabelas de tarefas individuais.</li> <li><code>create_workdir_before_run</code> (booleano): Se <code>true</code>, um diret\u00f3rio de trabalho tempor\u00e1rio \u00e9 criado para o grupo antes que qualquer tarefa seja executada. Este diret\u00f3rio \u00e9 passado para cada tarefa.</li> <li><code>clean_workdir_after_run</code> (fun\u00e7\u00e3o): Uma fun\u00e7\u00e3o Lua que decide se o diret\u00f3rio de trabalho tempor\u00e1rio deve ser exclu\u00eddo ap\u00f3s a conclus\u00e3o do grupo. Ela recebe o resultado final do grupo (<code>{success = true/false, ...}</code>). Retornar <code>true</code> exclui o diret\u00f3rio.</li> </ul> <p>Exemplo: <pre><code>TaskDefinitions = {\n  meu_grupo = {\n    description = \"Um grupo que gerencia seu pr\u00f3prio diret\u00f3rio tempor\u00e1rio.\",\n    create_workdir_before_run = true,\n    clean_workdir_after_run = function(result)\n      if not result.success then\n        log.warn(\"O grupo falhou. O diret\u00f3rio de trabalho ser\u00e1 mantido para depura\u00e7\u00e3o.\")\n      end\n      return result.success -- Limpa apenas se tudo foi bem-sucedido\n    end,\n    tasks = {\n      -- Tarefas aqui\n    }\n  }\n}\n</code></pre></p>"},{"location":"pt/core-concepts/#tarefas-individuais","title":"Tarefas Individuais","text":"<p>Uma tarefa \u00e9 uma \u00fanica unidade de trabalho. \u00c9 definida como uma tabela com v\u00e1rias propriedades dispon\u00edveis para controlar seu comportamento.</p>"},{"location":"pt/core-concepts/#propriedades-basicas","title":"Propriedades B\u00e1sicas","text":"<ul> <li><code>name</code> (string): O nome \u00fanico da tarefa dentro de seu grupo.</li> <li><code>description</code> (string): Uma breve descri\u00e7\u00e3o do que a tarefa faz.</li> <li><code>command</code> (string ou fun\u00e7\u00e3o): A a\u00e7\u00e3o principal da tarefa.<ul> <li>Como string: \u00c9 executada como um comando de shell.</li> <li>Como fun\u00e7\u00e3o: A fun\u00e7\u00e3o Lua \u00e9 executada. Ela recebe dois argumentos: <code>params</code> (uma tabela com seus par\u00e2metros) e <code>deps</code> (uma tabela contendo os outputs de suas depend\u00eancias). A fun\u00e7\u00e3o deve retornar:<ol> <li><code>booleano</code>: <code>true</code> para sucesso, <code>false</code> para falha.</li> <li><code>string</code>: Uma mensagem descrevendo o resultado.</li> <li><code>tabela</code> (opcional): Uma tabela de outputs da qual outras tarefas podem depender.</li> </ol> </li> </ul> </li> </ul>"},{"location":"pt/core-concepts/#dependencia-e-fluxo-de-execucao","title":"Depend\u00eancia e Fluxo de Execu\u00e7\u00e3o","text":"<ul> <li><code>depends_on</code> (string ou tabela): Uma lista de nomes de tarefas que devem ser conclu\u00eddas com sucesso antes que esta tarefa possa ser executada.</li> <li><code>next_if_fail</code> (string ou tabela): Uma lista de nomes de tarefas a serem executadas apenas se esta tarefa falhar. \u00datil para tarefas de limpeza ou notifica\u00e7\u00e3o.</li> <li><code>async</code> (booleano): Se <code>true</code>, a tarefa \u00e9 executada em segundo plano, e o runner n\u00e3o espera que ela termine para iniciar a pr\u00f3xima tarefa na ordem de execu\u00e7\u00e3o.</li> </ul>"},{"location":"pt/core-concepts/#tratamento-de-erros-e-robustez","title":"Tratamento de Erros e Robustez","text":"<ul> <li><code>retries</code> (n\u00famero): O n\u00famero de vezes que uma tarefa ser\u00e1 tentada novamente se falhar. O padr\u00e3o \u00e9 <code>0</code>.</li> <li><code>timeout</code> (string): Uma dura\u00e7\u00e3o (ex: <code>\"10s\"</code>, <code>\"1m\"</code>) ap\u00f3s a qual a tarefa ser\u00e1 encerrada se ainda estiver em execu\u00e7\u00e3o.</li> </ul>"},{"location":"pt/core-concepts/#execucao-condicional","title":"Execu\u00e7\u00e3o Condicional","text":"<ul> <li><code>run_if</code> (string ou fun\u00e7\u00e3o): A tarefa ser\u00e1 pulada a menos que esta condi\u00e7\u00e3o seja atendida.<ul> <li>Como string: Um comando de shell. Um c\u00f3digo de sa\u00edda <code>0</code> significa que a condi\u00e7\u00e3o foi atendida.</li> <li>Como fun\u00e7\u00e3o: Uma fun\u00e7\u00e3o Lua que retorna <code>true</code> se a tarefa deve ser executada.</li> </ul> </li> <li><code>abort_if</code> (string ou fun\u00e7\u00e3o): Todo o fluxo de trabalho ser\u00e1 abortado se esta condi\u00e7\u00e3o for atendida.<ul> <li>Como string: Um comando de shell. Um c\u00f3digo de sa\u00edda <code>0</code> significa abortar.</li> <li>Como fun\u00e7\u00e3o: Uma fun\u00e7\u00e3o Lua que retorna <code>true</code> para abortar.</li> </ul> </li> </ul>"},{"location":"pt/core-concepts/#hooks-de-ciclo-de-vida","title":"Hooks de Ciclo de Vida","text":"<ul> <li><code>pre_exec</code> (fun\u00e7\u00e3o): Uma fun\u00e7\u00e3o Lua que \u00e9 executada antes do <code>command</code> principal.</li> <li><code>post_exec</code> (fun\u00e7\u00e3o): Uma fun\u00e7\u00e3o Lua que \u00e9 executada ap\u00f3s o <code>command</code> principal ter sido conclu\u00eddo com sucesso.</li> </ul>"},{"location":"pt/core-concepts/#reutilizacao","title":"Reutiliza\u00e7\u00e3o","text":"<ul> <li><code>uses</code> (tabela): Especifica uma tarefa pr\u00e9-definida de outro arquivo (carregado via <code>import</code>) para usar como base. A defini\u00e7\u00e3o da tarefa atual pode ent\u00e3o sobrescrever propriedades como <code>params</code> ou <code>description</code>.</li> <li><code>params</code> (tabela): Um dicion\u00e1rio de pares chave-valor que podem ser passados para a fun\u00e7\u00e3o <code>command</code> da tarefa.</li> <li><code>artifacts</code> (string ou tabela): Um padr\u00e3o de arquivo (glob) ou uma lista de padr\u00f5es que especificam quais arquivos do <code>workdir</code> da tarefa devem ser salvos como artefatos ap\u00f3s uma execu\u00e7\u00e3o bem-sucedida.</li> <li><code>consumes</code> (string ou tabela): O nome de um artefato (ou uma lista de nomes) de uma tarefa anterior que deve ser copiado para o <code>workdir</code> desta tarefa antes que ela seja executada.</li> </ul>"},{"location":"pt/core-concepts/#gerenciamento-de-artefatos","title":"Gerenciamento de Artefatos","text":"<p>O Sloth-Runner permite que as tarefas compartilhem arquivos entre si atrav\u00e9s de um mecanismo de artefatos. Uma tarefa pode \"produzir\" um ou mais arquivos como artefatos, e tarefas subsequentes podem \"consumir\" esses artefatos.</p> <p>Isso \u00e9 \u00fatil para pipelines de CI/CD, onde uma etapa de compila\u00e7\u00e3o pode gerar um bin\u00e1rio (o artefato), que \u00e9 ent\u00e3o usado por uma etapa de teste ou de implanta\u00e7\u00e3o.</p>"},{"location":"pt/core-concepts/#como-funciona","title":"Como Funciona","text":"<ol> <li> <p>Produzindo Artefatos: Adicione a chave <code>artifacts</code> \u00e0 sua defini\u00e7\u00e3o de tarefa. O valor pode ser um \u00fanico padr\u00e3o de arquivo (ex: <code>\"report.txt\"</code>) ou uma lista (ex: <code>{\"*.log\", \"app.bin\"}</code>). Ap\u00f3s a tarefa ser executada com sucesso, o runner procurar\u00e1 por arquivos no <code>workdir</code> da tarefa que correspondam a esses padr\u00f5es e os copiar\u00e1 para um armazenamento de artefatos compartilhado para a pipeline.</p> </li> <li> <p>Consumindo Artefatos: Adicione a chave <code>consumes</code> \u00e0 defini\u00e7\u00e3o de outra tarefa (que normalmente <code>depends_on</code> da tarefa produtora). O valor deve ser o nome do arquivo do artefato que voc\u00ea deseja usar (ex: <code>\"report.txt\"</code>). Antes que esta tarefa seja executada, o runner copiar\u00e1 o artefato nomeado do armazenamento compartilhado para o <code>workdir</code> desta tarefa, tornando-o dispon\u00edvel para o <code>command</code>.</p> </li> </ol>"},{"location":"pt/core-concepts/#exemplo-de-artefatos","title":"Exemplo de Artefatos","text":"<pre><code>TaskDefinitions = {\n  [\"ci-pipeline\"] = {\n    description = \"Demonstra o uso de artefatos.\",\n    create_workdir_before_run = true,\n    tasks = {\n      {\n        name = \"build\",\n        description = \"Cria um bin\u00e1rio e o declara como um artefato.\",\n        command = \"echo 'conteudo_binario' &gt; app.bin\",\n        artifacts = {\"app.bin\"}\n      },\n      {\n        name = \"test\",\n        description = \"Consome o bin\u00e1rio para executar testes.\",\n        depends_on = \"build\",\n        consumes = {\"app.bin\"},\n        command = function(params)\n          -- Neste ponto, 'app.bin' existe no workdir desta tarefa\n          local content, err = fs.read(params.workdir .. \"/app.bin\")\n          if content == \"conteudo_binario\" then\n            log.info(\"Artefato consumido com sucesso!\")\n            return true\n          else\n            return false, \"Conte\u00fado do artefato incorreto!\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/core-concepts/#funcoes-globais","title":"Fun\u00e7\u00f5es Globais","text":"<p>O <code>sloth-runner</code> fornece fun\u00e7\u00f5es globais no ambiente Lua para ajudar a orquestrar os fluxos de trabalho.</p>"},{"location":"pt/core-concepts/#importpath","title":"<code>import(path)</code>","text":"<p>Carrega outro arquivo Lua e retorna o valor que ele retorna. Este \u00e9 o principal mecanismo para criar m\u00f3dulos de tarefas reutiliz\u00e1veis. O caminho \u00e9 relativo ao arquivo que chama <code>import</code>.</p> <p>Exemplo (<code>reusable_tasks.lua</code>): <pre><code>-- Importa um m\u00f3dulo que retorna uma tabela de defini\u00e7\u00f5es de tarefas\nlocal docker_tasks = import(\"shared/docker.lua\")\n\nTaskDefinitions = {\n  main = {\n    tasks = {\n      {\n        -- Usa a tarefa 'build' do m\u00f3dulo importado\n        uses = docker_tasks.build,\n        params = { image_name = \"my-app\" }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"pt/core-concepts/#paralleltasks","title":"<code>parallel(tasks)</code>","text":"<p>Executa uma lista de tarefas concorrentemente e espera que todas terminem.</p> <ul> <li><code>tasks</code> (tabela): Uma lista de tabelas de tarefas para executar em paralelo.</li> </ul> <p>Exemplo: <pre><code>command = function()\n  log.info(\"Iniciando 3 tarefas em paralelo...\")\n  local results, err = parallel({\n    { name = \"short_task\", command = \"sleep 1\" },\n    { name = \"medium_task\", command = \"sleep 2\" },\n    { name = \"long_task\", command = \"sleep 3\" }\n  })\n  if err then\n    return false, \"Execu\u00e7\u00e3o paralela falhou\"\n  end\n  return true, \"Todas as tarefas paralelas terminaram.\"\nend\n</code></pre></p>"},{"location":"pt/core-concepts/#exporttable","title":"<code>export(table)</code>","text":"<p>Exporta dados de qualquer ponto de um script para a CLI. Quando a flag <code>--return</code> \u00e9 usada, todas as tabelas exportadas s\u00e3o mescladas com o output da tarefa final em um \u00fanico objeto JSON.</p> <ul> <li><code>table</code>: Uma tabela Lua a ser exportada.</li> </ul> <p>Exemplo: <pre><code>command = function()\n  export({ valor_importante = \"dado do meio da tarefa\" })\n  return true, \"Tarefa conclu\u00edda\", { output_final = \"algum resultado\" }\nend\n</code></pre> Executar com <code>--return</code> produziria: <pre><code>{\n  \"valor_importante\": \"dado do meio da tarefa\",\n  \"output_final\": \"algum resultado\"\n}\n</code></pre></p>"},{"location":"pt/distributed/","title":"Execu\u00e7\u00e3o de Tarefas Distribu\u00eddas","text":"<p><code>sloth-runner</code> suporta a execu\u00e7\u00e3o de tarefas distribu\u00eddas, permitindo que voc\u00ea execute tarefas em agentes remotos. Isso possibilita fluxos de trabalho escal\u00e1veis e distribu\u00eddos, onde diferentes partes do seu pipeline podem ser executadas em m\u00e1quinas distintas.</p>"},{"location":"pt/distributed/#como-funciona","title":"Como Funciona","text":"<p>O modelo de execu\u00e7\u00e3o distribu\u00edda no <code>sloth-runner</code> segue uma arquitetura mestre-agente:</p> <ol> <li>Mestre: A inst\u00e2ncia principal do <code>sloth-runner</code> atua como o mestre. Ela analisa a defini\u00e7\u00e3o do fluxo de trabalho, identifica as tarefas configuradas para serem executadas em agentes remotos e as despacha.</li> <li>Agente: Uma inst\u00e2ncia do <code>sloth-runner</code> executando no modo <code>agent</code> em uma m\u00e1quina remota. Ela escuta as solicita\u00e7\u00f5es de execu\u00e7\u00e3o de tarefas recebidas do mestre, executa as tarefas e envia os resultados de volta.</li> </ol>"},{"location":"pt/distributed/#configurando-tarefas-remotas","title":"Configurando Tarefas Remotas","text":"<p>Para executar uma tarefa em um agente remoto, voc\u00ea precisa especificar o campo <code>delegate_to</code> no grupo de tarefas ou na defini\u00e7\u00e3o da tarefa individual.</p>"},{"location":"pt/distributed/#1-delegar-a-um-agente-no-nivel-do-grupo-de-tarefas","title":"1. Delegar a um Agente no N\u00edvel do Grupo de Tarefas","text":"<p>Voc\u00ea pode definir o agente diretamente dentro do seu grupo <code>TaskDefinitions</code> usando o campo <code>delegate_to</code>. Todas as tarefas dentro deste grupo ser\u00e3o ent\u00e3o delegadas a este agente, a menos que sejam substitu\u00eddas por um <code>delegate_to</code> espec\u00edfico da tarefa.</p> <pre><code>TaskDefinitions = {\n  my_distributed_group = {\n    description = \"Um grupo de tarefas com tarefas distribu\u00eddas.\",\n    delegate_to = { address = \"localhost:50051\" }, -- Define o agente para todo o grupo\n    tasks = {\n      {\n        name = \"remote_hello\",\n        description = \"Executa uma tarefa hello world em um agente remoto.\",\n        -- N\u00e3o \u00e9 necess\u00e1rio o campo 'delegate_to' aqui, ele herda do grupo\n        command = function(params)\n          log.info(\"Ol\u00e1 do agente remoto!\")\n          return true, \"Tarefa remota executada.\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/distributed/#2-delegar-a-um-agente-no-nivel-da-tarefa","title":"2. Delegar a um Agente no N\u00edvel da Tarefa","text":"<p>Alternativamente, voc\u00ea pode especificar o campo <code>delegate_to</code> diretamente em uma tarefa individual. Isso substituir\u00e1 qualquer delega\u00e7\u00e3o em n\u00edvel de grupo ou permitir\u00e1 a execu\u00e7\u00e3o remota ad-hoc.</p> <pre><code>TaskDefinitions = {\n  my_group = {\n    description = \"Um grupo de tarefas com uma tarefa remota espec\u00edfica.\",\n    tasks = {\n      {\n        name = \"specific_remote_task\",\n        description = \"Executa esta tarefa em um agente remoto espec\u00edfico.\",\n        delegate_to = { address = \"192.168.1.100:50051\" }, -- Define o agente apenas para esta tarefa\n        command = function(params)\n          log.info(\"Ol\u00e1 de um agente remoto espec\u00edfico!\")\n          return true, \"Tarefa remota espec\u00edfica executada.\"\n        end\n      },\n      {\n        name = \"local_task\",\n        description = \"Esta tarefa \u00e9 executada localmente.\",\n        command = \"echo 'Ol\u00e1 da m\u00e1quina local!'\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/distributed/#executando-um-agente","title":"Executando um Agente","text":"<p>Para iniciar uma inst\u00e2ncia do <code>sloth-runner</code> no modo agente, use o comando <code>agent</code>:</p> <pre><code>sloth-runner agent -p 50051\n</code></pre> <ul> <li><code>-p, --port</code>: Especifica a porta em que o agente deve escutar. O padr\u00e3o \u00e9 <code>50051</code>.</li> </ul> <p>Quando um agente \u00e9 iniciado, ele escutar\u00e1 as solicita\u00e7\u00f5es gRPC recebidas da inst\u00e2ncia mestre do <code>sloth-runner</code>. Ao receber uma tarefa, ele a executar\u00e1 em seu ambiente local e retornar\u00e1 o resultado, juntamente com quaisquer arquivos de espa\u00e7o de trabalho atualizados, de volta ao mestre.</p>"},{"location":"pt/distributed/#sincronizacao-do-espaco-de-trabalho","title":"Sincroniza\u00e7\u00e3o do Espa\u00e7o de Trabalho","text":"<p>Quando uma tarefa \u00e9 despachada para um agente remoto, o <code>sloth-runner</code> lida automaticamente com a sincroniza\u00e7\u00e3o do espa\u00e7o de trabalho da tarefa:</p> <ol> <li>Mestre para Agente: O mestre cria um tarball do diret\u00f3rio de trabalho atual da tarefa e o envia para o agente.</li> <li>Execu\u00e7\u00e3o do Agente: O agente extrai o tarball para um diret\u00f3rio tempor\u00e1rio, executa a tarefa dentro desse diret\u00f3rio e quaisquer altera\u00e7\u00f5es feitas nos arquivos no diret\u00f3rio tempor\u00e1rio s\u00e3o capturadas.</li> <li>Agente para Mestre: Ap\u00f3s a conclus\u00e3o da tarefa, o agente cria um tarball do diret\u00f3rio tempor\u00e1rio modificado e o envia de volta ao mestre. O mestre ent\u00e3o extrai esse tarball, atualizando seu espa\u00e7o de trabalho local com quaisquer altera\u00e7\u00f5es feitas pela tarefa remota.</li> </ol>"},{"location":"pt/getting-started/","title":"In\u00edcio R\u00e1pido","text":"<p>Bem-vindo ao Sloth-Runner! Este guia o ajudar\u00e1 a come\u00e7ar a usar a ferramenta rapidamente.</p>"},{"location":"pt/getting-started/#instalacao","title":"Instala\u00e7\u00e3o","text":"<p>Para instalar o <code>sloth-runner</code> em seu sistema, voc\u00ea pode usar o script <code>install.sh</code> fornecido. Este script detecta automaticamente seu sistema operacional e arquitetura, baixa a vers\u00e3o mais recente do GitHub e coloca o execut\u00e1vel <code>sloth-runner</code> em <code>/usr/local/bin</code>.</p> <pre><code>bash &lt;(curl -sL https://raw.githubusercontent.com/chalkan3/sloth-runner/master/install.sh)\n</code></pre> <p>Nota: O script <code>install.sh</code> requer privil\u00e9gios de <code>sudo</code> para mover o execut\u00e1vel para <code>/usr/local/bin</code>.</p>"},{"location":"pt/getting-started/#uso-basico","title":"Uso B\u00e1sico","text":"<p>Para executar um arquivo de tarefa Lua:</p> <pre><code>sloth-runner run -f examples/basic_pipeline.lua\n</code></pre> <p>Para listar as tarefas em um arquivo:</p> <pre><code>sloth-runner list -f examples/basic_pipeline.lua\n</code></pre>"},{"location":"pt/getting-started/#agendador-de-tarefas-novo","title":"Agendador de Tarefas (Novo!)","text":"<p>O Sloth-Runner agora inclui um poderoso agendador de tarefas que permite automatizar a execu\u00e7\u00e3o de seus fluxos de trabalho em segundo plano usando sintaxe cron. Para mais detalhes sobre como configurar e usar o agendador, consulte a documenta\u00e7\u00e3o completa em Agendador de Tarefas.</p>"},{"location":"pt/getting-started/#proximos-passos","title":"Pr\u00f3ximos Passos","text":"<p>Agora que voc\u00ea tem o Sloth-Runner instalado e funcionando, explore os Conceitos Essenciais para entender como definir suas tarefas, ou mergulhe diretamente nos novos M\u00f3dulos Built-in para automa\u00e7\u00e3o avan\u00e7ada com Git, Pulumi e Salt.</p> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"pt/repl/","title":"REPL Interativo","text":"<p>O comando <code>sloth-runner repl</code> inicia uma sess\u00e3o interativa de Read-Eval-Print Loop (REPL). Esta \u00e9 uma ferramenta poderosa para depura\u00e7\u00e3o, explora\u00e7\u00e3o e experimenta\u00e7\u00e3o r\u00e1pida com os m\u00f3dulos do sloth-runner.</p>"},{"location":"pt/repl/#iniciando-o-repl","title":"Iniciando o REPL","text":"<p>Para iniciar uma sess\u00e3o, simplesmente execute: <pre><code>sloth-runner repl\n</code></pre></p> <p>Voc\u00ea tamb\u00e9m pode pr\u00e9-carregar um arquivo de workflow para ter suas <code>TaskDefinitions</code> e quaisquer fun\u00e7\u00f5es auxiliares dispon\u00edveis na sess\u00e3o. Isso \u00e9 incrivelmente \u00fatil para depurar uma pipeline existente.</p> <pre><code>sloth-runner repl -f /caminho/para/sua/pipeline.lua\n</code></pre>"},{"location":"pt/repl/#funcionalidades","title":"Funcionalidades","text":""},{"location":"pt/repl/#ambiente-ao-vivo","title":"Ambiente ao Vivo","text":"<p>O REPL fornece um ambiente Lua ao vivo onde voc\u00ea pode executar qualquer c\u00f3digo Lua. Todos os m\u00f3dulos embutidos do sloth-runner (<code>aws</code>, <code>docker</code>, <code>fs</code>, <code>log</code>, etc.) s\u00e3o pr\u00e9-carregados e prontos para uso.</p> <pre><code>sloth&gt; log.info(\"Ol\u00e1 do REPL!\")\nsloth&gt; resultado = fs.read(\"README.md\")\nsloth&gt; print(string.sub(resultado, 1, 50))\n</code></pre>"},{"location":"pt/repl/#autocompletar","title":"Autocompletar","text":"<p>O REPL possui um sistema sofisticado de autocompletar. - Comece a digitar o nome de uma vari\u00e1vel global ou m\u00f3dulo (ex: <code>aws</code>) e pressione <code>Tab</code> para ver as sugest\u00f5es. - Digite o nome de um m\u00f3dulo seguido por um ponto (ex: <code>docker.</code>) e pressione <code>Tab</code> para ver todas as fun\u00e7\u00f5es dispon\u00edveis naquele m\u00f3dulo.</p>"},{"location":"pt/repl/#historico","title":"Hist\u00f3rico","text":"<p>O REPL mant\u00e9m um hist\u00f3rico de seus comandos. Use as setas para cima e para baixo para navegar pelos comandos anteriores.</p>"},{"location":"pt/repl/#exemplo-de-sessao","title":"Exemplo de Sess\u00e3o","text":"<p>Aqui est\u00e1 um exemplo de uso do REPL para depurar um comando Docker.</p> <pre><code>$ sloth-runner repl\nSloth-Runner Interactive REPL\nDigite 'exit' ou 'quit' para sair.\nsloth&gt; resultado = docker.exec({\"ps\", \"-a\"})\nsloth&gt; print(resultado.stdout)\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nsloth&gt; -- Agora vamos tentar construir uma imagem\nsloth&gt; resultado_build = docker.build({tag=\"meu-teste\", path=\"./examples/docker\"})\nsloth&gt; print(resultado_build.success)\ntrue\nsloth&gt; exit\nTchau!\n</code></pre>"},{"location":"pt/scheduler/","title":"Agendador de Tarefas","text":"<p>O <code>sloth-runner</code> agora inclui um agendador de tarefas integrado, permitindo automatizar a execu\u00e7\u00e3o de suas tarefas definidas em Lua em intervalos espec\u00edficos usando a sintaxe cron.</p>"},{"location":"pt/scheduler/#funcionalidades","title":"Funcionalidades","text":"<ul> <li>Processo em Segundo Plano: O agendador \u00e9 executado como um processo persistente em segundo plano, independente da sua sess\u00e3o de terminal.</li> <li>Agendamento Baseado em Cron: Defina agendamentos de tarefas usando strings cron flex\u00edveis.</li> <li>Persist\u00eancia: As tarefas agendadas s\u00e3o carregadas de um arquivo de configura\u00e7\u00e3o, garantindo que sejam retomadas ap\u00f3s rein\u00edcios.</li> <li>Integra\u00e7\u00e3o com Tarefas Existentes: O agendador utiliza o comando <code>sloth-runner run</code> existente para executar suas tarefas.</li> </ul>"},{"location":"pt/scheduler/#configuracao-scheduleryaml","title":"Configura\u00e7\u00e3o: <code>scheduler.yaml</code>","text":"<p>As tarefas agendadas s\u00e3o definidas em um arquivo YAML, tipicamente chamado <code>scheduler.yaml</code>. Este arquivo especifica as tarefas a serem executadas, seu agendamento e o arquivo Lua, grupo e nome da tarefa.</p> <pre><code>scheduled_tasks:\n  - name: \"my_daily_backup\"\n    schedule: \"0 0 * * *\" # Todo dia \u00e0 meia-noite\n    task_file: \"examples/my_workflow.lua\"\n    task_group: \"backup_group\"\n    task_name: \"perform_backup\"\n  - name: \"hourly_report_generation\"\n    schedule: \"0 * * * *\" # Toda hora\n    task_file: \"examples/reporting.lua\"\n    task_group: \"reports\"\n    task_name: \"generate_report\"\n</code></pre> <p>Campos:</p> <ul> <li><code>name</code> (string, obrigat\u00f3rio): Um nome \u00fanico para a tarefa agendada.</li> <li><code>schedule</code> (string, obrigat\u00f3rio): A string cron que define quando a tarefa deve ser executada. Suporta a sintaxe cron padr\u00e3o e alguns agendamentos predefinidos (ex: <code>@every 1h</code>, <code>@daily</code>). Consulte a documenta\u00e7\u00e3o do robfig/cron para detalhes.</li> <li><code>task_file</code> (string, obrigat\u00f3rio): O caminho para o arquivo de defini\u00e7\u00e3o da tarefa Lua.</li> <li><code>task_group</code> (string, obrigat\u00f3rio): O nome do grupo de tarefas dentro do arquivo Lua.</li> <li><code>task_name</code> (string, obrigat\u00f3rio): O nome da tarefa espec\u00edfica a ser executada dentro do grupo de tarefas.</li> </ul>"},{"location":"pt/scheduler/#comandos-cli","title":"Comandos CLI","text":""},{"location":"pt/scheduler/#sloth-runner-scheduler-enable","title":"<code>sloth-runner scheduler enable</code>","text":"<p>Inicia o agendador do <code>sloth-runner</code> como um processo em segundo plano. Este comando garante que o agendador esteja em execu\u00e7\u00e3o e pronto para processar tarefas agendadas.</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (ou <code>-c</code>): Especifica o caminho para o seu arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. O padr\u00e3o \u00e9 <code>scheduler.yaml</code> no diret\u00f3rio atual.</li> </ul> <p>Ap\u00f3s a execu\u00e7\u00e3o, o comando imprimir\u00e1 o PID do processo do agendador em segundo plano. O agendador continuar\u00e1 a ser executado mesmo que sua sess\u00e3o de terminal seja fechada.</p>"},{"location":"pt/scheduler/#sloth-runner-scheduler-disable","title":"<code>sloth-runner scheduler disable</code>","text":"<p>Para o processo em segundo plano do agendador do <code>sloth-runner</code> em execu\u00e7\u00e3o.</p> <pre><code>sloth-runner scheduler disable\n</code></pre> <p>Este comando tentar\u00e1 encerrar o processo do agendador de forma graciosa. Se bem-sucedido, ele remover\u00e1 o arquivo PID criado pelo comando <code>enable</code>.</p>"},{"location":"pt/scheduler/#sloth-runner-scheduler-list","title":"<code>sloth-runner scheduler list</code>","text":"<p>Lista todas as tarefas agendadas definidas no arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. Este comando fornece uma vis\u00e3o geral de suas tarefas configuradas, seus agendamentos e detalhes da tarefa Lua associada.</p> <pre><code>sloth-runner scheduler list --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (ou <code>-c</code>): Especifica o caminho para o seu arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. O padr\u00e3o \u00e9 <code>scheduler.yaml</code> no diret\u00f3rio atual.</li> </ul> <p>Exemplo de Sa\u00edda:</p> <pre><code># Configured Scheduled Tasks\n\nNAME                     | SCHEDULE    | FILE                     | GROUP        | TASK\nmy_daily_backup          | 0 0 * * *   | examples/my_workflow.lua | backup_group | perform_backup\nhourly_report_generation | 0 * * * *   | examples/reporting.lua   | reports      | generate_report\n</code></pre>"},{"location":"pt/scheduler/#sloth-runner-scheduler-delete-task_name","title":"<code>sloth-runner scheduler delete &lt;task_name&gt;</code>","text":"<p>Exclui uma tarefa agendada espec\u00edfica do arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. Este comando remove a defini\u00e7\u00e3o da tarefa, e o agendador n\u00e3o a executar\u00e1 mais.</p> <pre><code>sloth-runner scheduler delete my_daily_backup --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>&lt;task_name&gt;</code> (string, obrigat\u00f3rio): O nome \u00fanico da tarefa agendada a ser exclu\u00edda.</li> <li><code>--scheduler-config</code> (ou <code>-c</code>): Especifica o caminho para o seu arquivo de configura\u00e7\u00e3o <code>scheduler.yaml</code>. O padr\u00e3o \u00e9 <code>scheduler.yaml</code> no diret\u00f3rio atual.</li> </ul> <p>Importante: Este comando modifica seu arquivo <code>scheduler.yaml</code>. Certifique-se de ter um backup, se necess\u00e1rio. Se o agendador estiver em execu\u00e7\u00e3o, pode ser necess\u00e1rio desativ\u00e1-lo e reativ\u00e1-lo para que as altera\u00e7\u00f5es entrem em vigor imediatamente.</p>"},{"location":"pt/scheduler/#registro-e-tratamento-de-erros","title":"Registro e Tratamento de Erros","text":"<p>O agendador registra suas atividades e o status de execu\u00e7\u00e3o das tarefas agendadas na sa\u00edda padr\u00e3o e no erro padr\u00e3o. Recomenda-se redirecionar essas sa\u00eddas para um arquivo de log ao executar em um ambiente de produ\u00e7\u00e3o.</p> <p>Se uma tarefa agendada falhar, o agendador registrar\u00e1 o erro e continuar\u00e1 com outras tarefas agendadas. Ele n\u00e3o ser\u00e1 interrompido devido a falhas de tarefas individuais.</p>"},{"location":"pt/scheduler/#exemplo","title":"Exemplo","text":"<ol> <li> <p>Crie um arquivo <code>scheduler.yaml</code>:</p> <pre><code>scheduled_tasks:\n  - name: \"my_test_task\"\n    schedule: \"@every 1m\"\n    task_file: \"examples/basic_pipeline.lua\"\n    task_group: \"basic_pipeline\"\n    task_name: \"fetch_data\"\n</code></pre> </li> <li> <p>Habilite o agendador:</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> </li> <li> <p>Observe a sa\u00edda. A cada minuto, voc\u00ea dever\u00e1 ver mensagens indicando a execu\u00e7\u00e3o de <code>my_test_task</code>.</p> </li> <li> <p>Para parar o agendador:</p> <pre><code>sloth-runner scheduler disable\n</code></pre> </li> </ol>"},{"location":"pt/testing/","title":"Testando Workflows","text":"<p>O sloth-runner inclui um framework de testes embutido que permite escrever testes unit\u00e1rios e de integra\u00e7\u00e3o para seus workflows de tarefas. Escrever testes para sua automa\u00e7\u00e3o \u00e9 crucial para garantir a confiabilidade, prevenir regress\u00f5es e ter confian\u00e7a ao fazer altera\u00e7\u00f5es.</p>"},{"location":"pt/testing/#o-comando-test","title":"O Comando <code>test</code>","text":"<p>Voc\u00ea pode executar um arquivo de teste usando o comando <code>sloth-runner test</code>. Ele requer dois arquivos principais: o workflow que voc\u00ea quer testar e o pr\u00f3prio script de teste.</p> <pre><code>sloth-runner test -w &lt;caminho_para_workflow.lua&gt; -f &lt;caminho_para_arquivo_de_teste.lua&gt;\n</code></pre> <ul> <li><code>-w, --workflow</code>: Especifica o caminho para o arquivo principal de <code>TaskDefinitions</code> que voc\u00ea quer testar.</li> <li><code>-f, --file</code>: Especifica o caminho para o seu arquivo de teste.</li> </ul>"},{"location":"pt/testing/#escrevendo-testes","title":"Escrevendo Testes","text":"<p>Os testes s\u00e3o escritos em Lua e usam dois novos m\u00f3dulos globais fornecidos pelo executor de testes: <code>test</code> e <code>assert</code>.</p>"},{"location":"pt/testing/#o-modulo-test","title":"O M\u00f3dulo <code>test</code>","text":"<p>O m\u00f3dulo <code>test</code> \u00e9 usado para estruturar seus testes e para executar tarefas espec\u00edficas do seu workflow.</p> <ul> <li><code>test.describe(suite_name, function)</code>: Agrupa testes relacionados em uma \"su\u00edte\". Serve para organiza\u00e7\u00e3o.</li> <li><code>test.it(function)</code>: Define um caso de teste individual. A descri\u00e7\u00e3o do teste deve ser inclu\u00edda nas mensagens de asser\u00e7\u00e3o dentro desta fun\u00e7\u00e3o.</li> <li><code>test.run_task(task_name)</code>: Esta \u00e9 a fun\u00e7\u00e3o principal do framework de testes. Ela executa uma \u00fanica tarefa pelo seu nome a partir do arquivo de workflow carregado. Ela retorna uma tabela de <code>result</code> contendo os detalhes da execu\u00e7\u00e3o.</li> </ul> <p>A tabela <code>result</code> retornada por <code>run_task</code> tem a seguinte estrutura:</p> <pre><code>{\n  success = true, -- booleano: true se a tarefa foi bem-sucedida, false caso contr\u00e1rio\n  message = \"Tarefa executada com sucesso\", -- string: A mensagem retornada pela tarefa\n  duration = \"1.23ms\", -- string: A dura\u00e7\u00e3o da execu\u00e7\u00e3o\n  output = { ... }, -- tabela: A tabela de output retornada pela tarefa\n  error = nil -- string: A mensagem de erro se a tarefa falhou\n}\n</code></pre>"},{"location":"pt/testing/#o-modulo-assert","title":"O M\u00f3dulo <code>assert</code>","text":"<p>O m\u00f3dulo <code>assert</code> fornece fun\u00e7\u00f5es para verificar os resultados das execu\u00e7\u00f5es de suas tarefas.</p> <ul> <li><code>assert.is_true(value, message)</code>: Verifica se o <code>value</code> \u00e9 verdadeiro.</li> <li><code>assert.equals(actual, expected, message)</code>: Verifica se o valor <code>actual</code> \u00e9 igual ao valor <code>expected</code>.</li> </ul>"},{"location":"pt/testing/#mocking-de-modulos","title":"Mocking de M\u00f3dulos","text":"<p>Para testar a l\u00f3gica de suas pipelines sem fazer chamadas externas reais (ex: para AWS, Docker ou Terraform), o framework de testes inclui um poderoso recurso de mocking.</p>"},{"location":"pt/testing/#politica-de-mocking-estrito","title":"Pol\u00edtica de Mocking Estrito","text":"<p>O executor de testes imp\u00f5e uma pol\u00edtica de mocking estrito. Ao rodar em modo de teste, qualquer chamada a uma fun\u00e7\u00e3o de m\u00f3dulo (como <code>aws.exec</code> ou <code>docker.build</code>) que n\u00e3o tenha sido explicitamente mockada far\u00e1 com que o teste falhe imediatamente. Isso garante que seus testes sejam totalmente autocontidos, determin\u00edsticos e n\u00e3o tenham efeitos colaterais indesejados.</p>"},{"location":"pt/testing/#testmockfunction_name-mock_definition","title":"<code>test.mock(function_name, mock_definition)</code>","text":"<p>Esta fun\u00e7\u00e3o permite que voc\u00ea defina um valor de retorno falso para qualquer fun\u00e7\u00e3o de m\u00f3dulo que possa ser mockada.</p> <ul> <li><code>function_name</code> (string): O nome completo da fun\u00e7\u00e3o a ser mockada (ex: <code>\"aws.s3.sync\"</code>, <code>\"docker.build\"</code>).</li> <li><code>mock_definition</code> (tabela): Uma tabela que define o que a fun\u00e7\u00e3o mockada deve retornar. Ela deve conter uma chave <code>returns</code>, que \u00e9 uma lista dos valores que a fun\u00e7\u00e3o retornar\u00e1.</li> </ul> <p>A lista <code>returns</code> \u00e9 crucial porque fun\u00e7\u00f5es Lua podem retornar m\u00faltiplos valores.</p> <p>Exemplo:</p> <pre><code>-- Mock de uma fun\u00e7\u00e3o que retorna uma \u00fanica tabela de resultado\ntest.mock(\"docker.build\", {\n  returns = {\n    { success = true, stdout = \"Imagem constru\u00edda com sucesso\" }\n  }\n})\n\n-- Mock de uma fun\u00e7\u00e3o que retorna dois valores (ex: um valor e um erro)\n-- Isto simula uma chamada bem-sucedida a terraform.output\ntest.mock(\"terraform.output\", {\n  returns = { \"meu_arquivo.txt\", nil }\n})\n\n-- Isto simula uma chamada com falha\ntest.mock(\"terraform.output\", {\n  returns = { nil, \"output n\u00e3o encontrado\" }\n})\n</code></pre>"},{"location":"pt/testing/#exemplo-completo-de-mocking","title":"Exemplo Completo de Mocking","text":"<p>Digamos que voc\u00ea tenha uma tarefa que chama <code>aws.exec</code> e possui uma l\u00f3gica que depende do resultado.</p> <p>Tarefa em <code>meu_workflow.lua</code>: <pre><code>-- ...\n{\n  name = \"verificar-conta\",\n  command = function()\n    local result = aws.exec({\"sts\", \"get-caller-identity\"})\n    local data = data.parse_json(result.stdout)\n    if data.Account == \"123456789012\" then\n      return true, \"Conta correta.\"\n    else\n      return false, \"Conta errada.\"\n    end\n  end\n}\n-- ...\n</code></pre></p> <p>Teste em <code>meu_teste.lua</code>: <pre><code>test.describe(\"L\u00f3gica de Verifica\u00e7\u00e3o de Conta\", function()\n  test.it(function()\n    -- Mock do valor de retorno de aws.exec\n    test.mock(\"aws.exec\", {\n      returns = {\n        {\n          success = true,\n          stdout = '{\"Account\": \"123456789012\"}'\n        }\n      }\n    })\n\n    -- Executa a tarefa que usa o mock\n    local result = test.run_task(\"verificar-conta\")\n\n    -- Afirma que a l\u00f3gica da tarefa funcionou corretamente com os dados mockados\n    assert.is_true(result.success, \"A tarefa deve ser bem-sucedida com o ID de conta correto\")\n    assert.equals(result.message, \"Conta correta.\", \"A mensagem deve ser correta\")\n  end)\nend)\n</code></pre></p>"},{"location":"pt/modules/aws/","title":"M\u00f3dulo AWS","text":"<p>O m\u00f3dulo <code>aws</code> fornece uma interface abrangente para interagir com a Amazon Web Services usando o AWS CLI. Ele foi projetado para funcionar perfeitamente com as cadeias de credenciais padr\u00e3o da AWS e tamb\u00e9m possui suporte de primeira classe para o <code>aws-vault</code> para maior seguran\u00e7a.</p>"},{"location":"pt/modules/aws/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Nenhuma configura\u00e7\u00e3o espec\u00edfica no <code>values.yaml</code> \u00e9 necess\u00e1ria. O m\u00f3dulo depende de seu ambiente estar configurado para interagir com a AWS. Isso pode ser alcan\u00e7ado atrav\u00e9s de: - Perfis IAM para inst\u00e2ncias EC2 ou tarefas ECS/EKS. - Vari\u00e1veis de ambiente padr\u00e3o (<code>AWS_ACCESS_KEY_ID</code>, <code>AWS_SECRET_ACCESS_KEY</code>, etc.). - Um arquivo <code>~/.aws/credentials</code> configurado. - Usando o <code>aws-vault</code> com um perfil nomeado.</p>"},{"location":"pt/modules/aws/#executor-generico","title":"Executor Gen\u00e9rico","text":""},{"location":"pt/modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>Esta \u00e9 a fun\u00e7\u00e3o principal do m\u00f3dulo. Ela executa qualquer comando do AWS CLI e retorna o resultado.</p> <p>Par\u00e2metros:</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma tabela de strings representando o comando e os argumentos a serem passados para o AWS CLI (ex: <code>{\"s3\", \"ls\", \"--recursive\"}</code>).</li> <li><code>opts</code> (tabela): Opcional. Uma tabela de op\u00e7\u00f5es para a execu\u00e7\u00e3o.<ul> <li><code>profile</code> (string): Se fornecido, o comando ser\u00e1 executado usando <code>aws-vault exec &lt;profile&gt; -- aws ...</code>. Se omitido, ele executar\u00e1 <code>aws ...</code> diretamente.</li> </ul> </li> </ul> <p>Retornos:</p> <p>Uma tabela contendo os seguintes campos: - <code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando. - <code>stderr</code> (string): O erro padr\u00e3o do comando. - <code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. <code>0</code> normalmente indica sucesso.</p> <p>Exemplo:</p> <pre><code>-- Usando credenciais padr\u00e3o\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- Usando um perfil do aws-vault\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"meu-perfil-prod\"})\n</code></pre>"},{"location":"pt/modules/aws/#ajudantes-do-s3","title":"Ajudantes do S3","text":""},{"location":"pt/modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p>Um wrapper de alto n\u00edvel para o comando <code>aws s3 sync</code>, \u00fatil para sincronizar diret\u00f3rios com o S3.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>source</code> (string): Obrigat\u00f3rio. O diret\u00f3rio de origem ou caminho S3.</li> <li><code>destination</code> (string): Obrigat\u00f3rio. O diret\u00f3rio de destino ou caminho S3.</li> <li><code>profile</code> (string): Opcional. O perfil do <code>aws-vault</code> a ser usado.</li> <li><code>delete</code> (boolean): Opcional. Se <code>true</code>, adiciona a flag <code>--delete</code> ao comando de sincroniza\u00e7\u00e3o.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://meu-bucket-app/static\",\n  profile = \"perfil-deploy\",\n  delete = true\n})\nif not ok then\n  log.error(\"Falha na sincroniza\u00e7\u00e3o com o S3: \" .. err)\nend\n</code></pre>"},{"location":"pt/modules/aws/#ajudantes-do-secrets-manager","title":"Ajudantes do Secrets Manager","text":""},{"location":"pt/modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>Recupera o valor de um segredo do AWS Secrets Manager. Esta fun\u00e7\u00e3o simplifica o processo, retornando diretamente a <code>SecretString</code>.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>secret_id</code> (string): Obrigat\u00f3rio. O nome ou ARN do segredo a ser recuperado.</li> <li><code>profile</code> (string): Opcional. O perfil do <code>aws-vault</code> a ser usado.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>secret_string</code> (string) em caso de sucesso.</li> <li><code>nil, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"producao/database/password\",\n  profile = \"meu-perfil-app\"\n})\n\nif not db_password then\n  log.error(\"Falha ao obter o segredo: \" .. err)\n  return false, \"Configura\u00e7\u00e3o falhou.\"\nend\n\n-- Agora voc\u00ea pode usar a vari\u00e1vel db_password\n</code></pre>"},{"location":"pt/modules/azure/","title":"M\u00f3dulo Azure","text":"<p>O m\u00f3dulo <code>azure</code> fornece uma interface para interagir com o Microsoft Azure usando a ferramenta de linha de comando <code>az</code>.</p>"},{"location":"pt/modules/azure/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que o CLI <code>az</code> esteja instalado e autenticado. Antes de executar pipelines que usam este m\u00f3dulo, voc\u00ea deve fazer login em sua conta do Azure:</p> <pre><code>az login\n</code></pre> <p>O m\u00f3dulo usar\u00e1 suas credenciais de login para todos os comandos.</p>"},{"location":"pt/modules/azure/#executor-generico","title":"Executor Gen\u00e9rico","text":""},{"location":"pt/modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>Executa qualquer comando <code>az</code>. Esta fun\u00e7\u00e3o adiciona automaticamente a flag <code>--output json</code> (se ainda n\u00e3o estiver presente) para garantir que a sa\u00edda seja analis\u00e1vel por m\u00e1quina.</p> <p>Par\u00e2metros:</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma tabela de strings representando o comando e os argumentos a serem passados para o <code>az</code> (ex: <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>).</li> </ul> <p>Retornos:</p> <p>Uma tabela contendo os seguintes campos: - <code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando (como uma string JSON). - <code>stderr</code> (string): O erro padr\u00e3o do comando. - <code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. <code>0</code> normalmente indica sucesso.</p> <p>Exemplo:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Logado como: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"pt/modules/azure/#ajudantes-de-grupo-de-recursos-rg","title":"Ajudantes de Grupo de Recursos (RG)","text":""},{"location":"pt/modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>Exclui um grupo de recursos.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>name</code> (string): Obrigat\u00f3rio. O nome do grupo de recursos a ser exclu\u00eddo.</li> <li><code>yes</code> (boolean): Opcional. Se <code>true</code>, adiciona a flag <code>--yes</code> para ignorar a solicita\u00e7\u00e3o de confirma\u00e7\u00e3o.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"meu-rg-de-teste\",\n  yes = true\n})\nif not ok then\n  log.error(\"Falha ao excluir o grupo de recursos: \" .. err)\nend\n</code></pre>"},{"location":"pt/modules/azure/#ajudantes-de-maquina-virtual-vm","title":"Ajudantes de M\u00e1quina Virtual (VM)","text":""},{"location":"pt/modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>Lista m\u00e1quinas virtuais.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Opcional. Uma tabela contendo os seguintes campos:<ul> <li><code>resource_group</code> (string): O nome de um grupo de recursos para limitar a lista. Se omitido, lista as VMs em toda a assinatura.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>vms</code> (tabela) em caso de sucesso, onde a tabela \u00e9 um array JSON analisado de seus objetos VM.</li> <li><code>nil, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>-- Lista todas as VMs na assinatura\nlocal all_vms, err1 = azure.vm.list()\n\n-- Lista VMs em um grupo de recursos espec\u00edfico\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"meu-rg-de-producao\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"VM encontrada: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"pt/modules/data/","title":"M\u00f3dulo Data","text":"<p>O m\u00f3dulo <code>data</code> fornece fun\u00e7\u00f5es para analisar (parse) e serializar dados entre tabelas Lua e formatos de dados comuns como JSON e YAML.</p> <p>---\\n</p>"},{"location":"pt/modules/data/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>Analisa uma string JSON e a converte em uma tabela Lua.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>json_string</code> (string): A string formatada em JSON para analisar.</li> </ul> </li> <li>Retorna:<ul> <li><code>tabela</code>: A tabela Lua resultante.</li> <li><code>error</code>: Um objeto de erro se a an\u00e1lise falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/data/#datato_jsonlua_table","title":"<code>data.to_json(lua_table)</code>","text":"<p>Serializa uma tabela Lua em uma string JSON.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>lua_table</code> (tabela): A tabela Lua a ser serializada.</li> </ul> </li> <li>Retorna:<ul> <li><code>string</code>: A string JSON resultante.</li> <li><code>error</code>: Um objeto de erro se a serializa\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/data/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>Analisa uma string YAML e a converte em uma tabela Lua.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>yaml_string</code> (string): A string formatada em YAML para analisar.</li> </ul> </li> <li>Retorna:<ul> <li><code>tabela</code>: A tabela Lua resultante.</li> <li><code>error</code>: Um objeto de erro se a an\u00e1lise falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/data/#datato_yamllua_table","title":"<code>data.to_yaml(lua_table)</code>","text":"<p>Serializa uma tabela Lua em uma string YAML.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>lua_table</code> (tabela): A tabela Lua a ser serializada.</li> </ul> </li> <li>Retorna:<ul> <li><code>string</code>: A string YAML resultante.</li> <li><code>error</code>: Um objeto de erro se a serializa\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/data/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  local data = require(\"data\")\n\n  -- Exemplo JSON\n  log.info(\"Testando serializa\u00e7\u00e3o JSON...\")\n  local minha_tabela = { name = \"sloth-runner\", version = 1.0, features = { \"tasks\", \"lua\" } }\n  local json_str, err = data.to_json(minha_tabela)\n  if err then\n    return false, \"Falha ao serializar para JSON: \" .. err\n  end\n  print(\"JSON Serializado: \" .. json_str)\n\n  log.info(\"Testando an\u00e1lise de JSON...\")\n  local tabela_parseada, err = data.parse_json(json_str)\n  if err then\n    return false, \"Falha ao analisar JSON: \" .. err\n  end\n  log.info(\"Nome extra\u00eddo do JSON: \" .. tabela_parseada.name)\n\n  -- Exemplo YAML\n  log.info(\"Testando serializa\u00e7\u00e3o YAML...\")\n  local yaml_str, err = data.to_yaml(minha_tabela)\n  if err then\n    return false, \"Falha ao serializar para YAML: \" .. err\n  end\n  print(\"YAML Serializado:\\n\" .. yaml_str)\n\n  log.info(\"Testando an\u00e1lise de YAML...\")\n  tabela_parseada, err = data.parse_yaml(yaml_str)\n  if err then\n    return false, \"Falha ao analisar YAML: \" .. err\n  end\n  log.info(\"Vers\u00e3o extra\u00edda do YAML: \" .. tabela_parseada.version)\n\n  return true, \"Opera\u00e7\u00f5es do m\u00f3dulo Data bem-sucedidas.\"\nend\n</code></pre> <p>```</p>"},{"location":"pt/modules/digitalocean/","title":"M\u00f3dulo DigitalOcean","text":"<p>O m\u00f3dulo <code>digitalocean</code> fornece uma interface para interagir com seus recursos da DigitalOcean usando a ferramenta de linha de comando <code>doctl</code>.</p>"},{"location":"pt/modules/digitalocean/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que o CLI <code>doctl</code> esteja instalado e autenticado. A maneira padr\u00e3o de fazer isso \u00e9 gerar um token de acesso pessoal em seu painel de controle da DigitalOcean e defini-lo como a vari\u00e1vel de ambiente <code>DIGITALOCEAN_ACCESS_TOKEN</code>.</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"seu_token_de_api_da_do_aqui\"\n</code></pre> <p>O m\u00f3dulo usar\u00e1 automaticamente este token para todos os comandos.</p>"},{"location":"pt/modules/digitalocean/#executor-generico","title":"Executor Gen\u00e9rico","text":""},{"location":"pt/modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>Executa qualquer comando <code>doctl</code>. Esta fun\u00e7\u00e3o adiciona automaticamente a flag <code>--output json</code> para garantir que a sa\u00edda seja analis\u00e1vel por m\u00e1quina.</p> <p>Par\u00e2metros:</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma tabela de strings representando o comando e os argumentos a serem passados para o <code>doctl</code> (ex: <code>{\"compute\", \"droplet\", \"list\"}</code>).</li> </ul> <p>Retornos:</p> <p>Uma tabela contendo os seguintes campos: - <code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando (como uma string JSON). - <code>stderr</code> (string): O erro padr\u00e3o do comando. - <code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. <code>0</code> normalmente indica sucesso.</p> <p>Exemplo:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"Status da conta: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"pt/modules/digitalocean/#ajudantes-de-droplets","title":"Ajudantes de Droplets","text":""},{"location":"pt/modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>Um wrapper de alto n\u00edvel para listar todos os Droplets em sua conta.</p> <p>Retornos:</p> <ul> <li><code>droplets</code> (tabela) em caso de sucesso, onde a tabela \u00e9 um array JSON analisado de seus objetos Droplet.</li> <li><code>nil, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"Droplet encontrado: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"pt/modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>Exclui um Droplet espec\u00edfico pelo seu ID.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>id</code> (string): Obrigat\u00f3rio. O ID do Droplet a ser exclu\u00eddo.</li> <li><code>force</code> (boolean): Opcional. Se <code>true</code>, adiciona a flag <code>--force</code> para ignorar a solicita\u00e7\u00e3o de confirma\u00e7\u00e3o. O padr\u00e3o \u00e9 <code>false</code>.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"Falha ao excluir o droplet: \" .. err)\nend\n</code></pre>"},{"location":"pt/modules/docker/","title":"M\u00f3dulo Docker","text":"<p>O m\u00f3dulo <code>docker</code> fornece uma interface conveniente para interagir com o daemon do Docker, permitindo que voc\u00ea construa, execute e envie imagens Docker como parte de suas pipelines.</p>"},{"location":"pt/modules/docker/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que a CLI <code>docker</code> esteja instalada e que o daemon do Docker esteja em execu\u00e7\u00e3o e acess\u00edvel.</p>"},{"location":"pt/modules/docker/#funcoes","title":"Fun\u00e7\u00f5es","text":""},{"location":"pt/modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>Executa qualquer comando <code>docker</code> bruto.</p> <ul> <li><code>args</code> (tabela): Obrigat\u00f3rio. Uma lista de argumentos a serem passados para o comando <code>docker</code> (ex: <code>{\"ps\", \"-a\"}</code>).</li> <li>Retorna: Uma tabela de resultados com <code>success</code>, <code>stdout</code>, <code>stderr</code> e <code>exit_code</code>.</li> </ul>"},{"location":"pt/modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>Constr\u00f3i uma imagem Docker usando <code>docker build</code>.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>tag</code> (string): Obrigat\u00f3rio. A tag para a imagem (ex: <code>meu-app:latest</code>).</li> <li><code>path</code> (string): Obrigat\u00f3rio. O caminho do contexto de constru\u00e7\u00e3o.</li> <li><code>dockerfile</code> (string): Opcional. O caminho para o Dockerfile.</li> <li><code>build_args</code> (tabela): Opcional. Uma tabela de argumentos de constru\u00e7\u00e3o (ex: <code>{VERSION = \"1.0\"}</code>).</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>Envia uma imagem Docker para um registro usando <code>docker push</code>.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>tag</code> (string): Obrigat\u00f3rio. A tag da imagem a ser enviada.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>Executa um cont\u00eainer Docker usando <code>docker run</code>.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>image</code> (string): Obrigat\u00f3rio. A imagem a ser executada.</li> <li><code>name</code> (string): Opcional. O nome para o cont\u00eainer.</li> <li><code>detach</code> (booleano): Opcional. Se <code>true</code>, executa o cont\u00eainer em segundo plano (<code>-d</code>).</li> <li><code>ports</code> (tabela): Opcional. Uma lista de mapeamentos de portas (ex: <code>{\"8080:80\"}</code>).</li> <li><code>env</code> (tabela): Opcional. Uma tabela de vari\u00e1veis de ambiente (ex: <code>{MINHA_VAR = \"valor\"}</code>).</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/docker/#exemplo","title":"Exemplo","text":"<pre><code>local image_tag = \"minha-imagem-teste:latest\"\n\n-- Tarefa 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"Build falhou\" end\n\n-- Tarefa 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"meu-container-teste\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"Run falhou\" end\n\n-- Tarefa 3: Push (ap\u00f3s teste bem-sucedido)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"Push falhou\" end\n</code></pre>"},{"location":"pt/modules/exec/","title":"M\u00f3dulo Exec","text":"<p>O m\u00f3dulo <code>exec</code> \u00e9 um dos m\u00f3dulos mais fundamentais do <code>sloth-runner</code>. Ele fornece uma fun\u00e7\u00e3o poderosa para executar comandos de shell arbitr\u00e1rios, dando a voc\u00ea controle total sobre o ambiente de execu\u00e7\u00e3o.</p>"},{"location":"pt/modules/exec/#execruncommand-options","title":"<code>exec.run(command, [options])</code>","text":"<p>Executa um comando de shell usando <code>bash -c</code>.</p>"},{"location":"pt/modules/exec/#parametros","title":"Par\u00e2metros","text":"<ul> <li><code>command</code> (string): O comando de shell a ser executado.</li> <li><code>options</code> (tabela, opcional): Uma tabela de op\u00e7\u00f5es para controlar a execu\u00e7\u00e3o.<ul> <li><code>workdir</code> (string): O diret\u00f3rio de trabalho onde o comando deve ser executado. Se n\u00e3o for fornecido, ele \u00e9 executado no diret\u00f3rio tempor\u00e1rio do grupo de tarefas (se dispon\u00edvel) ou no diret\u00f3rio atual.</li> <li><code>env</code> (tabela): Um dicion\u00e1rio de vari\u00e1veis de ambiente (pares chave-valor) a serem definidas para a execu\u00e7\u00e3o do comando. Elas s\u00e3o adicionadas ao ambiente existente.</li> </ul> </li> </ul>"},{"location":"pt/modules/exec/#retorna","title":"Retorna","text":"<p>Uma tabela contendo o resultado da execu\u00e7\u00e3o do comando:</p> <ul> <li><code>success</code> (booleano): <code>true</code> se o comando saiu com o c\u00f3digo <code>0</code>, caso contr\u00e1rio <code>false</code>.</li> <li><code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando.</li> <li><code>stderr</code> (string): A sa\u00edda de erro padr\u00e3o do comando.</li> </ul>"},{"location":"pt/modules/exec/#exemplo","title":"Exemplo","text":"<p>Este exemplo demonstra como usar <code>exec.run</code> com um diret\u00f3rio de trabalho e vari\u00e1veis de ambiente personalizados.</p> <pre><code>-- examples/exec_module_example.lua\n\nTaskDefinitions = {\n  main = {\n    description = \"Uma tarefa para demonstrar o m\u00f3dulo exec.\",\n    tasks = {\n      {\n        name = \"run-with-options\",\n        description = \"Executa um comando com um workdir e ambiente personalizados.\",\n        command = function()\n          log.info(\"Preparando para executar um comando personalizado...\")\n\n          local exec = require(\"exec\")\n\n          -- Cria um diret\u00f3rio tempor\u00e1rio para o exemplo\n          local temp_dir = \"/tmp/sloth-exec-test\"\n          fs.mkdir(temp_dir)\n          fs.write(temp_dir .. \"/test.txt\", \"ol\u00e1 do arquivo de teste\")\n\n          -- Define as op\u00e7\u00f5es\n          local options = {\n            workdir = temp_dir,\n            env = {\n              MINHA_VAR = \"SlothRunner\",\n              OUTRA_VAR = \"e_incrivel\"\n            }\n          }\n\n          -- Executa o comando\n          local result = exec.run(\"echo 'MINHA_VAR \u00e9 $MINHA_VAR' &amp;&amp; ls -l &amp;&amp; cat test.txt\", options)\n\n          -- Limpa o diret\u00f3rio tempor\u00e1rio\n          fs.rm_r(temp_dir)\n\n          if result.success then\n            log.info(\"Comando executado com sucesso!\")\n            print(\"--- STDOUT ---\")\n            print(result.stdout)\n            print(\"--------------\")\n            return true, \"Comando exec bem-sucedido.\"\n          else\n            log.error(\"Comando exec falhou.\")\n            log.error(\"Stderr: \" .. result.stderr)\n            return false, \"Comando exec falhou.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/modules/fs/","title":"M\u00f3dulo FS","text":"<p>O m\u00f3dulo <code>fs</code> fornece fun\u00e7\u00f5es essenciais para interagir com o sistema de arquivos diretamente de seus scripts Lua.</p> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>L\u00ea todo o conte\u00fado de um arquivo.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo.</li> </ul> </li> <li>Retorna:<ul> <li><code>string</code>: O conte\u00fado do arquivo.</li> <li><code>error</code>: Um objeto de erro se a leitura falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>Escreve conte\u00fado em um arquivo, sobrescrevendo-o se ele j\u00e1 existir.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo.</li> <li><code>content</code> (string): O conte\u00fado a ser escrito.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a escrita falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>Adiciona conte\u00fado ao final de um arquivo. Cria o arquivo se ele n\u00e3o existir.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo.</li> <li><code>content</code> (string): O conte\u00fado a ser adicionado.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a opera\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>Verifica se um arquivo ou diret\u00f3rio existe no caminho fornecido.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho a ser verificado.</li> </ul> </li> <li>Retorna:<ul> <li><code>boolean</code>: <code>true</code> se o caminho existir, <code>false</code> caso contr\u00e1rio.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>Cria um diret\u00f3rio no caminho fornecido, incluindo quaisquer diret\u00f3rios pais necess\u00e1rios (como <code>mkdir -p</code>).</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho do diret\u00f3rio a ser criado.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a cria\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>Remove um \u00fanico arquivo.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o arquivo a ser removido.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a remo\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>Remove um arquivo ou diret\u00f3rio recursivamente (como <code>rm -rf</code>).</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho a ser removido.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a remo\u00e7\u00e3o falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>Lista o conte\u00fado de um diret\u00f3rio.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o diret\u00f3rio.</li> </ul> </li> <li>Retorna:<ul> <li><code>tabela</code>: Uma tabela contendo os nomes dos arquivos e subdiret\u00f3rios.</li> <li><code>error</code>: Um objeto de erro se a listagem falhar.</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"pt/modules/fs/#fstmpname","title":"<code>fs.tmpname()</code>","text":"<p>Gera um caminho de diret\u00f3rio tempor\u00e1rio \u00fanico. Nota: Esta fun\u00e7\u00e3o apenas retorna o nome; ela n\u00e3o cria o diret\u00f3rio.</p> <ul> <li>Retorna:<ul> <li><code>string</code>: Um caminho \u00fanico adequado para um diret\u00f3rio tempor\u00e1rio.</li> <li><code>error</code>: Um objeto de erro se um nome n\u00e3o puder ser gerado.</li> </ul> </li> </ul>"},{"location":"pt/modules/fs/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  local fs = require(\"fs\")\n\n  local tmp_dir = \"/tmp/fs-example\"\n  log.info(\"Criando diret\u00f3rio: \" .. tmp_dir)\n  fs.mkdir(tmp_dir)\n\n  local file_path = tmp_dir .. \"/meu_arquivo.txt\"\n  log.info(\"Escrevendo no arquivo: \" .. file_path)\n  fs.write(file_path, \"Ol\u00e1, Sloth Runner!\\n\")\n\n  log.info(\"Adicionando ao arquivo...\")\n  fs.append(file_path, \"Esta \u00e9 uma nova linha.\")\n\n  if fs.exists(file_path) then\n    log.info(\"Conte\u00fado do arquivo: \" .. fs.read(file_path))\n  end\n\n  log.info(\"Listando conte\u00fado de \" .. tmp_dir)\n  local contents = fs.ls(tmp_dir)\n  for i, name in ipairs(contents) do\n    print(\"- \" .. name)\n  end\n\n  log.info(\"Limpando...\")\n  fs.rm_r(tmp_dir)\n\n  return true, \"Opera\u00e7\u00f5es do m\u00f3dulo FS bem-sucedidas.\"\nend\n</code></pre> <p>```</p>"},{"location":"pt/modules/gcp/","title":"M\u00f3dulo GCP","text":"<p>O m\u00f3dulo <code>gcp</code> fornece uma interface simples para executar comandos da CLI do Google Cloud (<code>gcloud</code>) de dentro de uma tarefa do <code>sloth-runner</code>.</p>"},{"location":"pt/modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>Executa um comando <code>gcloud</code> com os argumentos especificados.</p>"},{"location":"pt/modules/gcp/#parametros","title":"Par\u00e2metros","text":"<ul> <li><code>args</code> (tabela): Uma tabela Lua (array) de strings representando os argumentos a serem passados para o comando <code>gcloud</code>. Por exemplo, <code>{\"compute\", \"instances\", \"list\"}</code>.</li> </ul>"},{"location":"pt/modules/gcp/#retorna","title":"Retorna","text":"<p>Uma tabela contendo o resultado da execu\u00e7\u00e3o do comando com as seguintes chaves:</p> <ul> <li><code>stdout</code> (string): A sa\u00edda padr\u00e3o do comando.</li> <li><code>stderr</code> (string): A sa\u00edda de erro padr\u00e3o do comando.</li> <li><code>exit_code</code> (n\u00famero): O c\u00f3digo de sa\u00edda do comando. Um c\u00f3digo de sa\u00edda <code>0</code> geralmente indica sucesso.</li> </ul>"},{"location":"pt/modules/gcp/#exemplo","title":"Exemplo","text":"<p>Este exemplo define uma tarefa que lista todas as inst\u00e2ncias do Compute Engine na regi\u00e3o <code>us-central1</code> para um projeto espec\u00edfico.</p> <pre><code>-- examples/gcp_cli_example.lua\n\nTaskDefinitions = {\n  main = {\n    description = \"Uma tarefa para listar inst\u00e2ncias de computa\u00e7\u00e3o do GCP.\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"Lista inst\u00e2ncias do GCE em us-central1.\",\n        command = function()\n          log.info(\"Listando inst\u00e2ncias do GCP...\")\n\n          -- Requer o m\u00f3dulo gcp para torn\u00e1-lo dispon\u00edvel\n          local gcp = require(\"gcp\")\n\n          -- Executa o comando gcloud\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"meu-projeto-gcp-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- Verifica o resultado\n          if result and result.exit_code == 0 then\n            log.info(\"Inst\u00e2ncias listadas com sucesso.\")\n            print(\"--- LISTA DE INST\u00c2NCIAS ---\")\n            print(result.stdout)\n            print(\"-------------------------\")\n            return true, \"Comando GCP bem-sucedido.\"\n          else\n            log.error(\"Falha ao listar inst\u00e2ncias do GCP.\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"Comando GCP falhou.\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/modules/git/","title":"M\u00f3dulo Git","text":"<p>O m\u00f3dulo <code>git</code> fornece uma API fluente para interagir com reposit\u00f3rios Git, permitindo que voc\u00ea automatize opera\u00e7\u00f5es comuns de controle de vers\u00e3o como clonar, commitar e enviar (push).</p>"},{"location":"pt/modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>Clona um reposit\u00f3rio Git para um caminho local.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL do reposit\u00f3rio a ser clonado.</li> <li><code>path</code> (string): O diret\u00f3rio local para onde clonar.</li> </ul> </li> <li>Retorna:<ul> <li><code>repo</code> (objeto): Um objeto <code>GitRepo</code> em caso de sucesso.</li> <li><code>error</code>: Um objeto de erro se a clonagem falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>Abre um reposit\u00f3rio Git local existente.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho para o reposit\u00f3rio local existente.</li> </ul> </li> <li>Retorna:<ul> <li><code>repo</code> (objeto): Um objeto <code>GitRepo</code> em caso de sucesso.</li> <li><code>error</code>: Um objeto de erro se o caminho n\u00e3o for um reposit\u00f3rio Git v\u00e1lido.</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#o-objeto-gitrepo","title":"O Objeto <code>GitRepo</code>","text":"<p>Este objeto representa um reposit\u00f3rio local e fornece m\u00e9todos encade\u00e1veis para realizar opera\u00e7\u00f5es Git.</p>"},{"location":"pt/modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>Faz checkout de um branch, tag ou commit espec\u00edfico.</p> <ul> <li>Par\u00e2metros: <code>ref</code> (string).</li> </ul>"},{"location":"pt/modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>Puxa (pull) as altera\u00e7\u00f5es de um reposit\u00f3rio remoto.</p> <ul> <li>Par\u00e2metros: <code>remote</code> (string), <code>branch</code> (string).</li> </ul>"},{"location":"pt/modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>Adiciona arquivos \u00e0 \u00e1rea de prepara\u00e7\u00e3o (staging) para um commit.</p> <ul> <li>Par\u00e2metros: <code>pattern</code> (string), ex: <code>\".\"</code> ou <code>\"caminho/para/arquivo.txt\"</code>.</li> </ul>"},{"location":"pt/modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>Cria um commit.</p> <ul> <li>Par\u00e2metros: <code>message</code> (string).</li> </ul>"},{"location":"pt/modules/git/#repotagname-message","title":"<code>repo:tag(name, [message])</code>","text":"<p>Cria uma nova tag.</p> <ul> <li>Par\u00e2metros: <code>name</code> (string), <code>message</code> (string, opcional).</li> </ul>"},{"location":"pt/modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, [options])</code>","text":"<p>Envia (push) commits para um reposit\u00f3rio remoto.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>remote</code> (string).</li> <li><code>branch</code> (string).</li> <li><code>options</code> (tabela, opcional): ex: <code>{ follow_tags = true }</code>.</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>Este m\u00e9todo \u00e9 chamado no final de uma cadeia para obter o resultado da \u00faltima opera\u00e7\u00e3o.</p> <ul> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>success</code> (booleano), <code>stdout</code> (string) e <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"pt/modules/git/#exemplo","title":"Exemplo","text":"<p>Este exemplo demonstra um fluxo de trabalho completo semelhante a CI/CD: clonar, criar um arquivo de vers\u00e3o, adicionar, commitar, criar uma tag e enviar (push).</p> <pre><code>command = function()\n  local git = require(\"git\")\n  local repo_path = \"/tmp/git-example-repo\"\n\n  -- Limpa execu\u00e7\u00f5es anteriores\n  fs.rm_r(repo_path)\n\n  -- 1. Clona o reposit\u00f3rio\n  log.info(\"Clonando reposit\u00f3rio...\")\n  local repo, err = git.clone(\"https://github.com/chalkan3/sloth-runner.git\", repo_path)\n  if err then\n    return false, \"Falha ao clonar: \" .. err\n  end\n\n  -- 2. Cria e escreve um arquivo de vers\u00e3o\n  fs.write(repo_path .. \"/VERSION\", \"1.2.3\")\n\n  -- 3. Encadear comandos Git: add -&gt; commit -&gt; tag -&gt; push\n  log.info(\"Adicionando, commitando, criando tag e enviando...\")\n  repo:add(\".\"):commit(\"ci: Bump version to 1.2.3\"):tag(\"v1.2.3\"):push(\"origin\", \"main\", { follow_tags = true })\n\n  -- 4. Obt\u00e9m o resultado da opera\u00e7\u00e3o final (push)\n  local result = repo:result()\n\n  if not result.success then\n    log.error(\"O push do Git falhou: \" .. result.stderr)\n    return false, \"O push do Git falhou.\"\n  end\n\n  log.info(\"Tag da nova vers\u00e3o enviada com sucesso.\")\n  return true, \"Opera\u00e7\u00f5es Git bem-sucedidas.\"\nend\n</code></pre>"},{"location":"pt/modules/log/","title":"M\u00f3dulo Log","text":"<p>O m\u00f3dulo <code>log</code> fornece uma interface simples e essencial para registrar mensagens de seus scripts Lua no console do <code>sloth-runner</code>. Usar este m\u00f3dulo \u00e9 a maneira padr\u00e3o de fornecer feedback e informa\u00e7\u00f5es de depura\u00e7\u00e3o durante a execu\u00e7\u00e3o de uma tarefa.</p>"},{"location":"pt/modules/log/#loginfomessage","title":"<code>log.info(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel INFO. Este \u00e9 o n\u00edvel padr\u00e3o para mensagens gerais e informativas.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#logwarnmessage","title":"<code>log.warn(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel WARN. \u00c9 adequado para problemas n\u00e3o cr\u00edticos que devem ser levados \u00e0 aten\u00e7\u00e3o do usu\u00e1rio.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#logerrormessage","title":"<code>log.error(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel ERROR. Deve ser usado para erros significativos que podem fazer com que uma tarefa falhe.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<p>Registra uma mensagem no n\u00edvel DEBUG. Essas mensagens geralmente ficam ocultas, a menos que o runner esteja em modo detalhado ou de depura\u00e7\u00e3o. S\u00e3o \u00fateis para informa\u00e7\u00f5es de diagn\u00f3stico detalhadas.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>message</code> (string): A mensagem a ser registrada.</li> </ul> </li> </ul>"},{"location":"pt/modules/log/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  -- O m\u00f3dulo log est\u00e1 dispon\u00edvel globalmente e n\u00e3o precisa ser requerido.\n\n  log.info(\"Iniciando a tarefa de exemplo de log.\")\n\n  local user_name = \"Sloth\"\n  log.debug(\"O usu\u00e1rio atual \u00e9: \" .. user_name)\n\n  if user_name ~= \"Sloth\" then\n    log.warn(\"O usu\u00e1rio n\u00e3o \u00e9 o esperado.\")\n  end\n\n  log.info(\"A tarefa est\u00e1 executando sua a\u00e7\u00e3o principal...\")\n\n  local success = true -- Simula uma opera\u00e7\u00e3o bem-sucedida\n  if not success then\n    log.error(\"A a\u00e7\u00e3o principal falhou inesperadamente!\")\n    return false, \"A\u00e7\u00e3o principal falhou\"\n  end\n\n  log.info(\"Tarefa de exemplo de log conclu\u00edda com sucesso.\")\n  return true, \"Log demonstrado.\"\nend\n</code></pre>"},{"location":"pt/modules/net/","title":"M\u00f3dulo Net","text":"<p>O m\u00f3dulo <code>net</code> fornece fun\u00e7\u00f5es para fazer requisi\u00e7\u00f5es HTTP e baixar arquivos, permitindo que suas tarefas interajam com servi\u00e7os web e recursos remotos.</p>"},{"location":"pt/modules/net/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>Realiza uma requisi\u00e7\u00e3o HTTP GET para a URL especificada.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL para a qual enviar a requisi\u00e7\u00e3o GET.</li> </ul> </li> <li>Retorna:<ul> <li><code>body</code> (string): O corpo da resposta como uma string.</li> <li><code>status_code</code> (n\u00famero): O c\u00f3digo de status HTTP da resposta.</li> <li><code>headers</code> (tabela): Uma tabela contendo os cabe\u00e7alhos da resposta.</li> <li><code>error</code> (string): Uma mensagem de erro se a requisi\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/net/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>Realiza uma requisi\u00e7\u00e3o HTTP POST para a URL especificada.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL para a qual enviar a requisi\u00e7\u00e3o POST.</li> <li><code>body</code> (string): O corpo da requisi\u00e7\u00e3o a ser enviado.</li> <li><code>headers</code> (tabela, opcional): Uma tabela de cabe\u00e7alhos de requisi\u00e7\u00e3o a serem definidos.</li> </ul> </li> <li>Retorna:<ul> <li><code>body</code> (string): O corpo da resposta como uma string.</li> <li><code>status_code</code> (n\u00famero): O c\u00f3digo de status HTTP da resposta.</li> <li><code>headers</code> (tabela): Uma tabela contendo os cabe\u00e7alhos da resposta.</li> <li><code>error</code> (string): Uma mensagem de erro se a requisi\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/net/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>Baixa um arquivo de uma URL e o salva em um caminho local.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>url</code> (string): A URL do arquivo a ser baixado.</li> <li><code>destination_path</code> (string): O caminho do arquivo local para salvar o conte\u00fado baixado.</li> </ul> </li> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se o download falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/net/#exemplo","title":"Exemplo","text":"<pre><code>command = function()\n  local net = require(\"net\")\n\n  -- Exemplo de requisi\u00e7\u00e3o GET\n  log.info(\"Realizando requisi\u00e7\u00e3o GET para httpbin.org...\")\n  local body, status, headers, err = net.http_get(\"https://httpbin.org/get\")\n  if err then\n    log.error(\"Requisi\u00e7\u00e3o GET falhou: \" .. err)\n    return false, \"Requisi\u00e7\u00e3o GET falhou\"\n  end\n  log.info(\"Requisi\u00e7\u00e3o GET bem-sucedida! Status: \" .. status)\n  -- print(\"Corpo da Resposta: \" .. body)\n\n  -- Exemplo de requisi\u00e7\u00e3o POST\n  log.info(\"Realizando requisi\u00e7\u00e3o POST para httpbin.org...\")\n  local post_body = '{\"name\": \"sloth-runner\", \"awesome\": true}'\n  local post_headers = { [\"Content-Type\"] = \"application/json\" }\n  body, status, headers, err = net.http_post(\"https://httpbin.org/post\", post_body, post_headers)\n  if err then\n    log.error(\"Requisi\u00e7\u00e3o POST falhou: \" .. err)\n    return false, \"Requisi\u00e7\u00e3o POST falhou\"\n  end\n  log.info(\"Requisi\u00e7\u00e3o POST bem-sucedida! Status: \" .. status)\n  -- print(\"Corpo da Resposta: \" .. body)\n\n  -- Exemplo de Download\n  local download_path = \"/tmp/sloth-runner-logo.svg\"\n  log.info(\"Baixando arquivo para \" .. download_path)\n  local err = net.download(\"https://raw.githubusercontent.com/chalkan3/sloth-runner/master/assets/sloth-runner-logo.svg\", download_path)\n  if err then\n    log.error(\"Download falhou: \" .. err)\n    return false, \"Download falhou\"\n  end\n  log.info(\"Arquivo baixado com sucesso.\")\n  fs.rm(download_path) -- Limpeza\n\n  return true, \"Opera\u00e7\u00f5es do m\u00f3dulo Net bem-sucedidas.\"\nend\n</code></pre>"},{"location":"pt/modules/notifications/","title":"M\u00f3dulo de Notifica\u00e7\u00f5es","text":"<p>O m\u00f3dulo <code>notifications</code> fornece uma maneira simples de enviar mensagens para v\u00e1rios servi\u00e7os de notifica\u00e7\u00e3o a partir de suas pipelines. Isso \u00e9 particularmente \u00fatil para relatar o sucesso ou a falha de um fluxo de trabalho de CI/CD.</p> <p>Atualmente, os seguintes servi\u00e7os s\u00e3o suportados: - Slack - ntfy</p>"},{"location":"pt/modules/notifications/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Antes de usar o m\u00f3dulo, voc\u00ea precisa adicionar as credenciais ou URLs necess\u00e1rias ao seu arquivo <code>configs/values.yaml</code>. O m\u00f3dulo ler\u00e1 esses valores em tempo de execu\u00e7\u00e3o.</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # Sua URL de Webhook de Entrada do Slack\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # O servidor ntfy a ser usado. Pode ser o p\u00fablico ou auto-hospedado.\n    server: \"https://ntfy.sh\"\n    # O t\u00f3pico para publicar a notifica\u00e7\u00e3o.\n    topic: \"seu-topico-sloth-runner\"\n</code></pre>"},{"location":"pt/modules/notifications/#slack","title":"Slack","text":""},{"location":"pt/modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>Envia uma mensagem para um canal do Slack atrav\u00e9s de um Webhook de Entrada.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>webhook_url</code> (string): Obrigat\u00f3rio. A URL do Webhook de Entrada do Slack. Recomenda-se obter isso do m\u00f3dulo <code>values</code>.</li> <li><code>message</code> (string): Obrigat\u00f3rio. O texto principal da mensagem.</li> <li><code>pipeline</code> (string): Opcional. O nome da pipeline, que ser\u00e1 exibido no anexo da mensagem para contexto.</li> <li><code>error_details</code> (string): Opcional. Quaisquer detalhes de erro a serem inclu\u00eddos no anexo da mensagem. Isso \u00e9 \u00fatil para notifica\u00e7\u00f5es de falha.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- Em caso de sucesso\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 Pipeline executada com sucesso!\",\n    pipeline = \"minha-pipeline-incrivel\"\n  })\n\n  -- Em caso de falha\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c Falha na execu\u00e7\u00e3o da pipeline!\",\n    pipeline = \"minha-pipeline-incrivel\",\n    error_details = \"N\u00e3o foi poss\u00edvel conectar ao banco de dados.\"\n  })\nend\n</code></pre>"},{"location":"pt/modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"pt/modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>Envia uma mensagem para um t\u00f3pico do ntfy.sh.</p> <p>Par\u00e2metros:</p> <ul> <li><code>params</code> (tabela): Uma tabela contendo os seguintes campos:<ul> <li><code>server</code> (string): Obrigat\u00f3rio. A URL do servidor ntfy.</li> <li><code>topic</code> (string): Obrigat\u00f3rio. O t\u00f3pico para o qual a mensagem ser\u00e1 enviada.</li> <li><code>message</code> (string): Obrigat\u00f3rio. O corpo da notifica\u00e7\u00e3o.</li> <li><code>title</code> (string): Opcional. O t\u00edtulo da notifica\u00e7\u00e3o.</li> <li><code>priority</code> (string): Opcional. Prioridade da notifica\u00e7\u00e3o (ex: <code>high</code>, <code>default</code>, <code>low</code>).</li> <li><code>tags</code> (tabela): Opcional. Uma lista de tags (emojis) para adicionar \u00e0 notifica\u00e7\u00e3o.</li> </ul> </li> </ul> <p>Retornos:</p> <ul> <li><code>true</code> em caso de sucesso.</li> <li><code>false, error_message</code> em caso de falha.</li> </ul> <p>Exemplo:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- Em caso de sucesso\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline com Sucesso\",\n    message = \"A pipeline terminou sem erros.\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- Em caso de falha\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"Pipeline Falhou!\",\n    message = \"A pipeline falhou com um erro.\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"pt/modules/pulumi/","title":"M\u00f3dulo Pulumi","text":"<p>O m\u00f3dulo <code>pulumi</code> fornece uma API fluente para orquestrar stacks do Pulumi, permitindo que voc\u00ea gerencie seus fluxos de trabalho de Infraestrutura como C\u00f3digo (IaC) diretamente do <code>sloth-runner</code>.</p>"},{"location":"pt/modules/pulumi/#pulumistackname-options","title":"<code>pulumi.stack(name, options)</code>","text":"<p>Cria um objeto de stack do Pulumi.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>name</code> (string): O nome completo da stack (ex: <code>\"minha-org/meu-projeto/dev\"</code>).</li> <li><code>options</code> (tabela): Uma tabela de op\u00e7\u00f5es.<ul> <li><code>workdir</code> (string): (Obrigat\u00f3rio) O caminho para o diret\u00f3rio do projeto Pulumi.</li> </ul> </li> </ul> </li> <li>Retorna:<ul> <li><code>stack</code> (objeto): Um objeto <code>PulumiStack</code>.</li> <li><code>error</code>: Um objeto de erro se a stack n\u00e3o puder ser inicializada.</li> </ul> </li> </ul>"},{"location":"pt/modules/pulumi/#o-objeto-pulumistack","title":"O Objeto <code>PulumiStack</code>","text":"<p>Este objeto representa uma stack espec\u00edfica do Pulumi e fornece m\u00e9todos para intera\u00e7\u00e3o.</p>"},{"location":"pt/modules/pulumi/#stackupoptions","title":"<code>stack:up([options])</code>","text":"<p>Cria ou atualiza os recursos da stack executando <code>pulumi up</code>.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>options</code> (tabela, opcional):<ul> <li><code>yes</code> (booleano): Se <code>true</code>, passa <code>--yes</code> para aprovar a atualiza\u00e7\u00e3o automaticamente.</li> <li><code>config</code> (tabela): Um dicion\u00e1rio de valores de configura\u00e7\u00e3o a serem passados para a stack.</li> <li><code>args</code> (tabela): Uma lista de argumentos de string adicionais a serem passados para o comando.</li> </ul> </li> </ul> </li> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>success</code> (booleano), <code>stdout</code> (string) e <code>stderr</code> (string).</li> </ul> </li> </ul>"},{"location":"pt/modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview([options])</code>","text":"<p>Pr\u00e9-visualiza as altera\u00e7\u00f5es que seriam feitas por uma atualiza\u00e7\u00e3o executando <code>pulumi preview</code>.</p> <ul> <li>Par\u00e2metros: Os mesmos de <code>stack:up</code>.</li> <li>Retorna: O mesmo de <code>stack:up</code>.</li> </ul>"},{"location":"pt/modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh([options])</code>","text":"<p>Atualiza o estado da stack executando <code>pulumi refresh</code>.</p> <ul> <li>Par\u00e2metros: Os mesmos de <code>stack:up</code>.</li> <li>Retorna: O mesmo de <code>stack:up</code>.</li> </ul>"},{"location":"pt/modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy([options])</code>","text":"<p>Destr\u00f3i todos os recursos na stack executando <code>pulumi destroy</code>.</p> <ul> <li>Par\u00e2metros: Os mesmos de <code>stack:up</code>.</li> <li>Retorna: O mesmo de <code>stack:up</code>.</li> </ul>"},{"location":"pt/modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>Recupera os outputs de uma stack implantada.</p> <ul> <li>Retorna:<ul> <li><code>outputs</code> (tabela): Uma tabela Lua com os outputs da stack.</li> <li><code>error</code>: Um objeto de erro se a busca dos outputs falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/pulumi/#exemplo","title":"Exemplo","text":"<p>Este exemplo mostra um padr\u00e3o comum: implantar uma stack de rede (VPC) e, em seguida, usar seu output (<code>vpcId</code>) para configurar e implantar uma stack de aplica\u00e7\u00e3o.</p> <pre><code>command = function()\n  local pulumi = require(\"pulumi\")\n\n  -- 1. Define a stack da VPC\n  local vpc_stack = pulumi.stack(\"minha-org/vpc/prod\", { workdir = \"./pulumi/vpc\" })\n\n  -- 2. Implanta a VPC\n  log.info(\"Implantando a stack da VPC...\")\n  local vpc_result = vpc_stack:up({ yes = true })\n  if not vpc_result.success then\n    return false, \"A implanta\u00e7\u00e3o da VPC falhou: \" .. vpc_result.stderr\n  end\n\n  -- 3. Obt\u00e9m o ID da VPC de seus outputs\n  log.info(\"Buscando outputs da VPC...\")\n  local vpc_outputs, err = vpc_stack:outputs()\n  if err then\n    return false, \"Falha ao obter os outputs da VPC: \" .. err\n  end\n  local vpc_id = vpc_outputs.vpcId\n\n  -- 4. Define a stack da Aplica\u00e7\u00e3o\n  local app_stack = pulumi.stack(\"minha-org/app/prod\", { workdir = \"./pulumi/app\" })\n\n  -- 5. Implanta a Aplica\u00e7\u00e3o, passando o vpcId como configura\u00e7\u00e3o\n  log.info(\"Implantando a stack da Aplica\u00e7\u00e3o na VPC: \" .. vpc_id)\n  local app_result = app_stack:up({\n    yes = true,\n    config = { [\"my-app:vpcId\"] = vpc_id }\n  })\n  if not app_result.success then\n    return false, \"A implanta\u00e7\u00e3o da Aplica\u00e7\u00e3o falhou: \" .. app_result.stderr\n  end\n\n  log.info(\"Todas as stacks foram implantadas com sucesso.\")\n  return true, \"Orquestra\u00e7\u00e3o com Pulumi completa.\"\nend\n</code></pre>"},{"location":"pt/modules/python/","title":"M\u00f3dulo Python","text":"<p>O m\u00f3dulo <code>python</code> fornece uma maneira conveniente de gerenciar ambientes virtuais Python (<code>venv</code>) e executar scripts de dentro de suas tarefas do <code>sloth-runner</code>. Isso \u00e9 particularmente \u00fatil para fluxos de trabalho que envolvem ferramentas ou scripts baseados em Python.</p>"},{"location":"pt/modules/python/#pythonvenvpath","title":"<code>python.venv(path)</code>","text":"<p>Cria um objeto de ambiente virtual Python. Note que isso apenas cria o objeto em Lua; o ambiente em si n\u00e3o \u00e9 criado no sistema de arquivos at\u00e9 que voc\u00ea chame <code>:create()</code>.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>path</code> (string): O caminho no sistema de arquivos onde o ambiente virtual deve ser criado (ex: <code>./.venv</code>).</li> </ul> </li> <li>Retorna:<ul> <li><code>venv</code> (objeto): Um objeto de ambiente virtual com m\u00e9todos para interagir com ele.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#venvcreate","title":"<code>venv:create()</code>","text":"<p>Cria o ambiente virtual no sistema de arquivos no caminho especificado.</p> <ul> <li>Retorna:<ul> <li><code>error</code>: Um objeto de erro se a cria\u00e7\u00e3o falhar.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#venvpipcommand","title":"<code>venv:pip(command)</code>","text":"<p>Executa um comando <code>pip</code> dentro do contexto do ambiente virtual.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>command</code> (string): Os argumentos a serem passados para o <code>pip</code> (ex: <code>install -r requirements.txt</code>).</li> </ul> </li> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>stdout</code>, <code>stderr</code> e <code>exit_code</code> do comando <code>pip</code>.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#venvexecscript_path","title":"<code>venv:exec(script_path)</code>","text":"<p>Executa um script Python usando o interpretador Python do ambiente virtual.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>script_path</code> (string): O caminho para o script Python a ser executado.</li> </ul> </li> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>stdout</code>, <code>stderr</code> e <code>exit_code</code> da execu\u00e7\u00e3o do script.</li> </ul> </li> </ul>"},{"location":"pt/modules/python/#exemplo","title":"Exemplo","text":"<p>Este exemplo demonstra um ciclo de vida completo: criar um ambiente virtual, instalar depend\u00eancias de um arquivo <code>requirements.txt</code> e executar um script Python.</p> <pre><code>-- examples/python_venv_lifecycle_example.lua\n\nTaskDefinitions = {\n  main = {\n    description = \"Uma tarefa para demonstrar o ciclo de vida de um venv Python.\",\n    create_workdir_before_run = true, -- Usa um diret\u00f3rio de trabalho tempor\u00e1rio\n    tasks = {\n      {\n        name = \"run-python-script\",\n        description = \"Cria um venv, instala depend\u00eancias e executa um script.\",\n        command = function(params)\n          local python = require(\"python\")\n          local workdir = params.workdir -- Obt\u00e9m o diret\u00f3rio de trabalho tempor\u00e1rio do grupo\n\n          -- 1. Escreve nosso script Python e depend\u00eancias no workdir\n          fs.write(workdir .. \"/requirements.txt\", \"requests==2.28.1\")\n          fs.write(workdir .. \"/main.py\", \"import requests\\nprint(f'Ol\u00e1 do Python! Usando a vers\u00e3o do requests: {requests.__version__}')\")\n\n          -- 2. Cria um objeto venv\n          local venv_path = workdir .. \"/.venv\"\n          log.info(\"Configurando ambiente virtual em: \" .. venv_path)\n          local venv = python.venv(venv_path)\n\n          -- 3. Cria o venv no sistema de arquivos\n          venv:create()\n\n          -- 4. Instala as depend\u00eancias usando pip\n          log.info(\"Instalando depend\u00eancias do requirements.txt...\")\n          local pip_result = venv:pip(\"install -r \" .. workdir .. \"/requirements.txt\")\n          if pip_result.exit_code ~= 0 then\n            log.error(\"A instala\u00e7\u00e3o com pip falhou: \" .. pip_result.stderr)\n            return false, \"Falha ao instalar depend\u00eancias Python.\"\n          end\n\n          -- 5. Executa o script\n          log.info(\"Executando o script Python...\")\n          local exec_result = venv:exec(workdir .. \"/main.py\")\n          if exec_result.exit_code ~= 0 then\n            log.error(\"O script Python falhou: \" .. exec_result.stderr)\n            return false, \"A execu\u00e7\u00e3o do script Python falhou.\"\n          end\n\n          log.info(\"Script Python executado com sucesso.\")\n          print(\"--- Sa\u00edda do Script Python ---\")\n          print(exec_result.stdout)\n          print(\"----------------------------\")\n\n          return true, \"Ciclo de vida do venv Python completo.\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"pt/modules/salt/","title":"M\u00f3dulo Salt","text":"<p>O m\u00f3dulo <code>salt</code> fornece uma API fluente para interagir com o SaltStack, permitindo que voc\u00ea execute comandos de execu\u00e7\u00e3o remota e gerencie configura\u00e7\u00f5es a partir de seus fluxos de trabalho do <code>sloth-runner</code>.</p>"},{"location":"pt/modules/salt/#saltclientoptions","title":"<code>salt.client([options])</code>","text":"<p>Cria um objeto de cliente Salt.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>options</code> (tabela, opcional): Uma tabela de op\u00e7\u00f5es.<ul> <li><code>config_path</code> (string): Caminho para o arquivo de configura\u00e7\u00e3o do Salt master.</li> </ul> </li> </ul> </li> <li>Retorna:<ul> <li><code>client</code> (objeto): Um objeto <code>SaltClient</code>.</li> </ul> </li> </ul>"},{"location":"pt/modules/salt/#o-objeto-saltclient","title":"O Objeto <code>SaltClient</code>","text":"<p>Este objeto representa um cliente para um Salt master e fornece m\u00e9todos para direcionar minions.</p>"},{"location":"pt/modules/salt/#clienttargettarget_string-expr_form","title":"<code>client:target(target_string, [expr_form])</code>","text":"<p>Especifica o(s) minion(s) alvo para um comando.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>target_string</code> (string): A express\u00e3o de alvo (ex: <code>\"*\"</code> para todos os minions, <code>\"web-server-1\"</code>, ou um valor de grain).</li> <li><code>expr_form</code> (string, opcional): O tipo de direcionamento a ser usado (ex: <code>\"glob\"</code>, <code>\"grain\"</code>, <code>\"list\"</code>). O padr\u00e3o \u00e9 glob.</li> </ul> </li> <li>Retorna:<ul> <li><code>target</code> (objeto): Um objeto <code>SaltTarget</code>.</li> </ul> </li> </ul>"},{"location":"pt/modules/salt/#o-objeto-salttarget","title":"O Objeto <code>SaltTarget</code>","text":"<p>Este objeto representa um alvo espec\u00edfico e fornece m\u00e9todos encade\u00e1veis para executar fun\u00e7\u00f5es do Salt.</p>"},{"location":"pt/modules/salt/#targetcmdfunction-arg1-arg2","title":"<code>target:cmd(function, [arg1, arg2, ...])</code>","text":"<p>Executa uma fun\u00e7\u00e3o do m\u00f3dulo de execu\u00e7\u00e3o do Salt no alvo.</p> <ul> <li>Par\u00e2metros:<ul> <li><code>function</code> (string): O nome da fun\u00e7\u00e3o a ser executada (ex: <code>\"test.ping\"</code>, <code>\"state.apply\"</code>, <code>\"cmd.run\"</code>).</li> <li><code>arg1</code>, <code>arg2</code>, ... (qualquer): Argumentos adicionais a serem passados para a fun\u00e7\u00e3o do Salt.</li> </ul> </li> <li>Retorna:<ul> <li><code>result</code> (tabela): Uma tabela contendo <code>success</code> (booleano), <code>stdout</code> (string ou tabela) e <code>stderr</code> (string). Se o comando Salt retornar JSON, <code>stdout</code> ser\u00e1 uma tabela Lua analisada.</li> </ul> </li> </ul>"},{"location":"pt/modules/salt/#exemplo","title":"Exemplo","text":"<p>Este exemplo demonstra como direcionar minions para ping\u00e1-los e aplicar um estado do Salt.</p> <pre><code>command = function()\n  local salt = require(\"salt\")\n\n  -- 1. Cria um cliente Salt\n  local client = salt.client()\n\n  -- 2. Direciona todos os minions e os pinga\n  log.info(\"Pingando todos os minions...\")\n  local ping_result = client:target(\"*\"):cmd(\"test.ping\")\n  if not ping_result.success then\n    return false, \"Falha ao pingar minions: \" .. ping_result.stderr\n  end\n  print(\"Resultados do Ping:\")\n  print(data.to_yaml(ping_result.stdout)) -- stdout \u00e9 uma tabela\n\n  -- 3. Direciona um servidor web espec\u00edfico e aplica um estado\n  log.info(\"Aplicando o estado 'nginx' em web-server-1...\")\n  local apply_result = client:target(\"web-server-1\", \"glob\"):cmd(\"state.apply\", \"nginx\")\n  if not apply_result.success then\n    return false, \"Falha ao aplicar o estado: \" .. apply_result.stderr\n  end\n\n  log.info(\"Estado aplicado com sucesso.\")\n  return true, \"Opera\u00e7\u00f5es do Salt conclu\u00eddas.\"\nend\n</code></pre>"},{"location":"pt/modules/terraform/","title":"M\u00f3dulo Terraform","text":"<p>O m\u00f3dulo <code>terraform</code> fornece uma interface de alto n\u00edvel para orquestrar comandos da CLI <code>terraform</code>, permitindo que voc\u00ea gerencie o ciclo de vida de sua infraestrutura diretamente de dentro de uma pipeline do Sloth-Runner.</p>"},{"location":"pt/modules/terraform/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Este m\u00f3dulo requer que a CLI <code>terraform</code> esteja instalada e dispon\u00edvel no PATH do sistema. Todos os comandos devem ser executados dentro de um <code>workdir</code> espec\u00edfico onde seus arquivos <code>.tf</code> est\u00e3o localizados.</p>"},{"location":"pt/modules/terraform/#funcoes","title":"Fun\u00e7\u00f5es","text":""},{"location":"pt/modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>Inicializa um diret\u00f3rio de trabalho do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio que cont\u00e9m os arquivos do Terraform.</li> </ul> </li> <li>Retorna: Uma tabela de resultados com <code>success</code>, <code>stdout</code>, <code>stderr</code> e <code>exit_code</code>.</li> </ul>"},{"location":"pt/modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>Cria um plano de execu\u00e7\u00e3o do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>out</code> (string): Opcional. O nome do arquivo para salvar o plano gerado.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>Aplica um plano do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>plan</code> (string): Opcional. O caminho para um arquivo de plano a ser aplicado.</li> <li><code>auto_approve</code> (boolean): Opcional. Se <code>true</code>, aplica as altera\u00e7\u00f5es sem aprova\u00e7\u00e3o interativa.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>Destr\u00f3i a infraestrutura gerenciada pelo Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>auto_approve</code> (boolean): Opcional. Se <code>true</code>, destr\u00f3i os recursos sem aprova\u00e7\u00e3o interativa.</li> </ul> </li> <li>Retorna: Uma tabela de resultados.</li> </ul>"},{"location":"pt/modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>L\u00ea uma vari\u00e1vel de sa\u00edda de um arquivo de estado do Terraform.</p> <ul> <li><code>params</code> (tabela):<ul> <li><code>workdir</code> (string): Obrigat\u00f3rio. O caminho para o diret\u00f3rio.</li> <li><code>name</code> (string): Opcional. O nome de uma sa\u00edda espec\u00edfica para ler. Se omitido, todas as sa\u00eddas s\u00e3o retornadas como uma tabela.</li> </ul> </li> <li>Retorna:<ul> <li>Em caso de sucesso: O valor JSON analisado da sa\u00edda (pode ser uma string, tabela, etc.).</li> <li>Em caso de falha: <code>nil, error_message</code>.</li> </ul> </li> </ul>"},{"location":"pt/modules/terraform/#exemplo-de-ciclo-de-vida-completo","title":"Exemplo de Ciclo de Vida Completo","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- Tarefa 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init falhou\" end\n\n-- Tarefa 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan falhou\" end\n\n-- Tarefa 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply falhou\" end\n\n-- Tarefa 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output falhou: \" .. err end\nlog.info(\"Arquivo criado pelo Terraform: \" .. filename)\n\n-- Tarefa 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy falhou\" end\n</code></pre>"},{"location":"zh/","title":"Sloth-Runner \u6587\u6863","text":"<p>\u6b22\u8fce\u6765\u5230 Sloth-Runner \u7684\u5b8c\u6574\u6587\u6863\uff0c\u8fd9\u662f\u4e00\u4e2a\u7075\u6d3b\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u4f7f\u7528 Lua \u811a\u672c\u8fdb\u884c\u4efb\u52a1\u81ea\u52a8\u5316\u548c\u5de5\u4f5c\u6d41\u7f16\u6392\u3002</p> <p>\u5728\u8fd9\u91cc\uff0c\u60a8\u5c06\u627e\u5230\u8be6\u7ec6\u7684\u6307\u5357\u3001API \u53c2\u8003\u548c\u5b9e\u7528\u793a\u4f8b\uff0c\u4ee5\u5e2e\u52a9\u60a8\u5145\u5206\u5229\u7528 Sloth-Runner \u7684\u5f3a\u5927\u529f\u80fd\u3002</p>"},{"location":"zh/#_1","title":"\u76ee\u5f55","text":"<ul> <li>\u4efb\u52a1\u8c03\u5ea6\u5668</li> <li>\u5feb\u901f\u5165\u95e8</li> <li>\u6838\u5fc3\u6982\u5ff5</li> <li>\u5206\u5e03\u5f0f\u4efb\u52a1\u6267\u884c</li> <li>CLI \u547d\u4ee4</li> <li>\u4ea4\u4e92\u5f0f REPL</li> <li>\u5185\u7f6e\u6a21\u5757\uff1a<ul> <li>AWS \u6a21\u5757</li> <li>Azure \u6a21\u5757</li> <li>Data \u6a21\u5757</li> <li>DigitalOcean \u6a21\u5757</li> <li>Docker \u6a21\u5757</li> <li>Exec \u6a21\u5757</li> <li>FS \u6a21\u5757</li> <li>GCP \u6a21\u5757</li> <li>Git \u6a21\u5757</li> <li>Log \u6a21\u5757</li> <li>Net \u6a21\u5757</li> <li>\u901a\u77e5\u6a21\u5757</li> <li>Pulumi \u6a21\u5757</li> <li>Python \u6a21\u5757</li> <li>Salt \u6a21\u5757</li> <li>Terraform \u6a21\u5757</li> </ul> </li> <li>\u9ad8\u7ea7\u793a\u4f8b</li> <li>\u9ad8\u7ea7\u529f\u80fd</li> </ul> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"zh/CLI/","title":"CLI \u547d\u4ee4","text":"<p><code>sloth-runner</code> \u547d\u4ee4\u884c\u754c\u9762 (CLI) \u662f\u4e0e\u60a8\u7684\u4efb\u52a1\u7ba1\u9053\u4ea4\u4e92\u7684\u4e3b\u8981\u65b9\u5f0f\u3002\u5b83\u63d0\u4f9b\u4e86\u8fd0\u884c\u3001\u5217\u51fa\u3001\u9a8c\u8bc1\u548c\u7ba1\u7406\u5de5\u4f5c\u6d41\u7684\u547d\u4ee4\u3002</p>"},{"location":"zh/CLI/#sloth-runner-run","title":"<code>sloth-runner run</code>","text":"<p>\u6267\u884c\u5728 Lua \u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u4efb\u52a1\u3002\u8fd9\u662f\u60a8\u5c06\u4f7f\u7528\u7684\u6700\u5e38\u89c1\u7684\u547d\u4ee4\u3002</p> <p>\u7528\u6cd5: <pre><code>sloth-runner run [flags]\n</code></pre></p> <p>\u6807\u5fd7:</p> <ul> <li><code>-f, --file string</code>: (\u5fc5\u9700) Lua \u4efb\u52a1\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>-g, --group string</code>: \u4ec5\u8fd0\u884c\u7279\u5b9a\u4efb\u52a1\u7ec4\u4e2d\u7684\u4efb\u52a1\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c<code>sloth-runner</code> \u5c06\u8fd0\u884c\u6240\u6709\u7ec4\u4e2d\u7684\u4efb\u52a1\u3002</li> <li><code>-t, --tasks string</code>: \u8981\u8fd0\u884c\u7684\u7279\u5b9a\u4efb\u52a1\u7684\u9017\u53f7\u5206\u9694\u5217\u8868 (\u4f8b\u5982, <code>task1,task2</code>)\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5c06\u8003\u8651\u6307\u5b9a\u7ec4\uff08\u6216\u6240\u6709\u7ec4\uff09\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u3002</li> <li><code>-v, --values string</code>: \u5305\u542b\u8981\u4f20\u9012\u7ed9 Lua \u811a\u672c\u7684\u503c\u7684 YAML \u6587\u4ef6\u7684\u8def\u5f84\u3002\u8fd9\u4e9b\u503c\u53ef\u901a\u8fc7\u5168\u5c40 <code>values</code> \u8868\u5728 Lua \u4e2d\u8bbf\u95ee\u3002</li> <li><code>-d, --dry-run</code>: \u6a21\u62df\u4efb\u52a1\u7684\u6267\u884c\u3002\u5b83\u5c06\u6253\u5370\u5c06\u8981\u8fd0\u884c\u7684\u4efb\u52a1\u53ca\u5176\u987a\u5e8f\uff0c\u4f46\u4e0d\u4f1a\u6267\u884c\u5b83\u4eec\u7684 <code>command</code>\u3002</li> <li><code>--return</code>: \u5c06\u5df2\u6267\u884c\u4efb\u52a1\u7684\u6700\u7ec8\u8f93\u51fa\u4f5c\u4e3a JSON \u5bf9\u8c61\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u3002\u8fd9\u5305\u62ec\u6700\u540e\u4e00\u4e2a\u4efb\u52a1\u7684\u8fd4\u56de\u503c\u548c\u4f20\u9012\u7ed9\u5168\u5c40 <code>export()</code> \u51fd\u6570\u7684\u4efb\u4f55\u6570\u636e\u3002</li> <li><code>-y, --yes</code>: \u5728\u672a\u4f7f\u7528 <code>-t</code> \u63d0\u4f9b\u7279\u5b9a\u4efb\u52a1\u65f6\uff0c\u7ed5\u8fc7\u4ea4\u4e92\u5f0f\u4efb\u52a1\u9009\u62e9\u63d0\u793a\u3002</li> <li><code>--interactive</code>: \u542f\u7528\u4efb\u52a1\u6267\u884c\u7684\u4ea4\u4e92\u6a21\u5f0f\uff0c\u5728\u6bcf\u4e2a\u4efb\u52a1\u4e4b\u524d\u63d0\u793a\u7528\u6237\u8f93\u5165\u3002</li> </ul> <p>\u793a\u4f8b:</p> <ul> <li>\u8fd0\u884c\u7279\u5b9a\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1:     <pre><code>sloth-runner run -f examples/basic_pipeline.lua -g my_group\n</code></pre></li> <li>\u8fd0\u884c\u5355\u4e2a\u7279\u5b9a\u4efb\u52a1:     <pre><code>sloth-runner run -f examples/basic_pipeline.lua -g my_group -t my_task\n</code></pre></li> <li>\u8fd0\u884c\u591a\u4e2a\u4efb\u52a1\u5e76\u5c06\u5176\u7ec4\u5408\u8f93\u51fa\u4f5c\u4e3a JSON \u83b7\u53d6:     <pre><code>sloth-runner run -f examples/export_example.lua -t export-data-task --return\n</code></pre></li> </ul>"},{"location":"zh/CLI/#sloth-runner-list","title":"<code>sloth-runner list</code>","text":"<p>\u5217\u51fa\u5728 Lua \u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u53ef\u7528\u4efb\u52a1\u7ec4\u548c\u4efb\u52a1\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u63cf\u8ff0\u548c\u4f9d\u8d56\u5173\u7cfb\u3002</p> <p>\u7528\u6cd5: <pre><code>sloth-runner list [flags]\n</code></pre></p> <p>\u6807\u5fd7:</p> <ul> <li><code>-f, --file string</code>: (\u5fc5\u9700) Lua \u4efb\u52a1\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>-v, --values string</code>: YAML \u503c\u6587\u4ef6\u7684\u8def\u5f84\uff0c\u4ee5\u9632\u60a8\u7684\u4efb\u52a1\u5b9a\u4e49\u4f9d\u8d56\u4e8e\u5b83\u3002</li> </ul>"},{"location":"zh/CLI/#sloth-runner-new","title":"<code>sloth-runner new</code>","text":"<p>\u4ece\u6a21\u677f\u751f\u6210\u4e00\u4e2a\u65b0\u7684 Lua \u4efb\u52a1\u5b9a\u4e49\u6837\u677f\u6587\u4ef6\u3002</p> <p>\u7528\u6cd5: <pre><code>sloth-runner new &lt;group-name&gt; [flags]\n</code></pre></p> <p>\u53c2\u6570:</p> <ul> <li><code>&lt;group-name&gt;</code>: \u8981\u5728\u6587\u4ef6\u4e2d\u521b\u5efa\u7684\u4e3b\u4efb\u52a1\u7ec4\u7684\u540d\u79f0\u3002</li> </ul> <p>\u6807\u5fd7:</p> <ul> <li><code>-t, --template string</code>: \u8981\u4f7f\u7528\u7684\u6a21\u677f\u3002\u9ed8\u8ba4\u4e3a <code>simple</code>\u3002\u8fd0\u884c <code>sloth-runner template list</code> \u67e5\u770b\u6240\u6709\u53ef\u7528\u9009\u9879\u3002</li> <li><code>-o, --output string</code>: \u8f93\u51fa\u6587\u4ef6\u7684\u8def\u5f84\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u751f\u6210\u7684\u5185\u5bb9\u5c06\u6253\u5370\u5230\u6807\u51c6\u8f93\u51fa\u3002</li> <li><code>--set key=value</code>: \u4f20\u9012\u952e\u503c\u5bf9\u5230\u6a21\u677f\uff0c\u7528\u4e8e\u52a8\u6001\u5185\u5bb9\u751f\u6210\u3002</li> </ul> <p>\u793a\u4f8b: <pre><code>sloth-runner new my-python-pipeline -t python -o my_pipeline.lua\n</code></pre></p>"},{"location":"zh/CLI/#sloth-runner-validate","title":"<code>sloth-runner validate</code>","text":"<p>\u9a8c\u8bc1 Lua \u4efb\u52a1\u6587\u4ef6\u7684\u8bed\u6cd5\u548c\u57fa\u672c\u7ed3\u6784\uff0c\u800c\u4e0d\u6267\u884c\u4efb\u4f55\u4efb\u52a1\u3002</p> <p>\u7528\u6cd5: <pre><code>sloth-runner validate [flags]\n</code></pre></p> <p>\u6807\u5fd7:</p> <ul> <li><code>-f, --file string</code>: (\u5fc5\u9700) \u8981\u9a8c\u8bc1\u7684 Lua \u4efb\u52a1\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>-v, --values string</code>: \u5982\u679c\u9a8c\u8bc1\u9700\u8981\uff0c\u5219\u4e3a YAML \u503c\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> </ul>"},{"location":"zh/CLI/#sloth-runner-test","title":"<code>sloth-runner test</code>","text":"<p>\u5bf9\u5de5\u4f5c\u6d41\u6587\u4ef6\u6267\u884c\u57fa\u4e8e Lua \u7684\u6d4b\u8bd5\u6587\u4ef6\u3002(\u8fd9\u662f\u4e00\u4e2a\u9ad8\u7ea7\u529f\u80fd)\u3002</p> <p>\u7528\u6cd5: <pre><code>sloth-runner test [flags]\n</code></pre></p> <p>\u6807\u5fd7:</p> <ul> <li><code>-w, --workflow string</code>: (\u5fc5\u9700) \u8981\u6d4b\u8bd5\u7684 Lua \u5de5\u4f5c\u6d41\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>-f, --file string</code>: (\u5fc5\u9700) Lua \u6d4b\u8bd5\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> </ul>"},{"location":"zh/CLI/#sloth-runner-template-list","title":"<code>sloth-runner template list</code>","text":"<p>\u5217\u51fa\u53ef\u4e0e <code>sloth-runner new</code> \u547d\u4ee4\u4e00\u8d77\u4f7f\u7528\u7684\u6240\u6709\u53ef\u7528\u6a21\u677f\u3002</p> <p>\u7528\u6cd5: <pre><code>sloth-runner template list\n</code></pre></p>"},{"location":"zh/CLI/#sloth-runner-artifacts","title":"<code>sloth-runner artifacts</code>","text":"<p>\u7ba1\u7406\u4efb\u52a1\u4ea7\u7269\uff0c\u5373\u4efb\u52a1\u751f\u6210\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u3002</p> <p>\u5b50\u547d\u4ee4:</p> <ul> <li><code>sloth-runner artifacts list</code>: \u5217\u51fa\u6240\u6709\u6536\u96c6\u7684\u4ea7\u7269\u3002</li> <li><code>sloth-runner artifacts get &lt;artifact_path&gt;</code>: \u4e0b\u8f7d\u7279\u5b9a\u7684\u4ea7\u7269\u3002</li> <li><code>sloth-runner artifacts clean</code>: \u6e05\u7406\u65e7\u7684\u6216\u4e0d\u9700\u8981\u7684\u4ea7\u7269\u3002</li> </ul>"},{"location":"zh/CLI/#sloth-runner-version","title":"<code>sloth-runner version</code>","text":"<p>\u6253\u5370 <code>sloth-runner</code> \u5e94\u7528\u7a0b\u5e8f\u7684\u5f53\u524d\u7248\u672c\u3002</p> <p>\u7528\u6cd5: <pre><code>sloth-runner version\n</code></pre></p>"},{"location":"zh/CLI/#sloth-runner-scheduler","title":"<code>sloth-runner scheduler</code>","text":"<p>\u7ba1\u7406 <code>sloth-runner</code> \u4efb\u52a1\u8c03\u5ea6\u5668\uff0c\u5141\u8bb8\u60a8\u542f\u7528\u3001\u7981\u7528\u3001\u5217\u51fa\u548c\u5220\u9664\u8c03\u5ea6\u4efb\u52a1\u3002</p> <p>\u6709\u5173\u8c03\u5ea6\u5668\u547d\u4ee4\u548c\u914d\u7f6e\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 \u4efb\u52a1\u8c03\u5ea6\u5668\u6587\u6863\u3002</p> <p>\u5b50\u547d\u4ee4:</p> <ul> <li><code>sloth-runner scheduler enable</code>: \u5c06\u8c03\u5ea6\u5668\u4f5c\u4e3a\u540e\u53f0\u8fdb\u7a0b\u542f\u52a8\u3002</li> <li><code>sloth-runner scheduler disable</code>: \u505c\u6b62\u6b63\u5728\u8fd0\u884c\u7684\u8c03\u5ea6\u5668\u8fdb\u7a0b\u3002</li> <li><code>sloth-runner scheduler list</code>: \u5217\u51fa\u6240\u6709\u5df2\u914d\u7f6e\u7684\u8c03\u5ea6\u4efb\u52a1\u3002</li> <li><code>sloth-runner scheduler delete &lt;task_name&gt;</code>: \u5220\u9664\u7279\u5b9a\u7684\u8c03\u5ea6\u4efb\u52a1\u3002</li> </ul>"},{"location":"zh/advanced-examples/","title":"\u9ad8\u7ea7\u793a\u4f8b","text":"<p>\u672c\u8282\u4ecb\u7ecd\u4e86\u66f4\u590d\u6742\u7684\u793a\u4f8b\u548c\u7528\u4f8b\uff0c\u5b83\u4eec\u7ed3\u5408\u4e86\u591a\u4e2a Sloth-Runner \u6a21\u5757\u4ee5\u5b9e\u73b0\u7aef\u5230\u7aef\u81ea\u52a8\u5316\u3002</p>"},{"location":"zh/advanced-examples/#cicd","title":"\u5b8c\u6574\u793a\u4f8b\uff1a\u7aef\u5230\u7aef CI/CD \u6d41\u6c34\u7ebf","text":"<p>\u672c\u6559\u7a0b\u6f14\u793a\u4e86\u5982\u4f55\u4f7f\u7528 <code>git</code>\u3001<code>pulumi</code> \u548c <code>salt</code> \u6a21\u5757\u6784\u5efa\u5b8c\u6574\u7684 CI/CD \u6d41\u6c34\u7ebf\uff0c\u4ee5\u7248\u672c\u5316\u4ee3\u7801\u3001\u9884\u7f6e\u57fa\u7840\u8bbe\u65bd\u548c\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3002</p>"},{"location":"zh/advanced-examples/#_2","title":"\u573a\u666f","text":"<p>\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a Pulumi \u57fa\u7840\u8bbe\u65bd\u9879\u76ee\u548c\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u9879\u76ee\u3002\u60a8\u5e0c\u671b\u81ea\u52a8\u5316\u4ee5\u4e0b\u6d41\u7a0b\uff1a</p> <ol> <li>\u514b\u9686\u57fa\u7840\u8bbe\u65bd\u5b58\u50a8\u5e93\u3002</li> <li>\u66f4\u65b0\u5b58\u50a8\u5e93\u4e2d\u7684\u7248\u672c\u6587\u4ef6\u3002</li> <li>\u63d0\u4ea4\u5e76\u5c06\u6b64\u66f4\u6539\u63a8\u9001\u5230 Git\u3002</li> <li>\u6267\u884c <code>pulumi up</code> \u4ee5\u9884\u7f6e\u6216\u66f4\u65b0\u57fa\u7840\u8bbe\u65bd\uff08\u4f8b\u5982\uff0c\u6682\u5b58\u73af\u5883\uff09\u3002</li> <li>\u4f7f\u7528 Salt \u914d\u7f6e\u9884\u7f6e\u7684\u670d\u52a1\u5668\u5e76\u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\u3002</li> </ol>"},{"location":"zh/advanced-examples/#lua-examplespulumi_git_combined_examplelua","title":"Lua \u811a\u672c (<code>examples/pulumi_git_combined_example.lua</code>)","text":"<pre><code>-- examples/pulumi_git_combined_example.lua\n\ncommand = function(params)\n    log.info(\"Starting combined Pulumi and Git example...\")\n\n    local pulumi_repo_url = \"https://github.com/my-org/my-pulumi-infra.git\" -- Example Pulumi repo\n    local pulumi_repo_path = \"./pulumi-infra-checkout\"\n    local new_infra_version = params.infra_version or \"v1.0.0-infra\"\n    local pulumi_project_workdir = pulumi_repo_path .. \"/my-vpc-project\" -- Subdirectory within the cloned repo\n    local repo\n\n    -- 1. Clone or open the Pulumi repository\n    log.info(\"Step 1: Cloning or opening Pulumi repository...\")\n    if not fs.exists(pulumi_repo_path) then\n        log.info(\"Cloning Pulumi repository: \" .. pulumi_repo_url)\n        local cloned_repo, clone_err = git.clone(pulumi_repo_url, pulumi_repo_path)\n        if clone_err then\n            log.error(\"Failed to clone Pulumi repository: \" .. clone_err)\n            return false, \"Git clone failed.\"\n        end\n        repo = cloned_repo\n    else\n        log.info(\"Pulumi repository already exists, opening local reference.\")\n        local opened_repo, open_err = git.repo(pulumi_repo_path)\n        if open_err then\n            log.error(\"Failed to open Pulumi repository: \" .. open_err)\n            return false, \"Git repo open failed.\"\n        end\n        repo = opened_repo\n    end\n\n    if not repo then\n        return false, \"Failed to get Pulumi repository reference.\"\n    end\n\n    -- 2. Update the repository (pull)\n    log.info(\"Step 2: Pulling latest changes from Pulumi repository...\")\n    repo:checkout(\"main\"):pull(\"origin\", \"main\")\n    local pull_result = repo:result()\n    if not pull_result.success then\n        log.error(\"Failed to pull Pulumi repository: \" .. pull_result.stderr)\n        return false, \"Git pull failed.\"\n    end\n    log.info(\"Pulumi repository updated. Stdout: \" .. pull_result.stdout)\n\n    -- 3. Simulate a change in the Pulumi code (e.g., update a version file)\n    log.info(\"Step 3: Simulating a change in Pulumi code (updating version file)...\")\n    local infra_version_file = pulumi_repo_path .. \"/INFRA_VERSION\"\n    fs.write(infra_version_file, new_infra_version)\n    log.info(\"Updated INFRA_VERSION file to: \" .. new_infra_version)\n\n    -- 4. Commit and push the changes\n    log.info(\"Step 4: Committing and pushing infrastructure version change...\")\n    local commit_message = \"ci: Bump infrastructure version to \" .. new_infra_version\n    repo:add(infra_version_file)\n        :commit(commit_message)\n        :push(\"origin\", \"main\") -- No follow_tags here, just the commit\n\n    local push_result = repo:result()\n    if not push_result.success then\n        log.error(\"Failed to push infrastructure changes: \" .. push_result.stderr)\n        return false, \"Git push failed for infra changes.\"\n    end\n    log.info(\"Infrastructure version change pushed. Stdout: \" .. push_result.stdout)\n\n    -- 5. Execute 'pulumi up' for the project\n    log.info(\"Step 5: Running pulumi up for the infrastructure project...\")\n    local infra_stack = pulumi.stack(\"my-org/my-infra/dev\", {\n        workdir = pulumi_project_workdir -- Use the subdirectory of the Pulumi project\n    })\n\n    local pulumi_up_result = infra_stack:up({ non_interactive = true })\n\n    if not pulumi_up_result.success then\n        log.error(\"Pulumi up failed: \" .. pulumi_up_result.stderr)\n        return false, \"Pulumi up failed.\"\n    end\n    log.info(\"Pulumi up completed successfully. Stdout: \" .. pulumi_up_result.stdout)\n\n    -- 6. Configure and deploy application using Salt (Example)\n    log.info(\"Step 6: Configuring and deploying application using Salt...\")\n    -- Assuming Pulumi up provided the server IP or hostname\n    -- For this example, we'll use a fictitious IP\n    local server_ip = \"192.168.1.100\" -- Replace with actual output from Pulumi, if any\n    local salt_target = salt.target(server_ip)\n\n    log.info(\"Running Salt test.ping on \" .. server_ip .. \"...\")\n    salt_target:ping()\n    local ping_result = salt_target:result()\n    if not ping_result.success then\n        log.error(\"Salt ping failed for \" .. server_ip .. \": \" .. ping_result.stderr)\n        return false, \"Salt ping failed.\"\n    end\n    log.info(\"Salt ping successful. Stdout: \" .. data.to_json(ping_result.stdout)) -- Assuming ping returns JSON\n\n    log.info(\"Applying Salt state 'app.install' on \" .. server_ip .. \"...\")\n    salt_target:cmd('state.apply', 'app.install')\n    local salt_apply_result = salt_target:result()\n    if not salt_apply_result.success then\n        log.error(\"Salt state.apply failed for \" .. server_ip .. \": \" .. salt_apply_result.stderr)\n        return false, \"Salt state.apply failed.\"\n    end\n    log.info(\"Salt state.apply successful. Stdout: \" .. data.to_json(salt_apply_result.stdout))\n\n    log.info(\"Combined Pulumi and Git example finished successfully.\")\n    return true, \"Combined Pulumi and Git example finished.\"\nend\n\nTaskDefinitions = {\n    pulumi_git_combined_example = {\n        description = \"Demonstrates combined usage of 'pulumi' and 'git' modules for CI/CD pipeline.\",\n        tasks = {\n            {\n                name = \"run_combined_example\",\n                command = command,\n                params = {\n                    infra_version = \"v1.0.0-test-combined\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"zh/advanced-features/","title":"\u9ad8\u7ea7\u529f\u80fd","text":"<p>\u672c\u6587\u6863\u4ecb\u7ecd <code>sloth-runner</code> \u7684\u4e00\u4e9b\u66f4\u9ad8\u7ea7\u7684\u529f\u80fd\uff0c\u65e8\u5728\u589e\u5f3a\u60a8\u7684\u5f00\u53d1\u3001\u8c03\u8bd5\u548c\u914d\u7f6e\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/advanced-features/#_2","title":"\u4ea4\u4e92\u5f0f\u4efb\u52a1\u8fd0\u884c\u5668","text":"<p>\u5bf9\u4e8e\u590d\u6742\u7684\u5de5\u4f5c\u6d41\uff0c\u9010\u4e2a\u6267\u884c\u4efb\u52a1\u3001\u68c0\u67e5\u5176\u8f93\u51fa\u5e76\u51b3\u5b9a\u662f\u7ee7\u7eed\u3001\u8df3\u8fc7\u8fd8\u662f\u91cd\u8bd5\u4efb\u52a1\u53ef\u80fd\u5f88\u6709\u7528\u3002\u4ea4\u4e92\u5f0f\u4efb\u52a1\u8fd0\u884c\u5668\u4e3a\u8c03\u8bd5\u548c\u5f00\u53d1\u4efb\u52a1\u7ba1\u9053\u63d0\u4f9b\u4e86\u4e00\u79cd\u5f3a\u5927\u7684\u65b9\u6cd5\u3002</p> <p>\u8981\u4f7f\u7528\u4ea4\u4e92\u5f0f\u8fd0\u884c\u5668\uff0c\u8bf7\u5c06 <code>--interactive</code> \u6807\u5fd7\u6dfb\u52a0\u5230 <code>sloth-runner run</code> \u547d\u4ee4\u4e2d\uff1a</p> <pre><code>sloth-runner run -f examples/basic_pipeline.lua --yes --interactive\n</code></pre> <p>\u542f\u7528\u540e\uff0c\u8fd0\u884c\u5668\u5c06\u5728\u6267\u884c\u6bcf\u4e2a\u4efb\u52a1\u4e4b\u524d\u6682\u505c\u5e76\u63d0\u793a\u60a8\u6267\u884c\u64cd\u4f5c\uff1a</p> <pre><code>? \u4efb\u52a1: fetch_data (\u6a21\u62df\u83b7\u53d6\u539f\u59cb\u6570\u636e)\n&gt; \u8fd0\u884c\n  \u8df3\u8fc7\n  \u4e2d\u6b62\n  \u7ee7\u7eed\n</code></pre> <p>\u64cd\u4f5c:</p> <ul> <li>\u8fd0\u884c: (\u9ed8\u8ba4) \u7ee7\u7eed\u6267\u884c\u5f53\u524d\u4efb\u52a1\u3002</li> <li>\u8df3\u8fc7: \u8df3\u8fc7\u5f53\u524d\u4efb\u52a1\u5e76\u8f6c\u5230\u6267\u884c\u987a\u5e8f\u4e2d\u7684\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002</li> <li>\u4e2d\u6b62: \u7acb\u5373\u4e2d\u6b62\u6574\u4e2a\u4efb\u52a1\u6267\u884c\u3002</li> <li>\u7ee7\u7eed: \u6267\u884c\u5f53\u524d\u4efb\u52a1\u548c\u6240\u6709\u540e\u7eed\u4efb\u52a1\uff0c\u4e0d\u518d\u63d0\u793a\uff0c\u4ece\u800c\u6709\u6548\u5730\u4e3a\u4f59\u4e0b\u7684\u8fd0\u884c\u7981\u7528\u4ea4\u4e92\u6a21\u5f0f\u3002</li> </ul>"},{"location":"zh/advanced-features/#valuesyaml","title":"\u589e\u5f3a\u7684 <code>values.yaml</code> \u6a21\u677f","text":"<p>\u60a8\u53ef\u4ee5\u901a\u8fc7\u4f7f\u7528 Go \u6a21\u677f\u8bed\u6cd5\u6ce8\u5165\u73af\u5883\u53d8\u91cf\u6765\u4f7f <code>values.yaml</code> \u6587\u4ef6\u66f4\u52a0\u52a8\u6001\u3002\u8fd9\u5bf9\u4e8e\u63d0\u4f9b\u654f\u611f\u4fe1\u606f\uff08\u5982\u4ee4\u724c\u6216\u5bc6\u94a5\uff09\u6216\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u914d\u7f6e\u7279\u522b\u6709\u7528\uff0c\u800c\u65e0\u9700\u5bf9\u5176\u8fdb\u884c\u786c\u7f16\u7801\u3002</p> <p><code>sloth-runner</code> \u5c06 <code>values.yaml</code> \u4f5c\u4e3a Go \u6a21\u677f\u5904\u7406\uff0c\u4f7f\u4efb\u4f55\u73af\u5883\u53d8\u91cf\u90fd\u53ef\u4ee5\u5728 <code>.Env</code> \u6620\u5c04\u4e0b\u4f7f\u7528\u3002</p> <p>\u793a\u4f8b:</p> <ol> <li> <p>\u521b\u5efa\u4e00\u4e2a\u5e26\u6709\u6a21\u677f\u5360\u4f4d\u7b26\u7684 <code>values.yaml</code> \u6587\u4ef6\uff1a</p> <p><pre><code># values.yaml\napi_key: \"{{ .Env.MY_API_KEY }}\"\nregion: \"{{ .Env.AWS_REGION | default \"us-east-1\" }}\"\n</code></pre> \u6ce8\u610f\uff1a\u5982\u679c\u672a\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>default</code> \u63d0\u4f9b\u5907\u7528\u503c\u3002</p> </li> <li> <p>\u521b\u5efa\u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e9b\u503c\u7684 Lua \u4efb\u52a1\uff1a</p> <pre><code>-- my_task.lua\nTaskDefinitions = {\n  my_group = {\n    tasks = {\n      {\n        name = \"deploy\",\n        command = function()\n          log.info(\"\u90e8\u7f72\u5230\u533a\u57df: \" .. values.region)\n          log.info(\"\u4f7f\u7528 API \u5bc6\u94a5 (\u524d 5 \u4e2a\u5b57\u7b26): \" .. string.sub(values.api_key, 1, 5) .. \"...\")\n          return true, \"\u90e8\u7f72\u6210\u529f\u3002\"\n        end\n      }\n    }\n  }\n}\n</code></pre> </li> <li> <p>\u5728\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u4efb\u52a1\uff1a</p> <pre><code>export MY_API_KEY=\"supersecretkey12345\"\nexport AWS_REGION=\"us-west-2\"\n\nsloth-runner run -f my_task.lua -v values.yaml --yes\n</code></pre> </li> </ol> <p>\u8f93\u51fa:</p> <p>\u8f93\u51fa\u5c06\u663e\u793a\u73af\u5883\u53d8\u91cf\u4e2d\u7684\u503c\u5df2\u6b63\u786e\u66ff\u6362\uff1a</p> <pre><code>INFO \u90e8\u7f72\u5230\u533a\u57df: us-west-2\nINFO \u4f7f\u7528 API \u5bc6\u94a5 (\u524d 5 \u4e2a\u5b57\u7b26): super...\n</code></pre>"},{"location":"zh/core-concepts/","title":"\u6838\u5fc3\u6982\u5ff5","text":"<p>\u672c\u6587\u6863\u89e3\u91ca\u4e86 <code>sloth-runner</code> \u7684\u57fa\u672c\u6982\u5ff5\uff0c\u5e2e\u52a9\u60a8\u7406\u89e3\u5982\u4f55\u5b9a\u4e49\u548c\u7f16\u6392\u590d\u6742\u7684\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/core-concepts/#taskdefinitions","title":"<code>TaskDefinitions</code> \u8868","text":"<p>\u4efb\u4f55 <code>sloth-runner</code> \u5de5\u4f5c\u6d41\u7684\u5165\u53e3\u70b9\u90fd\u662f\u4e00\u4e2a\u8fd4\u56de\u540d\u4e3a <code>TaskDefinitions</code> \u7684\u5168\u5c40 Lua \u8868\u7684 Lua \u6587\u4ef6\u3002\u6b64\u8868\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u5176\u4e2d\u6bcf\u4e2a\u952e\u90fd\u662f\u4e00\u4e2a \u4efb\u52a1\u7ec4 \u540d\u79f0\u3002</p> <pre><code>-- my_pipeline.lua\nTaskDefinitions = {\n  -- \u5728\u6b64\u5904\u5b9a\u4e49\u4efb\u52a1\u7ec4\n}\n</code></pre>"},{"location":"zh/core-concepts/#_2","title":"\u4efb\u52a1\u7ec4","text":"<p>\u4efb\u52a1\u7ec4\u662f\u76f8\u5173\u4efb\u52a1\u7684\u96c6\u5408\u3002\u5b83\u8fd8\u53ef\u4ee5\u5b9a\u4e49\u5f71\u54cd\u5176\u4e2d\u6240\u6709\u4efb\u52a1\u7684\u5c5e\u6027\u3002</p> <p>\u7ec4\u5c5e\u6027:</p> <ul> <li><code>description</code> (string): \u7ec4\u529f\u80fd\u7684\u63cf\u8ff0\u3002</li> <li><code>tasks</code> (table): \u5355\u4e2a\u4efb\u52a1\u8868\u7684\u5217\u8868\u3002</li> <li><code>create_workdir_before_run</code> (boolean): \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5728\u4efb\u4f55\u4efb\u52a1\u8fd0\u884c\u4e4b\u524d\u4e3a\u8be5\u7ec4\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\u3002\u6b64\u76ee\u5f55\u4f1a\u4f20\u9012\u7ed9\u6bcf\u4e2a\u4efb\u52a1\u3002</li> <li><code>clean_workdir_after_run</code> (function): \u4e00\u4e2a Lua \u51fd\u6570\uff0c\u7528\u4e8e\u51b3\u5b9a\u5728\u7ec4\u5b8c\u6210\u540e\u662f\u5426\u5e94\u5220\u9664\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\u3002\u5b83\u63a5\u6536\u7ec4\u7684\u6700\u7ec8\u7ed3\u679c (<code>{success = true/false, ...}</code>)\u3002\u8fd4\u56de <code>true</code> \u5c06\u5220\u9664\u76ee\u5f55\u3002</li> </ul> <p>\u793a\u4f8b: <pre><code>TaskDefinitions = {\n  my_group = {\n    description = \"\u4e00\u4e2a\u7ba1\u7406\u81ea\u5df1\u4e34\u65f6\u76ee\u5f55\u7684\u7ec4\u3002\",\n    create_workdir_before_run = true,\n    clean_workdir_after_run = function(result)\n      if not result.success then\n        log.warn(\"\u7ec4\u5931\u8d25\u3002\u5de5\u4f5c\u76ee\u5f55\u5c06\u4fdd\u7559\u7528\u4e8e\u8c03\u8bd5\u3002\")\n      end\n      return result.success -- \u4ec5\u5728\u4e00\u5207\u6210\u529f\u65f6\u6e05\u7406\n    end,\n    tasks = {\n      -- \u4efb\u52a1\u5728\u6b64\u5904\u5b9a\u4e49\n    }\n  }\n}\n</code></pre></p>"},{"location":"zh/core-concepts/#_3","title":"\u5355\u4e2a\u4efb\u52a1","text":"<p>\u4efb\u52a1\u662f\u5de5\u4f5c\u7684\u5355\u4e2a\u5355\u5143\u3002\u5b83\u88ab\u5b9a\u4e49\u4e3a\u4e00\u4e2a\u5177\u6709\u591a\u4e2a\u53ef\u7528\u5c5e\u6027\u4ee5\u63a7\u5236\u5176\u884c\u4e3a\u7684\u8868\u3002</p>"},{"location":"zh/core-concepts/#_4","title":"\u57fa\u672c\u5c5e\u6027","text":"<ul> <li><code>name</code> (string): \u4efb\u52a1\u5728\u5176\u7ec4\u4e2d\u7684\u552f\u4e00\u540d\u79f0\u3002</li> <li><code>description</code> (string): \u4efb\u52a1\u529f\u80fd\u7684\u7b80\u8981\u63cf\u8ff0\u3002</li> <li><code>command</code> (string \u6216 function): \u4efb\u52a1\u7684\u6838\u5fc3\u64cd\u4f5c\u3002<ul> <li>\u4f5c\u4e3a\u5b57\u7b26\u4e32: \u4f5c\u4e3a shell \u547d\u4ee4\u6267\u884c\u3002</li> <li>\u4f5c\u4e3a\u51fd\u6570: \u6267\u884c Lua \u51fd\u6570\u3002\u5b83\u63a5\u6536\u4e24\u4e2a\u53c2\u6570\uff1a<code>params</code> (\u5176\u53c2\u6570\u8868) \u548c <code>deps</code> (\u5176\u4f9d\u8d56\u9879\u7684\u8f93\u51fa\u8868)\u3002\u8be5\u51fd\u6570\u5fc5\u987b\u8fd4\u56de\uff1a<ol> <li><code>boolean</code>: <code>true</code> \u8868\u793a\u6210\u529f\uff0c<code>false</code> \u8868\u793a\u5931\u8d25\u3002</li> <li><code>string</code>: \u63cf\u8ff0\u7ed3\u679c\u7684\u6d88\u606f\u3002</li> <li><code>table</code> (\u53ef\u9009): \u5176\u4ed6\u4efb\u52a1\u53ef\u4ee5\u4f9d\u8d56\u7684\u8f93\u51fa\u8868\u3002</li> </ol> </li> </ul> </li> </ul>"},{"location":"zh/core-concepts/#_5","title":"\u4f9d\u8d56\u4e0e\u6267\u884c\u6d41\u7a0b","text":"<ul> <li><code>depends_on</code> (string \u6216 table): \u5728\u6b64\u4efb\u52a1\u8fd0\u884c\u4e4b\u524d\u5fc5\u987b\u6210\u529f\u5b8c\u6210\u7684\u4efb\u52a1\u540d\u79f0\u5217\u8868\u3002</li> <li><code>next_if_fail</code> (string \u6216 table): \u4ec5\u5f53 \u6b64\u4efb\u52a1\u5931\u8d25\u65f6\u624d\u8fd0\u884c\u7684\u4efb\u52a1\u540d\u79f0\u5217\u8868\u3002\u8fd9\u5bf9\u4e8e\u6e05\u7406\u6216\u901a\u77e5\u4efb\u52a1\u5f88\u6709\u7528\u3002</li> <li><code>async</code> (boolean): \u5982\u679c\u4e3a <code>true</code>\uff0c\u4efb\u52a1\u5c06\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u8fd0\u884c\u5668\u4e0d\u4f1a\u7b49\u5f85\u5b83\u5b8c\u6210\u518d\u5f00\u59cb\u6267\u884c\u987a\u5e8f\u4e2d\u7684\u4e0b\u4e00\u4e2a\u4efb\u52a1\u3002</li> </ul>"},{"location":"zh/core-concepts/#_6","title":"\u9519\u8bef\u5904\u7406\u4e0e\u7a33\u5065\u6027","text":"<ul> <li><code>retries</code> (number): \u5982\u679c\u4efb\u52a1\u5931\u8d25\uff0c\u91cd\u8bd5\u7684\u6b21\u6570\u3002\u9ed8\u8ba4\u4e3a <code>0</code>\u3002</li> <li><code>timeout</code> (string): \u4e00\u4e2a\u6301\u7eed\u65f6\u95f4 (\u4f8b\u5982 <code>\"10s\"</code>, <code>\"1m\"</code>), \u5982\u679c\u4efb\u52a1\u4ecd\u5728\u8fd0\u884c\uff0c\u5219\u5728\u6b64\u65f6\u95f4\u540e\u7ec8\u6b62\u3002</li> </ul>"},{"location":"zh/core-concepts/#_7","title":"\u6761\u4ef6\u6267\u884c","text":"<ul> <li><code>run_if</code> (string \u6216 function): \u9664\u975e\u6ee1\u8db3\u6b64\u6761\u4ef6\uff0c\u5426\u5219\u5c06\u8df3\u8fc7\u8be5\u4efb\u52a1\u3002<ul> <li>\u4f5c\u4e3a\u5b57\u7b26\u4e32: \u4e00\u4e2a shell \u547d\u4ee4\u3002\u9000\u51fa\u4ee3\u7801 <code>0</code> \u8868\u793a\u6761\u4ef6\u6ee1\u8db3\u3002</li> <li>\u4f5c\u4e3a\u51fd\u6570: \u4e00\u4e2a\u8fd4\u56de <code>true</code> \u8868\u793a\u4efb\u52a1\u5e94\u8fd0\u884c\u7684 Lua \u51fd\u6570\u3002</li> </ul> </li> <li><code>abort_if</code> (string \u6216 function): \u5982\u679c\u6ee1\u8db3\u6b64\u6761\u4ef6\uff0c\u6574\u4e2a\u5de5\u4f5c\u6d41\u5c06\u88ab\u4e2d\u6b62\u3002<ul> <li>\u4f5c\u4e3a\u5b57\u7b26\u4e32: \u4e00\u4e2a shell \u547d\u4ee4\u3002\u9000\u51fa\u4ee3\u7801 <code>0</code> \u8868\u793a\u4e2d\u6b62\u3002</li> <li>\u4f5c\u4e3a\u51fd\u6570: \u4e00\u4e2a\u8fd4\u56de <code>true</code> \u8868\u793a\u4e2d\u6b62\u7684 Lua \u51fd\u6570\u3002</li> </ul> </li> </ul>"},{"location":"zh/core-concepts/#_8","title":"\u751f\u547d\u5468\u671f\u94a9\u5b50","text":"<ul> <li><code>pre_exec</code> (function): \u5728\u4e3b <code>command</code> \u4e4b\u524d \u8fd0\u884c\u7684 Lua \u51fd\u6570\u3002</li> <li><code>post_exec</code> (function): \u5728\u4e3b <code>command</code> \u6210\u529f\u5b8c\u6210 \u4e4b\u540e \u8fd0\u884c\u7684 Lua \u51fd\u6570\u3002</li> </ul>"},{"location":"zh/core-concepts/#_9","title":"\u53ef\u91cd\u7528\u6027","text":"<ul> <li><code>uses</code> (table): \u6307\u5b9a\u4ece\u53e6\u4e00\u4e2a\u6587\u4ef6\uff08\u901a\u8fc7 <code>import</code> \u52a0\u8f7d\uff09\u7684\u9884\u5b9a\u4e49\u4efb\u52a1\u4f5c\u4e3a\u57fa\u7840\u3002\u7136\u540e\uff0c\u5f53\u524d\u4efb\u52a1\u5b9a\u4e49\u53ef\u4ee5\u8986\u76d6 <code>params</code> \u6216 <code>description</code> \u7b49\u5c5e\u6027\u3002</li> <li><code>params</code> (table): \u53ef\u4ee5\u4f20\u9012\u7ed9\u4efb\u52a1\u7684 <code>command</code> \u51fd\u6570\u7684\u952e\u503c\u5bf9\u5b57\u5178\u3002</li> <li><code>artifacts</code> (string \u6216 table): \u4e00\u4e2a\u6587\u4ef6\u6a21\u5f0f (glob) \u6216\u6a21\u5f0f\u5217\u8868\uff0c\u6307\u5b9a\u6210\u529f\u8fd0\u884c\u540e\u5e94\u5c06\u4efb\u52a1 <code>workdir</code> \u4e2d\u7684\u54ea\u4e9b\u6587\u4ef6\u4fdd\u5b58\u4e3a\u5de5\u4ef6\u3002</li> <li><code>consumes</code> (string \u6216 table): \u524d\u4e00\u4e2a\u4efb\u52a1\u7684\u5de5\u4ef6\u540d\u79f0\uff08\u6216\u540d\u79f0\u5217\u8868\uff09\uff0c\u5728\u8fd0\u884c\u6b64\u4efb\u52a1\u4e4b\u524d\u5e94\u5c06\u5176\u590d\u5236\u5230\u6b64\u4efb\u52a1\u7684 <code>workdir</code> \u4e2d\u3002</li> </ul>"},{"location":"zh/core-concepts/#_10","title":"\u5de5\u4ef6\u7ba1\u7406","text":"<p>Sloth-Runner \u5141\u8bb8\u4efb\u52a1\u901a\u8fc7\u5de5\u4ef6\u673a\u5236\u76f8\u4e92\u5171\u4eab\u6587\u4ef6\u3002\u4e00\u4e2a\u4efb\u52a1\u53ef\u4ee5\u201c\u751f\u4ea7\u201d\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u4f5c\u4e3a\u5de5\u4ef6\uff0c\u540e\u7eed\u4efb\u52a1\u53ef\u4ee5\u201c\u6d88\u8d39\u201d\u8fd9\u4e9b\u5de5\u4ef6\u3002</p> <p>\u8fd9\u5bf9\u4e8e CI/CD \u7ba1\u9053\u975e\u5e38\u6709\u7528\uff0c\u5176\u4e2d\u6784\u5efa\u6b65\u9aa4\u53ef\u80fd\u4f1a\u751f\u6210\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff08\u5de5\u4ef6\uff09\uff0c\u7136\u540e\u7531\u6d4b\u8bd5\u6216\u90e8\u7f72\u6b65\u9aa4\u4f7f\u7528\u3002</p>"},{"location":"zh/core-concepts/#_11","title":"\u5de5\u4f5c\u539f\u7406","text":"<ol> <li> <p>\u751f\u4ea7\u5de5\u4ef6: \u5c06 <code>artifacts</code> \u952e\u6dfb\u52a0\u5230\u60a8\u7684\u4efb\u52a1\u5b9a\u4e49\u4e2d\u3002\u8be5\u503c\u53ef\u4ee5\u662f\u5355\u4e2a\u6587\u4ef6\u6a21\u5f0f (\u4f8b\u5982 <code>\"report.txt\"</code>) \u6216\u5217\u8868 (\u4f8b\u5982 <code>{\"*.log\", \"app.bin\"}</code>)\u3002\u4efb\u52a1\u6210\u529f\u8fd0\u884c\u540e\uff0c\u8fd0\u884c\u5668\u5c06\u5728\u4efb\u52a1\u7684 <code>workdir</code> \u4e2d\u67e5\u627e\u4e0e\u8fd9\u4e9b\u6a21\u5f0f\u5339\u914d\u7684\u6587\u4ef6\uff0c\u5e76\u5c06\u5b83\u4eec\u590d\u5236\u5230\u7ba1\u9053\u7684\u5171\u4eab\u5de5\u4ef6\u5b58\u50a8\u4e2d\u3002</p> </li> <li> <p>\u6d88\u8d39\u5de5\u4ef6: \u5c06 <code>consumes</code> \u952e\u6dfb\u52a0\u5230\u53e6\u4e00\u4e2a\u4efb\u52a1\u7684\u5b9a\u4e49\u4e2d\uff08\u901a\u5e38 <code>depends_on</code> \u751f\u4ea7\u8005\u4efb\u52a1\uff09\u3002\u8be5\u503c\u5e94\u8be5\u662f\u60a8\u8981\u4f7f\u7528\u7684\u5de5\u4ef6\u7684\u6587\u4ef6\u540d (\u4f8b\u5982 <code>\"report.txt\"</code>)\u3002\u5728\u6b64\u4efb\u52a1\u8fd0\u884c\u4e4b\u524d\uff0c\u8fd0\u884c\u5668\u4f1a\u5c06\u6307\u5b9a\u7684\u5de5\u4ef6\u4ece\u5171\u4eab\u5b58\u50a8\u590d\u5236\u5230\u6b64\u4efb\u52a1\u7684 <code>workdir</code> \u4e2d\uff0c\u4f7f\u5176\u53ef\u7528\u4e8e <code>command</code>\u3002</p> </li> </ol>"},{"location":"zh/core-concepts/#_12","title":"\u5de5\u4ef6\u793a\u4f8b","text":"<pre><code>TaskDefinitions = {\n  [\"ci-pipeline\"] = {\n    description = \"\u6f14\u793a\u5de5\u4ef6\u7684\u4f7f\u7528\u3002\",\n    create_workdir_before_run = true,\n    tasks = {\n      {\n        name = \"build\",\n        description = \"\u521b\u5efa\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\u5e76\u5c06\u5176\u58f0\u660e\u4e3a\u5de5\u4ef6\u3002\",\n        command = \"echo 'binary_content' &gt; app.bin\",\n        artifacts = {\"app.bin\"}\n      },\n      {\n        name = \"test\",\n        description = \"\u6d88\u8d39\u4e8c\u8fdb\u5236\u6587\u4ef6\u4ee5\u8fd0\u884c\u6d4b\u8bd5\u3002\",\n        depends_on = \"build\",\n        consumes = {\"app.bin\"},\n        command = function(params)\n          -- \u6b64\u65f6, 'app.bin' \u5b58\u5728\u4e8e\u6b64\u4efb\u52a1\u7684 workdir \u4e2d\n          local content, err = fs.read(params.workdir .. \"/app.bin\")\n          if content == \"binary_content\" then\n            log.info(\"\u6210\u529f\u6d88\u8d39\u5de5\u4ef6\uff01\")\n            return true\n          else\n            return false, \"\u5de5\u4ef6\u5185\u5bb9\u4e0d\u6b63\u786e\uff01\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/core-concepts/#_13","title":"\u5168\u5c40\u51fd\u6570","text":"<p><code>sloth-runner</code> \u5728 Lua \u73af\u5883\u4e2d\u63d0\u4f9b\u5168\u5c40\u51fd\u6570\u4ee5\u5e2e\u52a9\u7f16\u6392\u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/core-concepts/#importpath","title":"<code>import(path)</code>","text":"<p>\u52a0\u8f7d\u53e6\u4e00\u4e2a Lua \u6587\u4ef6\u5e76\u8fd4\u56de\u5176\u8fd4\u56de\u7684\u503c\u3002\u8fd9\u662f\u521b\u5efa\u53ef\u91cd\u7528\u4efb\u52a1\u6a21\u5757\u7684\u4e3b\u8981\u673a\u5236\u3002\u8def\u5f84\u662f\u76f8\u5bf9\u4e8e\u8c03\u7528 <code>import</code> \u7684\u6587\u4ef6\u7684\u3002</p> <p>\u793a\u4f8b (<code>reusable_tasks.lua</code>): <pre><code>-- \u5bfc\u5165\u4e00\u4e2a\u8fd4\u56de\u4efb\u52a1\u5b9a\u4e49\u8868\u7684\u6a21\u5757\nlocal docker_tasks = import(\"shared/docker.lua\")\n\nTaskDefinitions = {\n  main = {\n    tasks = {\n      {\n        -- \u4f7f\u7528\u5bfc\u5165\u6a21\u5757\u4e2d\u7684 'build' \u4efb\u52a1\n        uses = docker_tasks.build,\n        params = { image_name = \"my-app\" }\n      }\n    }\n  }\n}\n</code></pre></p>"},{"location":"zh/core-concepts/#paralleltasks","title":"<code>parallel(tasks)</code>","text":"<p>\u5e76\u53d1\u6267\u884c\u4efb\u52a1\u5217\u8868\uff0c\u5e76\u7b49\u5f85\u6240\u6709\u4efb\u52a1\u5b8c\u6210\u3002</p> <ul> <li><code>tasks</code> (table): \u8981\u5e76\u884c\u8fd0\u884c\u7684\u4efb\u52a1\u8868\u5217\u8868\u3002</li> </ul> <p>\u793a\u4f8b: <pre><code>command = function()\n  log.info(\"\u5e76\u884c\u542f\u52a83\u4e2a\u4efb\u52a1...\")\n  local results, err = parallel({\n    { name = \"short_task\", command = \"sleep 1\" },\n    { name = \"medium_task\", command = \"sleep 2\" },\n    { name = \"long_task\", command = \"sleep 3\" }\n  })\n  if err then\n    return false, \"\u5e76\u884c\u6267\u884c\u5931\u8d25\"\n  end\n  return true, \"\u6240\u6709\u5e76\u884c\u4efb\u52a1\u5df2\u5b8c\u6210\u3002\"\nend\n</code></pre></p>"},{"location":"zh/core-concepts/#exporttable","title":"<code>export(table)</code>","text":"<p>\u5c06\u6570\u636e\u4ece\u811a\u672c\u7684\u4efb\u4f55\u4f4d\u7f6e\u5bfc\u51fa\u5230 CLI\u3002\u5f53\u4f7f\u7528 <code>--return</code> \u6807\u5fd7\u65f6\uff0c\u6240\u6709\u5bfc\u51fa\u7684\u8868\u90fd\u4f1a\u4e0e\u6700\u7ec8\u4efb\u52a1\u7684\u8f93\u51fa\u5408\u5e76\u6210\u4e00\u4e2a JSON \u5bf9\u8c61\u3002</p> <ul> <li><code>table</code>: \u8981\u5bfc\u51fa\u7684 Lua \u8868\u3002</li> </ul> <p>\u793a\u4f8b: <pre><code>command = function()\n  export({ important_value = \"\u6765\u81ea\u4efb\u52a1\u4e2d\u95f4\u7684\u6570\u636e\" })\n  return true, \"\u4efb\u52a1\u5b8c\u6210\", { final_output = \"\u4e00\u4e9b\u7ed3\u679c\" }\nend\n</code></pre> \u4f7f\u7528 <code>--return</code> \u8fd0\u884c\u5c06\u4ea7\u751f\uff1a <pre><code>{\n  \"important_value\": \"\u6765\u81ea\u4efb\u52a1\u4e2d\u95f4\u7684\u6570\u636e\",\n  \"final_output\": \"\u4e00\u4e9b\u7ed3\u679c\"\n}\n</code></pre></p>"},{"location":"zh/distributed/","title":"\u5206\u5e03\u5f0f\u4efb\u52a1\u6267\u884c","text":"<p><code>sloth-runner</code> \u652f\u6301\u5206\u5e03\u5f0f\u4efb\u52a1\u6267\u884c\uff0c\u5141\u8bb8\u60a8\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u4efb\u52a1\u3002\u8fd9\u4f7f\u5f97\u53ef\u6269\u5c55\u7684\u5206\u5e03\u5f0f\u5de5\u4f5c\u6d41\u6210\u4e3a\u53ef\u80fd\uff0c\u5176\u4e2d\u7ba1\u9053\u7684\u4e0d\u540c\u90e8\u5206\u53ef\u4ee5\u5728\u4e0d\u540c\u7684\u673a\u5668\u4e0a\u6267\u884c\u3002</p>"},{"location":"zh/distributed/#_2","title":"\u5de5\u4f5c\u539f\u7406","text":"<p><code>sloth-runner</code> \u4e2d\u7684\u5206\u5e03\u5f0f\u6267\u884c\u6a21\u578b\u9075\u5faa\u4e3b\u4ece\u67b6\u6784\uff1a</p> <ol> <li>\u4e3b\u8282\u70b9\uff1a \u4e3b\u8981\u7684 <code>sloth-runner</code> \u5b9e\u4f8b\u5145\u5f53\u4e3b\u8282\u70b9\u3002\u5b83\u89e3\u6790\u5de5\u4f5c\u6d41\u5b9a\u4e49\uff0c\u8bc6\u522b\u914d\u7f6e\u4e3a\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u7684\u4efb\u52a1\uff0c\u5e76\u5206\u6d3e\u5b83\u4eec\u3002</li> <li>\u4ee3\u7406\uff1a \u5728\u8fdc\u7a0b\u673a\u5668\u4e0a\u4ee5 <code>agent</code> \u6a21\u5f0f\u8fd0\u884c\u7684 <code>sloth-runner</code> \u5b9e\u4f8b\u3002\u5b83\u4fa6\u542c\u6765\u81ea\u4e3b\u8282\u70b9\u7684\u4f20\u5165\u4efb\u52a1\u6267\u884c\u8bf7\u6c42\uff0c\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u5c06\u7ed3\u679c\u53d1\u56de\u3002</li> </ol>"},{"location":"zh/distributed/#_3","title":"\u914d\u7f6e\u8fdc\u7a0b\u4efb\u52a1","text":"<p>\u8981\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u4efb\u52a1\uff0c\u60a8\u9700\u8981\u5728\u4efb\u52a1\u7ec4\u6216\u5355\u4e2a\u4efb\u52a1\u5b9a\u4e49\u4e2d\u6307\u5b9a <code>delegate_to</code> \u5b57\u6bb5\u3002</p>"},{"location":"zh/distributed/#1","title":"1. \u5728\u4efb\u52a1\u7ec4\u7ea7\u522b\u59d4\u6258\u7ed9\u4ee3\u7406","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>delegate_to</code> \u5b57\u6bb5\u76f4\u63a5\u5728 <code>TaskDefinitions</code> \u7ec4\u4e2d\u5b9a\u4e49\u4ee3\u7406\u3002\u6b64\u7ec4\u4e2d\u7684\u6240\u6709\u4efb\u52a1\u90fd\u5c06\u59d4\u6258\u7ed9\u6b64\u4ee3\u7406\uff0c\u9664\u975e\u88ab\u4efb\u52a1\u7279\u5b9a\u7684 <code>delegate_to</code> \u8986\u76d6\u3002</p> <pre><code>TaskDefinitions = {\n  my_distributed_group = {\n    description = \"\u4e00\u4e2a\u5305\u542b\u5206\u5e03\u5f0f\u4efb\u52a1\u7684\u4efb\u52a1\u7ec4\u3002\",\n    delegate_to = { address = \"localhost:50051\" }, -- \u4e3a\u6574\u4e2a\u7ec4\u5b9a\u4e49\u4ee3\u7406\n    tasks = {\n      {\n        name = \"remote_hello\",\n        description = \"\u5728\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c hello world \u4efb\u52a1\u3002\",\n        -- \u6b64\u5904\u4e0d\u9700\u8981 'delegate_to' \u5b57\u6bb5\uff0c\u5b83\u7ee7\u627f\u81ea\u7ec4\n        command = function(params)\n          log.info(\"\u6765\u81ea\u8fdc\u7a0b\u4ee3\u7406\u7684\u95ee\u5019\uff01\")\n          return true, \"\u8fdc\u7a0b\u4efb\u52a1\u5df2\u6267\u884c\u3002\"\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/distributed/#2","title":"2. \u5728\u4efb\u52a1\u7ea7\u522b\u59d4\u6258\u7ed9\u4ee3\u7406","text":"<p>\u6216\u8005\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u5728\u5355\u4e2a\u4efb\u52a1\u4e0a\u6307\u5b9a <code>delegate_to</code> \u5b57\u6bb5\u3002\u8fd9\u5c06\u8986\u76d6\u4efb\u4f55\u7ec4\u7ea7\u522b\u7684\u59d4\u6258\u6216\u5141\u8bb8\u5373\u5e2d\u8fdc\u7a0b\u6267\u884c\u3002</p> <pre><code>TaskDefinitions = {\n  my_group = {\n    description = \"\u4e00\u4e2a\u5305\u542b\u7279\u5b9a\u8fdc\u7a0b\u4efb\u52a1\u7684\u4efb\u52a1\u7ec4\u3002\",\n    tasks = {\n      {\n        name = \"specific_remote_task\",\n        description = \"\u5728\u7279\u5b9a\u8fdc\u7a0b\u4ee3\u7406\u4e0a\u8fd0\u884c\u6b64\u4efb\u52a1\u3002\",\n        delegate_to = { address = \"192.168.1.100:50051\" }, -- \u4ec5\u4e3a\u6b64\u4efb\u52a1\u5b9a\u4e49\u4ee3\u7406\n        command = function(params)\n          log.info(\"\u6765\u81ea\u7279\u5b9a\u8fdc\u7a0b\u4ee3\u7406\u7684\u95ee\u5019\uff01\")\n          return true, \"\u7279\u5b9a\u8fdc\u7a0b\u4efb\u52a1\u5df2\u6267\u884c\u3002\"\n        end\n      },\n      {\n        name = \"local_task\",\n        description = \"\u6b64\u4efb\u52a1\u5728\u672c\u5730\u8fd0\u884c\u3002\",\n        command = \"echo '\u6765\u81ea\u672c\u5730\u673a\u5668\u7684\u95ee\u5019\uff01'\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/distributed/#_4","title":"\u8fd0\u884c\u4ee3\u7406","text":"<p>\u8981\u4ee5\u4ee3\u7406\u6a21\u5f0f\u542f\u52a8 <code>sloth-runner</code> \u5b9e\u4f8b\uff0c\u8bf7\u4f7f\u7528 <code>agent</code> \u547d\u4ee4\uff1a</p> <pre><code>sloth-runner agent -p 50051\n</code></pre> <ul> <li><code>-p, --port</code>\uff1a\u6307\u5b9a\u4ee3\u7406\u5e94\u4fa6\u542c\u7684\u7aef\u53e3\u3002\u9ed8\u8ba4\u4e3a <code>50051</code>\u3002</li> </ul> <p>\u5f53\u4ee3\u7406\u542f\u52a8\u65f6\uff0c\u5b83\u5c06\u4fa6\u542c\u6765\u81ea\u4e3b <code>sloth-runner</code> \u5b9e\u4f8b\u7684\u4f20\u5165 gRPC \u8bf7\u6c42\u3002\u6536\u5230\u4efb\u52a1\u540e\uff0c\u5b83\u5c06\u5728\u5176\u672c\u5730\u73af\u5883\u4e2d\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u5c06\u7ed3\u679c\u4ee5\u53ca\u4efb\u4f55\u66f4\u65b0\u7684\u5de5\u4f5c\u533a\u6587\u4ef6\u8fd4\u56de\u7ed9\u4e3b\u8282\u70b9\u3002</p>"},{"location":"zh/distributed/#_5","title":"\u5de5\u4f5c\u533a\u540c\u6b65","text":"<p>\u5f53\u4efb\u52a1\u5206\u6d3e\u5230\u8fdc\u7a0b\u4ee3\u7406\u65f6\uff0c<code>sloth-runner</code> \u4f1a\u81ea\u52a8\u5904\u7406\u4efb\u52a1\u5de5\u4f5c\u533a\u7684\u540c\u6b65\uff1a</p> <ol> <li>\u4e3b\u8282\u70b9\u5230\u4ee3\u7406\uff1a \u4e3b\u8282\u70b9\u521b\u5efa\u5f53\u524d\u4efb\u52a1\u5de5\u4f5c\u76ee\u5f55\u7684 tarball\uff0c\u5e76\u5c06\u5176\u53d1\u9001\u5230\u4ee3\u7406\u3002</li> <li>\u4ee3\u7406\u6267\u884c\uff1a \u4ee3\u7406\u5c06 tarball \u89e3\u538b\u7f29\u5230\u4e34\u65f6\u76ee\u5f55\u4e2d\uff0c\u5728\u8be5\u76ee\u5f55\u4e2d\u6267\u884c\u4efb\u52a1\uff0c\u5e76\u6355\u83b7\u5bf9\u4e34\u65f6\u76ee\u5f55\u4e2d\u6587\u4ef6\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\u3002</li> <li>\u4ee3\u7406\u5230\u4e3b\u8282\u70b9\uff1a \u4efb\u52a1\u5b8c\u6210\u540e\uff0c\u4ee3\u7406\u521b\u5efa\u4fee\u6539\u540e\u7684\u4e34\u65f6\u76ee\u5f55\u7684 tarball\uff0c\u5e76\u5c06\u5176\u53d1\u56de\u7ed9\u4e3b\u8282\u70b9\u3002\u7136\u540e\uff0c\u4e3b\u8282\u70b9\u89e3\u538b\u7f29\u6b64 tarball\uff0c\u7528\u8fdc\u7a0b\u4efb\u52a1\u6240\u505a\u7684\u4efb\u4f55\u66f4\u6539\u66f4\u65b0\u5176\u672c\u5730\u5de5\u4f5c\u533a\u3002</li> </ol>"},{"location":"zh/getting-started/","title":"\u5feb\u901f\u5165\u95e8","text":"<p>\u6b22\u8fce\u4f7f\u7528 Sloth-Runner\uff01\u672c\u6307\u5357\u5c06\u5e2e\u52a9\u60a8\u5feb\u901f\u5f00\u59cb\u4f7f\u7528\u8be5\u5de5\u5177\u3002</p>"},{"location":"zh/getting-started/#_2","title":"\u5b89\u88c5","text":"<p>\u8981\u5728\u60a8\u7684\u7cfb\u7edf\u4e0a\u5b89\u88c5 <code>sloth-runner</code>\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u7684 <code>install.sh</code> \u811a\u672c\u3002\u6b64\u811a\u672c\u4f1a\u81ea\u52a8\u68c0\u6d4b\u60a8\u7684\u64cd\u4f5c\u7cfb\u7edf\u548c\u67b6\u6784\uff0c\u4ece GitHub \u4e0b\u8f7d\u6700\u65b0\u7248\u672c\uff0c\u5e76\u5c06 <code>sloth-runner</code> \u53ef\u6267\u884c\u6587\u4ef6\u653e\u7f6e\u5728 <code>/usr/local/bin</code> \u4e2d\u3002</p> <pre><code>bash &lt;(curl -sL https://raw.githubusercontent.com/chalkan3/sloth-runner/master/install.sh)\n</code></pre> <p>\u6ce8\u610f\uff1a <code>install.sh</code> \u811a\u672c\u9700\u8981 <code>sudo</code> \u6743\u9650\u624d\u80fd\u5c06\u53ef\u6267\u884c\u6587\u4ef6\u79fb\u52a8\u5230 <code>/usr/local/bin</code>\u3002</p>"},{"location":"zh/getting-started/#_3","title":"\u57fa\u672c\u7528\u6cd5","text":"<p>\u8981\u8fd0\u884c Lua \u4efb\u52a1\u6587\u4ef6\uff1a</p> <pre><code>sloth-runner run -f examples/basic_pipeline.lua\n</code></pre> <p>\u8981\u5217\u51fa\u6587\u4ef6\u4e2d\u7684\u4efb\u52a1\uff1a</p> <pre><code>sloth-runner list -f examples/basic_pipeline.lua\n</code></pre>"},{"location":"zh/getting-started/#_4","title":"\u4e0b\u4e00\u6b65","text":"<p>\u73b0\u5728\u60a8\u5df2\u7ecf\u5b89\u88c5\u5e76\u8fd0\u884c\u4e86 Sloth-Runner\uff0c\u8bf7\u63a2\u7d22\u6838\u5fc3\u6982\u5ff5\u4ee5\u4e86\u89e3\u5982\u4f55\u5b9a\u4e49\u4efb\u52a1\uff0c\u6216\u8005\u76f4\u63a5\u6df1\u5165\u4e86\u89e3\u65b0\u7684\u5185\u7f6e\u6a21\u5757\u4ee5\u4f7f\u7528 Git\u3001Pulumi \u548c Salt \u8fdb\u884c\u9ad8\u7ea7\u81ea\u52a8\u5316\u3002</p> <p>English | Portugu\u00eas | \u4e2d\u6587</p>"},{"location":"zh/repl/","title":"\u4ea4\u4e92\u5f0f REPL","text":"<p><code>sloth-runner repl</code> \u547d\u4ee4\u5c06\u60a8\u5e26\u5165\u4e00\u4e2a\u4ea4\u4e92\u5f0f\u7684 Read-Eval-Print Loop (REPL) \u4f1a\u8bdd\u3002\u8fd9\u662f\u4e00\u4e2a\u5f3a\u5927\u7684\u5de5\u5177\uff0c\u7528\u4e8e\u8c03\u8bd5\u3001\u63a2\u7d22\u548c\u5feb\u901f\u5b9e\u9a8c sloth-runner \u6a21\u5757\u3002</p>"},{"location":"zh/repl/#repl_1","title":"\u542f\u52a8 REPL","text":"<p>\u8981\u542f\u52a8\u4f1a\u8bdd\uff0c\u53ea\u9700\u8fd0\u884c\uff1a <pre><code>sloth-runner repl\n</code></pre></p> <p>\u60a8\u8fd8\u53ef\u4ee5\u9884\u52a0\u8f7d\u4e00\u4e2a\u5de5\u4f5c\u6d41\u6587\u4ef6\uff0c\u4ee5\u4f7f\u5176 <code>TaskDefinitions</code> \u548c\u4efb\u4f55\u8f85\u52a9\u51fd\u6570\u5728\u4f1a\u8bdd\u4e2d\u53ef\u7528\u3002\u8fd9\u5bf9\u4e8e\u8c03\u8bd5\u73b0\u6709\u7684\u7ba1\u9053\u975e\u5e38\u6709\u7528\u3002</p> <pre><code>sloth-runner repl -f /path/to/your/pipeline.lua\n</code></pre>"},{"location":"zh/repl/#_1","title":"\u529f\u80fd","text":""},{"location":"zh/repl/#_2","title":"\u5b9e\u65f6\u73af\u5883","text":"<p>REPL \u63d0\u4f9b\u4e86\u4e00\u4e2a\u5b9e\u65f6\u7684 Lua \u73af\u5883\uff0c\u60a8\u53ef\u4ee5\u5728\u5176\u4e2d\u6267\u884c\u4efb\u4f55 Lua \u4ee3\u7801\u3002\u6240\u6709\u5185\u7f6e\u7684 sloth-runner \u6a21\u5757\uff08<code>aws</code>\u3001<code>docker</code>\u3001<code>fs</code>\u3001<code>log</code> \u7b49\uff09\u90fd\u5df2\u9884\u52a0\u8f7d\u5e76\u53ef\u4f9b\u4f7f\u7528\u3002</p> <pre><code>sloth&gt; log.info(\"\u6765\u81ea REPL \u7684\u4f60\u597d\uff01\")\nsloth&gt; result = fs.read(\"README.md\")\nsloth&gt; print(string.sub(result, 1, 50))\n</code></pre>"},{"location":"zh/repl/#_3","title":"\u81ea\u52a8\u8865\u5168","text":"<p>REPL \u6709\u4e00\u4e2a\u590d\u6742\u7684\u81ea\u52a8\u8865\u5168\u7cfb\u7edf\u3002 - \u5f00\u59cb\u8f93\u5165\u5168\u5c40\u53d8\u91cf\u6216\u6a21\u5757\u7684\u540d\u79f0\uff08\u4f8b\u5982 <code>aws</code>\uff09\u5e76\u6309 <code>Tab</code> \u67e5\u770b\u5efa\u8bae\u3002 - \u8f93\u5165\u6a21\u5757\u540d\u79f0\u540e\u8ddf\u4e00\u4e2a\u70b9\uff08\u4f8b\u5982 <code>docker.</code>\uff09\u5e76\u6309 <code>Tab</code> \u67e5\u770b\u8be5\u6a21\u5757\u4e2d\u6240\u6709\u53ef\u7528\u7684\u51fd\u6570\u3002</p>"},{"location":"zh/repl/#_4","title":"\u5386\u53f2\u8bb0\u5f55","text":"<p>REPL \u4f1a\u4fdd\u7559\u60a8\u7684\u547d\u4ee4\u5386\u53f2\u8bb0\u5f55\u3002\u4f7f\u7528\u5411\u4e0a\u548c\u5411\u4e0b\u7bad\u5934\u952e\u6d4f\u89c8\u4ee5\u524d\u7684\u547d\u4ee4\u3002</p>"},{"location":"zh/repl/#_5","title":"\u4f1a\u8bdd\u793a\u4f8b","text":"<p>\u4ee5\u4e0b\u662f\u4f7f\u7528 REPL \u8c03\u8bd5 Docker \u547d\u4ee4\u7684\u793a\u4f8b\u3002</p> <pre><code>$ sloth-runner repl\nSloth-Runner Interactive REPL\n\u8f93\u5165 'exit' \u6216 'quit' \u79bb\u5f00\u3002\nsloth&gt; result = docker.exec({\"ps\", \"-a\"})\nsloth&gt; print(result.stdout)\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\nsloth&gt; -- \u73b0\u5728\u8ba9\u6211\u4eec\u5c1d\u8bd5\u6784\u5efa\u4e00\u4e2a\u955c\u50cf\nsloth&gt; build_result = docker.build({tag=\"my-test\", path=\"./examples/docker\"})\nsloth&gt; print(build_result.success)\ntrue\nsloth&gt; exit\n\u518d\u89c1\uff01\n</code></pre>"},{"location":"zh/scheduler/","title":"\u4efb\u52a1\u8c03\u5ea6\u5668","text":"<p><code>sloth-runner</code> \u73b0\u5728\u5305\u542b\u4e00\u4e2a\u5185\u7f6e\u7684\u4efb\u52a1\u8c03\u5ea6\u5668\uff0c\u5141\u8bb8\u60a8\u4f7f\u7528 cron \u8bed\u6cd5\u5728\u6307\u5b9a\u7684\u65f6\u95f4\u95f4\u9694\u81ea\u52a8\u6267\u884c\u60a8\u7684 Lua \u5b9a\u4e49\u4efb\u52a1\u3002</p>"},{"location":"zh/scheduler/#_2","title":"\u529f\u80fd","text":"<ul> <li>\u540e\u53f0\u8fdb\u7a0b: \u8c03\u5ea6\u5668\u4f5c\u4e3a\u6301\u4e45\u7684\u540e\u53f0\u8fdb\u7a0b\u8fd0\u884c\uff0c\u72ec\u7acb\u4e8e\u60a8\u7684\u7ec8\u7aef\u4f1a\u8bdd\u3002</li> <li>\u57fa\u4e8e Cron \u7684\u8c03\u5ea6: \u4f7f\u7528\u7075\u6d3b\u7684 cron \u5b57\u7b26\u4e32\u5b9a\u4e49\u4efb\u52a1\u8c03\u5ea6\u3002</li> <li>\u6301\u4e45\u6027: \u8c03\u5ea6\u4efb\u52a1\u4ece\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\uff0c\u786e\u4fdd\u5728\u91cd\u542f\u540e\u6062\u590d\u3002</li> <li>\u4e0e\u73b0\u6709\u4efb\u52a1\u96c6\u6210: \u8c03\u5ea6\u5668\u5229\u7528\u73b0\u6709\u7684 <code>sloth-runner run</code> \u547d\u4ee4\u6765\u6267\u884c\u60a8\u7684\u4efb\u52a1\u3002</li> </ul>"},{"location":"zh/scheduler/#scheduleryaml","title":"\u914d\u7f6e: <code>scheduler.yaml</code>","text":"<p>\u8c03\u5ea6\u4efb\u52a1\u5728 YAML \u6587\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u901a\u5e38\u547d\u540d\u4e3a <code>scheduler.yaml</code>\u3002\u6b64\u6587\u4ef6\u6307\u5b9a\u8981\u8fd0\u884c\u7684\u4efb\u52a1\u3001\u5b83\u4eec\u7684\u8c03\u5ea6\u4ee5\u53ca Lua \u6587\u4ef6\u3001\u7ec4\u548c\u4efb\u52a1\u540d\u79f0\u3002</p> <pre><code>scheduled_tasks:\n  - name: \"my_daily_backup\"\n    schedule: \"0 0 * * *\" # \u6bcf\u5929\u5348\u591c\n    task_file: \"examples/my_workflow.lua\"\n    task_group: \"backup_group\"\n    task_name: \"perform_backup\"\n  - name: \"hourly_report_generation\"\n    schedule: \"0 * * * *\" # \u6bcf\u5c0f\u65f6\n    task_file: \"examples/reporting.lua\"\n    task_group: \"reports\"\n    task_name: \"generate_report\"\n</code></pre> <p>\u5b57\u6bb5:</p> <ul> <li><code>name</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u8c03\u5ea6\u4efb\u52a1\u7684\u552f\u4e00\u540d\u79f0\u3002</li> <li><code>schedule</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u5b9a\u4e49\u4efb\u52a1\u4f55\u65f6\u8fd0\u884c\u7684 cron \u5b57\u7b26\u4e32\u3002\u652f\u6301\u6807\u51c6 cron \u8bed\u6cd5\u548c\u4e00\u4e9b\u9884\u5b9a\u4e49\u8c03\u5ea6 (\u4f8b\u5982, <code>@every 1h</code>, <code>@daily</code>)\u3002\u6709\u5173\u8be6\u7ec6\u4fe1\u606f\uff0c\u8bf7\u53c2\u9605 robfig/cron \u6587\u6863\u3002</li> <li><code>task_file</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): Lua \u4efb\u52a1\u5b9a\u4e49\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>task_group</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): Lua \u6587\u4ef6\u4e2d\u7684\u4efb\u52a1\u7ec4\u540d\u79f0\u3002</li> <li><code>task_name</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u5728\u4efb\u52a1\u7ec4\u4e2d\u6267\u884c\u7684\u7279\u5b9a\u4efb\u52a1\u540d\u79f0\u3002</li> </ul>"},{"location":"zh/scheduler/#cli","title":"CLI \u547d\u4ee4","text":""},{"location":"zh/scheduler/#sloth-runner-scheduler-enable","title":"<code>sloth-runner scheduler enable</code>","text":"<p>\u5c06 <code>sloth-runner</code> \u8c03\u5ea6\u5668\u4f5c\u4e3a\u540e\u53f0\u8fdb\u7a0b\u542f\u52a8\u3002\u6b64\u547d\u4ee4\u786e\u4fdd\u8c03\u5ea6\u5668\u6b63\u5728\u8fd0\u884c\u5e76\u51c6\u5907\u597d\u5904\u7406\u8c03\u5ea6\u4efb\u52a1\u3002</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (\u6216 <code>-c</code>): \u6307\u5b9a <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684 <code>scheduler.yaml</code>\u3002</li> </ul> <p>\u6267\u884c\u540e\uff0c\u547d\u4ee4\u5c06\u6253\u5370\u540e\u53f0\u8c03\u5ea6\u5668\u8fdb\u7a0b\u7684 PID\u3002\u5373\u4f7f\u60a8\u7684\u7ec8\u7aef\u4f1a\u8bdd\u5173\u95ed\uff0c\u8c03\u5ea6\u5668\u4e5f\u5c06\u7ee7\u7eed\u8fd0\u884c\u3002</p>"},{"location":"zh/scheduler/#sloth-runner-scheduler-disable","title":"<code>sloth-runner scheduler disable</code>","text":"<p>\u505c\u6b62\u6b63\u5728\u8fd0\u884c\u7684 <code>sloth-runner</code> \u8c03\u5ea6\u5668\u540e\u53f0\u8fdb\u7a0b\u3002</p> <pre><code>sloth-runner scheduler disable\n</code></pre> <p>\u6b64\u547d\u4ee4\u5c06\u5c1d\u8bd5\u4f18\u96c5\u5730\u7ec8\u6b62\u8c03\u5ea6\u5668\u8fdb\u7a0b\u3002\u5982\u679c\u6210\u529f\uff0c\u5b83\u5c06\u5220\u9664\u7531 <code>enable</code> \u547d\u4ee4\u521b\u5efa\u7684 PID \u6587\u4ef6\u3002</p>"},{"location":"zh/scheduler/#sloth-runner-scheduler-list","title":"<code>sloth-runner scheduler list</code>","text":"<p>\u5217\u51fa <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u4e2d\u5b9a\u4e49\u7684\u6240\u6709\u8c03\u5ea6\u4efb\u52a1\u3002\u6b64\u547d\u4ee4\u63d0\u4f9b\u5df2\u914d\u7f6e\u4efb\u52a1\u3001\u5176\u8c03\u5ea6\u548c\u76f8\u5173 Lua \u4efb\u52a1\u8be6\u7ec6\u4fe1\u606f\u7684\u6982\u8ff0\u3002</p> <pre><code>sloth-runner scheduler list --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>--scheduler-config</code> (\u6216 <code>-c</code>): \u6307\u5b9a <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684 <code>scheduler.yaml</code>\u3002</li> </ul> <p>\u793a\u4f8b\u8f93\u51fa:</p> <pre><code># Configured Scheduled Tasks\n\nNAME                     | SCHEDULE    | FILE                     | GROUP        | TASK\nmy_daily_backup          | 0 0 * * *   | examples/my_workflow.lua | backup_group | perform_backup\nhourly_report_generation | 0 * * * *   | examples/reporting.lua   | reports      | generate_report\n</code></pre>"},{"location":"zh/scheduler/#sloth-runner-scheduler-delete-task_name","title":"<code>sloth-runner scheduler delete &lt;task_name&gt;</code>","text":"<p>\u4ece <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u4e2d\u5220\u9664\u7279\u5b9a\u7684\u8c03\u5ea6\u4efb\u52a1\u3002\u6b64\u547d\u4ee4\u5c06\u5220\u9664\u4efb\u52a1\u5b9a\u4e49\uff0c\u8c03\u5ea6\u5668\u5c06\u4e0d\u518d\u6267\u884c\u5b83\u3002</p> <pre><code>sloth-runner scheduler delete my_daily_backup --scheduler-config scheduler.yaml\n</code></pre> <ul> <li><code>&lt;task_name&gt;</code> (\u5b57\u7b26\u4e32, \u5fc5\u586b): \u8981\u5220\u9664\u7684\u8c03\u5ea6\u4efb\u52a1\u7684\u552f\u4e00\u540d\u79f0\u3002</li> <li><code>--scheduler-config</code> (\u6216 <code>-c</code>): \u6307\u5b9a <code>scheduler.yaml</code> \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\u9ed8\u8ba4\u4e3a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684 <code>scheduler.yaml</code>\u3002</li> </ul> <p>\u91cd\u8981: \u6b64\u547d\u4ee4\u4f1a\u4fee\u6539\u60a8\u7684 <code>scheduler.yaml</code> \u6587\u4ef6\u3002\u5982\u6709\u5fc5\u8981\uff0c\u8bf7\u786e\u4fdd\u60a8\u6709\u5907\u4efd\u3002\u5982\u679c\u8c03\u5ea6\u5668\u5f53\u524d\u6b63\u5728\u8fd0\u884c\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u7981\u7528\u5e76\u91cd\u65b0\u542f\u7528\u5b83\u624d\u80fd\u4f7f\u66f4\u6539\u7acb\u5373\u751f\u6548\u3002</p>"},{"location":"zh/scheduler/#_3","title":"\u65e5\u5fd7\u548c\u9519\u8bef\u5904\u7406","text":"<p>\u8c03\u5ea6\u5668\u5c06\u5176\u6d3b\u52a8\u548c\u8c03\u5ea6\u4efb\u52a1\u7684\u6267\u884c\u72b6\u6001\u8bb0\u5f55\u5230\u6807\u51c6\u8f93\u51fa\u548c\u6807\u51c6\u9519\u8bef\u3002\u5efa\u8bae\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u8fd0\u884c\u65f6\u5c06\u8fd9\u4e9b\u8f93\u51fa\u91cd\u5b9a\u5411\u5230\u65e5\u5fd7\u6587\u4ef6\u3002</p> <p>\u5982\u679c\u8c03\u5ea6\u4efb\u52a1\u5931\u8d25\uff0c\u8c03\u5ea6\u5668\u5c06\u8bb0\u5f55\u9519\u8bef\u5e76\u7ee7\u7eed\u6267\u884c\u5176\u4ed6\u8c03\u5ea6\u4efb\u52a1\u3002\u5b83\u4e0d\u4f1a\u56e0\u5355\u4e2a\u4efb\u52a1\u5931\u8d25\u800c\u505c\u6b62\u3002</p>"},{"location":"zh/scheduler/#_4","title":"\u793a\u4f8b","text":"<ol> <li> <p>\u521b\u5efa <code>scheduler.yaml</code> \u6587\u4ef6:</p> <pre><code>scheduled_tasks:\n  - name: \"my_test_task\"\n    schedule: \"@every 1m\"\n    task_file: \"examples/basic_pipeline.lua\"\n    task_group: \"basic_pipeline\"\n    task_name: \"fetch_data\"\n</code></pre> </li> <li> <p>\u542f\u7528\u8c03\u5ea6\u5668:</p> <pre><code>sloth-runner scheduler enable --scheduler-config scheduler.yaml\n</code></pre> </li> <li> <p>\u89c2\u5bdf\u8f93\u51fa\u3002\u6bcf\u5206\u949f\uff0c\u60a8\u5e94\u8be5\u4f1a\u770b\u5230\u6307\u793a <code>my_test_task</code> \u6267\u884c\u7684\u6d88\u606f\u3002</p> </li> <li> <p>\u505c\u6b62\u8c03\u5ea6\u5668:</p> <pre><code>sloth-runner scheduler disable\n</code></pre> </li> </ol>"},{"location":"zh/testing/","title":"\u6d4b\u8bd5\u5de5\u4f5c\u6d41","text":"<p>sloth-runner \u5305\u542b\u4e00\u4e2a\u5185\u7f6e\u7684\u6d4b\u8bd5\u6846\u67b6\uff0c\u5141\u8bb8\u60a8\u4e3a\u4efb\u52a1\u5de5\u4f5c\u6d41\u7f16\u5199\u5355\u5143\u548c\u96c6\u6210\u6d4b\u8bd5\u3002\u4e3a\u60a8\u7684\u81ea\u52a8\u5316\u7f16\u5199\u6d4b\u8bd5\u5bf9\u4e8e\u786e\u4fdd\u53ef\u9760\u6027\u3001\u9632\u6b62\u56de\u5f52\u4ee5\u53ca\u5728\u8fdb\u884c\u66f4\u6539\u65f6\u5145\u6ee1\u4fe1\u5fc3\u81f3\u5173\u91cd\u8981\u3002</p>"},{"location":"zh/testing/#test","title":"<code>test</code> \u547d\u4ee4","text":"<p>\u60a8\u53ef\u4ee5\u4f7f\u7528 <code>sloth-runner test</code> \u547d\u4ee4\u8fd0\u884c\u6d4b\u8bd5\u6587\u4ef6\u3002\u5b83\u9700\u8981\u4e24\u4e2a\u4e3b\u8981\u6587\u4ef6\uff1a\u60a8\u8981\u6d4b\u8bd5\u7684\u5de5\u4f5c\u6d41\u548c\u6d4b\u8bd5\u811a\u672c\u672c\u8eab\u3002</p> <pre><code>sloth-runner test -w &lt;\u5de5\u4f5c\u6d41\u8def\u5f84.lua&gt; -f &lt;\u6d4b\u8bd5\u6587\u4ef6\u8def\u5f84.lua&gt;\n</code></pre> <ul> <li><code>-w, --workflow</code>: \u6307\u5b9a\u8981\u6d4b\u8bd5\u7684\u4e3b <code>TaskDefinitions</code> \u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>-f, --file</code>: \u6307\u5b9a\u60a8\u7684\u6d4b\u8bd5\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> </ul>"},{"location":"zh/testing/#_2","title":"\u7f16\u5199\u6d4b\u8bd5","text":"<p>\u6d4b\u8bd5\u662f\u7528 Lua \u7f16\u5199\u7684\uff0c\u5e76\u4f7f\u7528\u6d4b\u8bd5\u8fd0\u884c\u5668\u63d0\u4f9b\u7684\u4e24\u4e2a\u65b0\u7684\u5168\u5c40\u6a21\u5757\uff1a<code>test</code> \u548c <code>assert</code>\u3002</p>"},{"location":"zh/testing/#test_1","title":"<code>test</code> \u6a21\u5757","text":"<p><code>test</code> \u6a21\u5757\u7528\u4e8e\u6784\u5efa\u60a8\u7684\u6d4b\u8bd5\u5e76\u8fd0\u884c\u5de5\u4f5c\u6d41\u4e2d\u7684\u7279\u5b9a\u4efb\u52a1\u3002</p> <ul> <li><code>test.describe(suite_name, function)</code>: \u5c06\u76f8\u5173\u6d4b\u8bd5\u5206\u7ec4\u5230\u4e00\u4e2a\u201c\u5957\u4ef6\u201d\u4e2d\u3002\u8fd9\u7528\u4e8e\u7ec4\u7ec7\u3002</li> <li><code>test.it(function)</code>: \u5b9a\u4e49\u5355\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u3002\u6d4b\u8bd5\u7684\u63cf\u8ff0\u5e94\u5305\u542b\u5728\u6b64\u51fd\u6570\u5185\u7684\u65ad\u8a00\u6d88\u606f\u4e2d\u3002</li> <li><code>test.run_task(task_name)</code>: \u8fd9\u662f\u6d4b\u8bd5\u6846\u67b6\u7684\u6838\u5fc3\u529f\u80fd\u3002\u5b83\u4ece\u52a0\u8f7d\u7684\u5de5\u4f5c\u6d41\u6587\u4ef6\u4e2d\u6309\u540d\u79f0\u6267\u884c\u5355\u4e2a\u4efb\u52a1\u3002\u5b83\u8fd4\u56de\u4e00\u4e2a\u5305\u542b\u6267\u884c\u8be6\u7ec6\u4fe1\u606f\u7684 <code>result</code> \u8868\u3002</li> </ul> <p><code>run_task</code> \u8fd4\u56de\u7684 <code>result</code> \u8868\u5177\u6709\u4ee5\u4e0b\u7ed3\u6784\uff1a</p> <pre><code>{\n  success = true, -- \u5e03\u5c14\u503c\uff1a\u5982\u679c\u4efb\u52a1\u6210\u529f\u5219\u4e3a true\uff0c\u5426\u5219\u4e3a false\n  message = \"\u4efb\u52a1\u6267\u884c\u6210\u529f\", -- \u5b57\u7b26\u4e32\uff1a\u4efb\u52a1\u8fd4\u56de\u7684\u6d88\u606f\n  duration = \"1.23ms\", -- \u5b57\u7b26\u4e32\uff1a\u6267\u884c\u6301\u7eed\u65f6\u95f4\n  output = { ... }, -- \u8868\uff1a\u4efb\u52a1\u8fd4\u56de\u7684\u8f93\u51fa\u8868\n  error = nil -- \u5b57\u7b26\u4e32\uff1a\u5982\u679c\u4efb\u52a1\u5931\u8d25\uff0c\u5219\u4e3a\u9519\u8bef\u6d88\u606f\n}\n</code></pre>"},{"location":"zh/testing/#assert","title":"<code>assert</code> \u6a21\u5757","text":"<p><code>assert</code> \u6a21\u5757\u63d0\u4f9b\u7528\u4e8e\u68c0\u67e5\u4efb\u52a1\u6267\u884c\u7ed3\u679c\u7684\u51fd\u6570\u3002</p> <ul> <li><code>assert.is_true(value, message)</code>: \u68c0\u67e5 <code>value</code> \u662f\u5426\u4e3a true\u3002</li> <li><code>assert.equals(actual, expected, message)</code>: \u68c0\u67e5 <code>actual</code> \u503c\u662f\u5426\u7b49\u4e8e <code>expected</code> \u503c\u3002</li> </ul>"},{"location":"zh/testing/#mocking","title":"\u6a21\u5757\u6a21\u62df (Mocking)","text":"<p>\u4e3a\u4e86\u6d4b\u8bd5\u60a8\u7684\u7ba1\u9053\u903b\u8f91\u800c\u65e0\u9700\u8fdb\u884c\u5b9e\u9645\u7684\u5916\u90e8\u8c03\u7528\uff08\u4f8b\u5982\uff0c\u5bf9 AWS\u3001Docker \u6216 Terraform\uff09\uff0c\u6d4b\u8bd5\u6846\u67b6\u5305\u542b\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u6a21\u62df\u529f\u80fd\u3002</p>"},{"location":"zh/testing/#_3","title":"\u4e25\u683c\u6a21\u62df\u7b56\u7565","text":"<p>\u6d4b\u8bd5\u8fd0\u884c\u5668\u5f3a\u5236\u6267\u884c \u4e25\u683c\u7684\u6a21\u62df\u7b56\u7565\u3002\u5728\u6d4b\u8bd5\u6a21\u5f0f\u4e0b\u8fd0\u884c\u65f6\uff0c\u4efb\u4f55\u5bf9\u6a21\u5757\u51fd\u6570\uff08\u5982 <code>aws.exec</code> \u6216 <code>docker.build</code>\uff09\u7684\u8c03\u7528\u5982\u679c \u6ca1\u6709 \u88ab\u660e\u786e\u6a21\u62df\uff0c\u5c06\u5bfc\u81f4\u6d4b\u8bd5\u7acb\u5373\u5931\u8d25\u3002\u8fd9\u53ef\u786e\u4fdd\u60a8\u7684\u6d4b\u8bd5\u662f\u5b8c\u5168\u81ea\u5305\u542b\u7684\u3001\u786e\u5b9a\u6027\u7684\uff0c\u5e76\u4e14\u6ca1\u6709\u610f\u5916\u7684\u526f\u4f5c\u7528\u3002</p>"},{"location":"zh/testing/#testmockfunction_name-mock_definition","title":"<code>test.mock(function_name, mock_definition)</code>","text":"<p>\u6b64\u51fd\u6570\u5141\u8bb8\u60a8\u4e3a\u4efb\u4f55\u53ef\u6a21\u62df\u7684\u6a21\u5757\u51fd\u6570\u5b9a\u4e49\u4e00\u4e2a\u4f2a\u9020\u7684\u8fd4\u56de\u503c\u3002</p> <ul> <li><code>function_name</code> (string): \u8981\u6a21\u62df\u7684\u51fd\u6570\u7684\u5168\u540d\uff08\u4f8b\u5982 <code>\"aws.s3.sync\"</code>, <code>\"docker.build\"</code>\uff09\u3002</li> <li><code>mock_definition</code> (table): \u4e00\u4e2a\u5b9a\u4e49\u6a21\u62df\u51fd\u6570\u5e94\u8fd4\u56de\u4ec0\u4e48\u7684\u8868\u3002\u5b83 \u5fc5\u987b \u5305\u542b\u4e00\u4e2a <code>returns</code> \u952e\uff0c\u8be5\u952e\u662f\u4e00\u4e2a\u51fd\u6570\u5c06\u8fd4\u56de\u7684\u503c\u7684\u5217\u8868\u3002</li> </ul> <p><code>returns</code> \u5217\u8868\u81f3\u5173\u91cd\u8981\uff0c\u56e0\u4e3a Lua \u51fd\u6570\u53ef\u4ee5\u8fd4\u56de\u591a\u4e2a\u503c\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>-- \u6a21\u62df\u4e00\u4e2a\u8fd4\u56de\u5355\u4e2a\u7ed3\u679c\u8868\u7684\u51fd\u6570\ntest.mock(\"docker.build\", {\n  returns = {\n    { success = true, stdout = \"\u6210\u529f\u6784\u5efa\u955c\u50cf\" }\n  }\n})\n\n-- \u6a21\u62df\u4e00\u4e2a\u8fd4\u56de\u4e24\u4e2a\u503c\u7684\u51fd\u6570\uff08\u4f8b\u5982\uff0c\u4e00\u4e2a\u503c\u548c\u4e00\u4e2a\u9519\u8bef\uff09\n-- \u8fd9\u6a21\u62df\u4e86\u5bf9 terraform.output \u7684\u6210\u529f\u8c03\u7528\ntest.mock(\"terraform.output\", {\n  returns = { \"my_file.txt\", nil }\n})\n\n-- \u8fd9\u6a21\u62df\u4e86\u5931\u8d25\u7684\u8c03\u7528\ntest.mock(\"terraform.output\", {\n  returns = { nil, \"\u672a\u627e\u5230\u8f93\u51fa\" }\n})\n</code></pre>"},{"location":"zh/testing/#_4","title":"\u5b8c\u6574\u7684\u6a21\u62df\u793a\u4f8b","text":"<p>\u5047\u8bbe\u60a8\u6709\u4e00\u4e2a\u8c03\u7528 <code>aws.exec</code> \u7684\u4efb\u52a1\uff0c\u5e76\u4e14\u5176\u903b\u8f91\u53d6\u51b3\u4e8e\u8f93\u51fa\u3002</p> <p><code>my_workflow.lua</code> \u4e2d\u7684\u4efb\u52a1: <pre><code>-- ...\n{\n  name = \"check-account\",\n  command = function()\n    local result = aws.exec({\"sts\", \"get-caller-identity\"})\n    local data = data.parse_json(result.stdout)\n    if data.Account == \"123456789012\" then\n      return true, \"\u6b63\u786e\u7684\u5e10\u6237\u3002\"\n    else\n      return false, \"\u9519\u8bef\u7684\u5e10\u6237\u3002\"\n    end\n  end\n}\n-- ...\n</code></pre></p> <p><code>my_test.lua</code> \u4e2d\u7684\u6d4b\u8bd5: <pre><code>test.describe(\"\u5e10\u6237\u68c0\u67e5\u903b\u8f91\", function()\n  test.it(function()\n    -- \u6a21\u62df aws.exec \u7684\u8fd4\u56de\u503c\n    test.mock(\"aws.exec\", {\n      returns = {\n        {\n          success = true,\n          stdout = '{\"Account\": \"123456789012\"}'\n        }\n      }\n    })\n\n    -- \u8fd0\u884c\u4f7f\u7528\u6a21\u62df\u7684\u4efb\u52a1\n    local result = test.run_task(\"check-account\")\n\n    -- \u65ad\u8a00\u4efb\u52a1\u7684\u903b\u8f91\u5728\u6a21\u62df\u6570\u636e\u4e0b\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\n    assert.is_true(result.success, \"\u4f7f\u7528\u6b63\u786e\u7684\u5e10\u6237 ID\uff0c\u4efb\u52a1\u5e94\u8be5\u6210\u529f\")\n    assert.equals(result.message, \"\u6b63\u786e\u7684\u5e10\u6237\u3002\", \"\u6d88\u606f\u5e94\u8be5\u662f\u6b63\u786e\u7684\")\n  end)\nend)\n</code></pre></p>"},{"location":"zh/modules/aws/","title":"AWS \u6a21\u5757","text":"<p><code>aws</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5168\u9762\u7684\u754c\u9762\uff0c\u7528\u4e8e\u4f7f\u7528 AWS CLI \u4e0e\u4e9a\u9a6c\u900a\u7f51\u7edc\u670d\u52a1\u8fdb\u884c\u4ea4\u4e92\u3002\u5b83\u65e8\u5728\u4e0e\u6807\u51c6\u7684 AWS \u51ed\u8bc1\u94fe\u65e0\u7f1d\u534f\u4f5c\uff0c\u5e76\u4e3a <code>aws-vault</code> \u63d0\u4f9b\u4e00\u6d41\u7684\u652f\u6301\u4ee5\u589e\u5f3a\u5b89\u5168\u6027\u3002</p>"},{"location":"zh/modules/aws/#_1","title":"\u914d\u7f6e","text":"<p><code>values.yaml</code> \u4e2d\u65e0\u9700\u7279\u5b9a\u914d\u7f6e\u3002\u8be5\u6a21\u5757\u4f9d\u8d56\u4e8e\u60a8\u7684\u73af\u5883\u914d\u7f6e\u4e3a\u53ef\u4e0e AWS \u4ea4\u4e92\u3002\u8fd9\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u5b9e\u73b0\uff1a - EC2 \u5b9e\u4f8b\u6216 ECS/EKS \u4efb\u52a1\u7684 IAM \u89d2\u8272\u3002 - \u6807\u51c6\u73af\u5883\u53d8\u91cf\uff08<code>AWS_ACCESS_KEY_ID</code>\u3001<code>AWS_SECRET_ACCESS_KEY</code> \u7b49\uff09\u3002 - \u5df2\u914d\u7f6e\u7684 <code>~/.aws/credentials</code> \u6587\u4ef6\u3002 - \u4f7f\u7528\u5e26\u6709\u547d\u540d\u914d\u7f6e\u6587\u4ef6\u7684 <code>aws-vault</code>\u3002</p>"},{"location":"zh/modules/aws/#_2","title":"\u901a\u7528\u6267\u884c\u5668","text":""},{"location":"zh/modules/aws/#awsexecargs-opts","title":"<code>aws.exec(args, opts)</code>","text":"<p>\u8fd9\u662f\u8be5\u6a21\u5757\u7684\u6838\u5fc3\u529f\u80fd\u3002\u5b83\u6267\u884c\u4efb\u4f55 AWS CLI \u547d\u4ee4\u5e76\u8fd4\u56de\u7ed3\u679c\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\uff0c\u8868\u793a\u8981\u4f20\u9012\u7ed9 AWS CLI \u7684\u547d\u4ee4\u548c\u53c2\u6570\uff08\u4f8b\u5982 <code>{\"s3\", \"ls\", \"--recursive\"}</code>\uff09\u3002</li> <li><code>opts</code> (table): \u53ef\u9009\u3002 \u4e00\u4e2a\u6267\u884c\u9009\u9879\u8868\u3002<ul> <li><code>profile</code> (string): \u5982\u679c\u63d0\u4f9b\uff0c\u5c06\u4f7f\u7528 <code>aws-vault exec &lt;profile&gt; -- aws ...</code> \u6267\u884c\u547d\u4ee4\u3002\u5982\u679c\u7701\u7565\uff0c\u5c06\u76f4\u63a5\u8fd0\u884c <code>aws ...</code>\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <p>\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a - <code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\u3002 - <code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u3002 - <code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002<code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>-- \u4f7f\u7528\u9ed8\u8ba4\u51ed\u8bc1\nlocal result = aws.exec({\"sts\", \"get-caller-identity\"})\nif result.exit_code == 0 then\n  print(result.stdout)\nend\n\n-- \u4f7f\u7528 aws-vault \u914d\u7f6e\u6587\u4ef6\nlocal result_with_profile = aws.exec({\"ec2\", \"describe-instances\"}, {profile = \"my-prod-profile\"})\n</code></pre>"},{"location":"zh/modules/aws/#s3","title":"S3 \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/aws/#awss3syncparams","title":"<code>aws.s3.sync(params)</code>","text":"<p><code>aws s3 sync</code> \u547d\u4ee4\u7684\u9ad8\u7ea7\u5305\u88c5\u5668\uff0c\u7528\u4e8e\u5c06\u76ee\u5f55\u4e0e S3 \u540c\u6b65\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>source</code> (string): \u5fc5\u9700\u3002 \u6e90\u76ee\u5f55\u6216 S3 \u8def\u5f84\u3002</li> <li><code>destination</code> (string): \u5fc5\u9700\u3002 \u76ee\u6807\u76ee\u5f55\u6216 S3 \u8def\u5f84\u3002</li> <li><code>profile</code> (string): \u53ef\u9009\u3002 \u8981\u4f7f\u7528\u7684 <code>aws-vault</code> \u914d\u7f6e\u6587\u4ef6\u3002</li> <li><code>delete</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5411\u540c\u6b65\u547d\u4ee4\u6dfb\u52a0 <code>--delete</code> \u6807\u5fd7\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local ok, err = aws.s3.sync({\n  source = \"./build\",\n  destination = \"s3://my-app-bucket/static\",\n  profile = \"deployment-profile\",\n  delete = true\n})\nif not ok then\n  log.error(\"S3 \u540c\u6b65\u5931\u8d25: \" .. err)\nend\n</code></pre>"},{"location":"zh/modules/aws/#secrets-manager","title":"Secrets Manager \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/aws/#awssecretsmanagerget_secretparams","title":"<code>aws.secretsmanager.get_secret(params)</code>","text":"<p>\u4ece AWS Secrets Manager \u68c0\u7d22\u5bc6\u94a5\u7684\u503c\u3002\u6b64\u51fd\u6570\u901a\u8fc7\u76f4\u63a5\u8fd4\u56de <code>SecretString</code> \u6765\u7b80\u5316\u8be5\u8fc7\u7a0b\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>secret_id</code> (string): \u5fc5\u9700\u3002 \u8981\u68c0\u7d22\u7684\u5bc6\u94a5\u7684\u540d\u79f0\u6216 ARN\u3002</li> <li><code>profile</code> (string): \u53ef\u9009\u3002 \u8981\u4f7f\u7528\u7684 <code>aws-vault</code> \u914d\u7f6e\u6587\u4ef6\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>secret_string</code> (string)\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>nil, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local db_password, err = aws.secretsmanager.get_secret({\n  secret_id = \"production/database/password\",\n  profile = \"my-app-profile\"\n})\n\nif not db_password then\n  log.error(\"\u83b7\u53d6\u5bc6\u94a5\u5931\u8d25: \" .. err)\n  return false, \"\u914d\u7f6e\u5931\u8d25\u3002\"\nend\n\n-- \u73b0\u5728\u60a8\u53ef\u4ee5\u4f7f\u7528 db_password \u53d8\u91cf\n</code></pre>"},{"location":"zh/modules/azure/","title":"Azure \u6a21\u5757","text":"<p><code>azure</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4f7f\u7528 <code>az</code> \u547d\u4ee4\u884c\u5de5\u5177\u4e0e Microsoft Azure \u8fdb\u884c\u4ea4\u4e92\u7684\u754c\u9762\u3002</p>"},{"location":"zh/modules/azure/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5\u5e76\u9a8c\u8bc1 <code>az</code> CLI\u3002\u5728\u4f7f\u7528\u6b64\u6a21\u5757\u7684\u7ba1\u9053\u8fd0\u884c\u4e4b\u524d\uff0c\u60a8\u5fc5\u987b\u767b\u5f55\u5230\u60a8\u7684 Azure \u5e10\u6237\uff1a</p> <pre><code>az login\n</code></pre> <p>\u8be5\u6a21\u5757\u5c06\u4f7f\u7528\u60a8\u767b\u5f55\u7684\u51ed\u636e\u6267\u884c\u6240\u6709\u547d\u4ee4\u3002</p>"},{"location":"zh/modules/azure/#_2","title":"\u901a\u7528\u6267\u884c\u5668","text":""},{"location":"zh/modules/azure/#azureexecargs","title":"<code>azure.exec(args)</code>","text":"<p>\u6267\u884c\u4efb\u4f55 <code>az</code> \u547d\u4ee4\u3002\u6b64\u51fd\u6570\u4f1a\u81ea\u52a8\u6dfb\u52a0 <code>--output json</code> \u6807\u5fd7\uff08\u5982\u679c\u5c1a\u4e0d\u5b58\u5728\uff09\uff0c\u4ee5\u786e\u4fdd\u8f93\u51fa\u662f\u673a\u5668\u53ef\u89e3\u6790\u7684\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\uff0c\u8868\u793a\u8981\u4f20\u9012\u7ed9 <code>az</code> \u7684\u547d\u4ee4\u548c\u53c2\u6570\uff08\u4f8b\u5982 <code>{\"group\", \"list\", \"--location\", \"eastus\"}</code>\uff09\u3002</li> </ul> <p>\u8fd4\u56de:</p> <p>\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a - <code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\uff08\u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\uff09\u3002 - <code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u3002 - <code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002<code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>local result = azure.exec({\"account\", \"show\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"\u767b\u5f55\u4e3a: \" .. account_info.user.name)\n  end\nend\n</code></pre>"},{"location":"zh/modules/azure/#rg","title":"\u8d44\u6e90\u7ec4 (RG) \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/azure/#azurergdeleteparams","title":"<code>azure.rg.delete(params)</code>","text":"<p>\u5220\u9664\u8d44\u6e90\u7ec4\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>name</code> (string): \u5fc5\u9700\u3002 \u8981\u5220\u9664\u7684\u8d44\u6e90\u7ec4\u7684\u540d\u79f0\u3002</li> <li><code>yes</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u6dfb\u52a0 <code>--yes</code> \u6807\u5fd7\u4ee5\u7ed5\u8fc7\u786e\u8ba4\u63d0\u793a\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local ok, err = azure.rg.delete({\n  name = \"my-test-rg\",\n  yes = true\n})\nif not ok then\n  log.error(\"\u5220\u9664\u8d44\u6e90\u7ec4\u5931\u8d25: \" .. err)\nend\n</code></pre>"},{"location":"zh/modules/azure/#vm","title":"\u865a\u62df\u673a (VM) \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/azure/#azurevmlistparams","title":"<code>azure.vm.list(params)</code>","text":"<p>\u5217\u51fa\u865a\u62df\u673a\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u53ef\u9009\u3002 \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>resource_group</code> (string): \u7528\u4e8e\u5c06\u5217\u8868\u8303\u56f4\u9650\u5b9a\u4e3a\u7684\u8d44\u6e90\u7ec4\u7684\u540d\u79f0\u3002\u5982\u679c\u7701\u7565\uff0c\u5219\u5217\u51fa\u6574\u4e2a\u8ba2\u9605\u4e2d\u7684 VM\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>vms</code> (table)\uff0c\u8be5\u8868\u662f\u60a8\u7684 VM \u5bf9\u8c61\u7684\u5df2\u89e3\u6790 JSON \u6570\u7ec4\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>nil, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>-- \u5217\u51fa\u8ba2\u9605\u4e2d\u7684\u6240\u6709 VM\nlocal all_vms, err1 = azure.vm.list()\n\n-- \u5217\u51fa\u7279\u5b9a\u8d44\u6e90\u7ec4\u4e2d\u7684 VM\nlocal specific_vms, err2 = azure.vm.list({resource_group = \"my-production-rg\"})\nif specific_vms then\n  for _, vm in ipairs(specific_vms) do\n    print(\"\u627e\u5230 VM: \" .. vm.name)\n  end\nend\n</code></pre>"},{"location":"zh/modules/data/","title":"Data \u6a21\u5757","text":"<p><code>data</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u5728 Lua \u8868\u548c\u5e38\u89c1\u6570\u636e\u683c\u5f0f\uff08\u5982 JSON \u548c YAML\uff09\u4e4b\u95f4\u89e3\u6790\u548c\u5e8f\u5217\u5316\u6570\u636e\u7684\u529f\u80fd\u3002</p>"},{"location":"zh/modules/data/#dataparse_jsonjson_string","title":"<code>data.parse_json(json_string)</code>","text":"<p>\u5c06 JSON \u5b57\u7b26\u4e32\u89e3\u6790\u4e3a Lua \u8868\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>json_string</code> (string): \u8981\u89e3\u6790\u7684 JSON \u683c\u5f0f\u5b57\u7b26\u4e32\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>table</code>: \u751f\u6210\u7684 Lua \u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u89e3\u6790\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#datato_jsonlua_table","title":"<code>data.to_json(lua_table)</code>","text":"<p>\u5c06 Lua \u8868\u5e8f\u5217\u5316\u4e3a JSON \u5b57\u7b26\u4e32\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>lua_table</code> (table): \u8981\u5e8f\u5217\u5316\u7684 Lua \u8868\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u751f\u6210\u7684 JSON \u5b57\u7b26\u4e32\u3002</li> <li><code>error</code>: \u5982\u679c\u5e8f\u5217\u5316\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#dataparse_yamlyaml_string","title":"<code>data.parse_yaml(yaml_string)</code>","text":"<p>\u5c06 YAML \u5b57\u7b26\u4e32\u89e3\u6790\u4e3a Lua \u8868\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>yaml_string</code> (string): \u8981\u89e3\u6790\u7684 YAML \u683c\u5f0f\u5b57\u7b26\u4e32\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>table</code>: \u751f\u6210\u7684 Lua \u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u89e3\u6790\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#datato_yamllua_table","title":"<code>data.to_yaml(lua_table)</code>","text":"<p>\u5c06 Lua \u8868\u5e8f\u5217\u5316\u4e3a YAML \u5b57\u7b26\u4e32\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>lua_table</code> (table): \u8981\u5e8f\u5217\u5316\u7684 Lua \u8868\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u751f\u6210\u7684 YAML \u5b57\u7b26\u4e32\u3002</li> <li><code>error</code>: \u5982\u679c\u5e8f\u5217\u5316\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/data/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  local data = require(\"data\")\n\n  -- JSON \u793a\u4f8b\n  log.info(\"\u6d4b\u8bd5 JSON \u5e8f\u5217\u5316...\")\n  local my_table = { name = \"sloth-runner\", version = 1.0, features = { \"tasks\", \"lua\" } }\n  local json_str, err = data.to_json(my_table)\n  if err then\n    return false, \"\u5e8f\u5217\u5316\u5230 JSON \u5931\u8d25: \" .. err\n  end\n  print(\"\u5e8f\u5217\u5316\u7684 JSON: \" .. json_str)\n\n  log.info(\"\u6d4b\u8bd5 JSON \u89e3\u6790...\")\n  local parsed_table, err = data.parse_json(json_str)\n  if err then\n    return false, \"\u89e3\u6790 JSON \u5931\u8d25: \" .. err\n  end\n  log.info(\"\u4ece JSON \u89e3\u6790\u7684\u540d\u79f0: \" .. parsed_table.name)\n\n  -- YAML \u793a\u4f8b\n  log.info(\"\u6d4b\u8bd5 YAML \u5e8f\u5217\u5316...\")\n  local yaml_str, err = data.to_yaml(my_table)\n  if err then\n    return false, \"\u5e8f\u5217\u5316\u5230 YAML \u5931\u8d25: \" .. err\n  end\n  print(\"\u5e8f\u5217\u5316\u7684 YAML:\\n\" .. yaml_str)\n\n  log.info(\"\u6d4b\u8bd5 YAML \u89e3\u6790...\")\n  parsed_table, err = data.parse_yaml(yaml_str)\n  if err then\n    return false, \"\u89e3\u6790 YAML \u5931\u8d25: \" .. err\n  end\n  log.info(\"\u4ece YAML \u89e3\u6790\u7684\u7248\u672c: \" .. parsed_table.version)\n\n  return true, \"Data \u6a21\u5757\u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre> <p>```</p>"},{"location":"zh/modules/digitalocean/","title":"DigitalOcean \u6a21\u5757","text":"<p><code>digitalocean</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4f7f\u7528 <code>doctl</code> \u547d\u4ee4\u884c\u5de5\u5177\u4e0e\u60a8\u7684 DigitalOcean \u8d44\u6e90\u8fdb\u884c\u4ea4\u4e92\u7684\u754c\u9762\u3002</p>"},{"location":"zh/modules/digitalocean/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5\u5e76\u9a8c\u8bc1 <code>doctl</code> CLI\u3002\u6807\u51c6\u65b9\u6cd5\u662f\u5728\u60a8\u7684 DigitalOcean \u63a7\u5236\u9762\u677f\u4e2d\u751f\u6210\u4e2a\u4eba\u8bbf\u95ee\u4ee4\u724c\uff0c\u5e76\u5c06\u5176\u8bbe\u7f6e\u4e3a <code>DIGITALOCEAN_ACCESS_TOKEN</code> \u73af\u5883\u53d8\u91cf\u3002</p> <pre><code>export DIGITALOCEAN_ACCESS_TOKEN=\"your_do_api_token_here\"\n</code></pre> <p>\u8be5\u6a21\u5757\u5c06\u81ea\u52a8\u5c06\u6b64\u4ee4\u724c\u7528\u4e8e\u6240\u6709\u547d\u4ee4\u3002</p>"},{"location":"zh/modules/digitalocean/#_2","title":"\u901a\u7528\u6267\u884c\u5668","text":""},{"location":"zh/modules/digitalocean/#digitaloceanexecargs","title":"<code>digitalocean.exec(args)</code>","text":"<p>\u6267\u884c\u4efb\u4f55 <code>doctl</code> \u547d\u4ee4\u3002\u6b64\u51fd\u6570\u4f1a\u81ea\u52a8\u6dfb\u52a0 <code>--output json</code> \u6807\u5fd7\uff0c\u4ee5\u786e\u4fdd\u8f93\u51fa\u662f\u673a\u5668\u53ef\u89e3\u6790\u7684\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u4e00\u4e2a\u5b57\u7b26\u4e32\u8868\uff0c\u8868\u793a\u8981\u4f20\u9012\u7ed9 <code>doctl</code> \u7684\u547d\u4ee4\u548c\u53c2\u6570\uff08\u4f8b\u5982 <code>{\"compute\", \"droplet\", \"list\"}</code>\uff09\u3002</li> </ul> <p>\u8fd4\u56de:</p> <p>\u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a - <code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\uff08\u4f5c\u4e3a JSON \u5b57\u7b26\u4e32\uff09\u3002 - <code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u3002 - <code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002<code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</p> <p>\u793a\u4f8b:</p> <pre><code>local result = digitalocean.exec({\"account\", \"get\"})\nif result.exit_code == 0 then\n  local account_info, err = data.parse_json(result.stdout)\n  if account_info then\n    log.info(\"\u5e10\u6237\u72b6\u6001: \" .. account_info.status)\n  end\nend\n</code></pre>"},{"location":"zh/modules/digitalocean/#droplets","title":"Droplets \u8f85\u52a9\u51fd\u6570","text":""},{"location":"zh/modules/digitalocean/#digitaloceandropletslist","title":"<code>digitalocean.droplets.list()</code>","text":"<p>\u4e00\u4e2a\u9ad8\u7ea7\u5305\u88c5\u5668\uff0c\u7528\u4e8e\u5217\u51fa\u60a8\u5e10\u6237\u4e2d\u7684\u6240\u6709 Droplet\u3002</p> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>droplets</code> (table)\uff0c\u8be5\u8868\u662f\u60a8\u7684 Droplet \u5bf9\u8c61\u7684\u5df2\u89e3\u6790 JSON \u6570\u7ec4\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>nil, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local droplets, err = digitalocean.droplets.list()\nif droplets then\n  for _, droplet in ipairs(droplets) do\n    print(\"\u627e\u5230 Droplet: \" .. droplet.name)\n  end\nend\n</code></pre>"},{"location":"zh/modules/digitalocean/#digitaloceandropletsdeleteparams","title":"<code>digitalocean.droplets.delete(params)</code>","text":"<p>\u6309 ID \u5220\u9664\u7279\u5b9a\u7684 Droplet\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>id</code> (string): \u5fc5\u9700\u3002 \u8981\u5220\u9664\u7684 Droplet \u7684 ID\u3002</li> <li><code>force</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u6dfb\u52a0 <code>--force</code> \u6807\u5fd7\u4ee5\u7ed5\u8fc7\u786e\u8ba4\u63d0\u793a\u3002\u9ed8\u8ba4\u4e3a <code>false</code>\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local ok, err = digitalocean.droplets.delete({\n  id = \"123456789\",\n  force = true\n})\nif not ok then\n  log.error(\"\u5220\u9664 droplet \u5931\u8d25: \" .. err)\nend\n</code></pre>"},{"location":"zh/modules/docker/","title":"Docker \u6a21\u5757","text":"<p><code>docker</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u65b9\u4fbf\u7684\u754c\u9762\uff0c\u7528\u4e8e\u4e0e Docker \u5b88\u62a4\u8fdb\u7a0b\u4ea4\u4e92\uff0c\u5141\u8bb8\u60a8\u5728\u7ba1\u9053\u4e2d\u6784\u5efa\u3001\u8fd0\u884c\u548c\u63a8\u9001 Docker \u955c\u50cf\u3002</p>"},{"location":"zh/modules/docker/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5 <code>docker</code> CLI\uff0c\u5e76\u4e14 Docker \u5b88\u62a4\u8fdb\u7a0b\u6b63\u5728\u8fd0\u884c\u4e14\u53ef\u8bbf\u95ee\u3002</p>"},{"location":"zh/modules/docker/#_2","title":"\u51fd\u6570","text":""},{"location":"zh/modules/docker/#dockerexecargs","title":"<code>docker.exec(args)</code>","text":"<p>\u6267\u884c\u4efb\u4f55\u539f\u59cb\u7684 <code>docker</code> \u547d\u4ee4\u3002</p> <ul> <li><code>args</code> (table): \u5fc5\u9700\u3002 \u8981\u4f20\u9012\u7ed9 <code>docker</code> \u547d\u4ee4\u7684\u53c2\u6570\u5217\u8868\uff08\u4f8b\u5982 <code>{\"ps\", \"-a\"}</code>\uff09\u3002</li> <li>\u8fd4\u56de: \u5305\u542b <code>success</code>\u3001<code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#dockerbuildparams","title":"<code>docker.build(params)</code>","text":"<p>\u4f7f\u7528 <code>docker build</code> \u6784\u5efa Docker \u955c\u50cf\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): \u5fc5\u9700\u3002 \u955c\u50cf\u7684\u6807\u7b7e\uff08\u4f8b\u5982 <code>my-app:latest</code>\uff09\u3002</li> <li><code>path</code> (string): \u5fc5\u9700\u3002 \u6784\u5efa\u4e0a\u4e0b\u6587\u8def\u5f84\u3002</li> <li><code>dockerfile</code> (string): \u53ef\u9009\u3002 Dockerfile \u7684\u8def\u5f84\u3002</li> <li><code>build_args</code> (table): \u53ef\u9009\u3002 \u6784\u5efa\u53c2\u6570\u8868\uff08\u4f8b\u5982 <code>{VERSION = \"1.0\"}</code>\uff09\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#dockerpushparams","title":"<code>docker.push(params)</code>","text":"<p>\u4f7f\u7528 <code>docker push</code> \u5c06 Docker \u955c\u50cf\u63a8\u9001\u5230\u6ce8\u518c\u8868\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>tag</code> (string): \u5fc5\u9700\u3002 \u8981\u63a8\u9001\u7684\u955c\u50cf\u7684\u6807\u7b7e\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#dockerrunparams","title":"<code>docker.run(params)</code>","text":"<p>\u4f7f\u7528 <code>docker run</code> \u8fd0\u884c Docker \u5bb9\u5668\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>image</code> (string): \u5fc5\u9700\u3002 \u8981\u8fd0\u884c\u7684\u955c\u50cf\u3002</li> <li><code>name</code> (string): \u53ef\u9009\u3002 \u5bb9\u5668\u7684\u540d\u79f0\u3002</li> <li><code>detach</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u5728\u540e\u53f0\u8fd0\u884c\u5bb9\u5668 (<code>-d</code>)\u3002</li> <li><code>ports</code> (table): \u53ef\u9009\u3002 \u7aef\u53e3\u6620\u5c04\u5217\u8868\uff08\u4f8b\u5982 <code>{\"8080:80\"}</code>\uff09\u3002</li> <li><code>env</code> (table): \u53ef\u9009\u3002 \u73af\u5883\u53d8\u91cf\u8868\uff08\u4f8b\u5982 <code>{MY_VAR = \"value\"}</code>\uff09\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/docker/#_3","title":"\u793a\u4f8b","text":"<pre><code>local image_tag = \"my-test-image:latest\"\n\n-- \u4efb\u52a1 1: Build\nlocal result_build = docker.build({\n  tag = image_tag,\n  path = \"./app\"\n})\nif not result_build.success then return false, \"\u6784\u5efa\u5931\u8d25\" end\n\n-- \u4efb\u52a1 2: Run\nlocal result_run = docker.run({\n  image = image_tag,\n  name = \"my-test-container\",\n  ports = {\"8080:80\"}\n})\nif not result_run.success then return false, \"\u8fd0\u884c\u5931\u8d25\" end\n\n-- \u4efb\u52a1 3: Push (\u6d4b\u8bd5\u6210\u529f\u540e)\nlocal result_push = docker.push({tag = image_tag})\nif not result_push.success then return false, \"\u63a8\u9001\u5931\u8d25\" end\n</code></pre>"},{"location":"zh/modules/exec/","title":"Exec \u6a21\u5757","text":"<p><code>exec</code> \u6a21\u5757\u662f <code>sloth-runner</code> \u4e2d\u6700\u57fa\u672c\u7684\u6a21\u5757\u4e4b\u4e00\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u5f3a\u5927\u7684\u51fd\u6570\u6765\u6267\u884c\u4efb\u610f\u7684 shell \u547d\u4ee4\uff0c\u8ba9\u60a8\u53ef\u4ee5\u5b8c\u5168\u63a7\u5236\u6267\u884c\u73af\u5883\u3002</p>"},{"location":"zh/modules/exec/#execruncommand-options","title":"<code>exec.run(command, [options])</code>","text":"<p>\u4f7f\u7528 <code>bash -c</code> \u6267\u884c\u4e00\u4e2a shell \u547d\u4ee4\u3002</p>"},{"location":"zh/modules/exec/#_1","title":"\u53c2\u6570","text":"<ul> <li><code>command</code> (string): \u8981\u6267\u884c\u7684 shell \u547d\u4ee4\u3002</li> <li><code>options</code> (table, \u53ef\u9009): \u7528\u4e8e\u63a7\u5236\u6267\u884c\u7684\u9009\u9879\u8868\u3002<ul> <li><code>workdir</code> (string): \u547d\u4ee4\u5e94\u5728\u5176\u4e2d\u6267\u884c\u7684\u5de5\u4f5c\u76ee\u5f55\u3002\u5982\u679c\u672a\u63d0\u4f9b\uff0c\u5b83\u5c06\u5728\u4efb\u52a1\u7ec4\u7684\u4e34\u65f6\u76ee\u5f55\uff08\u5982\u679c\u53ef\u7528\uff09\u6216\u5f53\u524d\u76ee\u5f55\u4e2d\u8fd0\u884c\u3002</li> <li><code>env</code> (table): \u4e3a\u547d\u4ee4\u6267\u884c\u8bbe\u7f6e\u7684\u73af\u5883\u53d8\u91cf\u5b57\u5178\uff08\u952e\u503c\u5bf9\uff09\u3002\u8fd9\u4e9b\u53d8\u91cf\u4f1a\u6dfb\u52a0\u5230\u73b0\u6709\u73af\u5883\u4e2d\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/exec/#_2","title":"\u8fd4\u56de","text":"<p>\u4e00\u4e2a\u5305\u542b\u547d\u4ee4\u6267\u884c\u7ed3\u679c\u7684\u8868\uff1a</p> <ul> <li><code>success</code> (boolean): \u5982\u679c\u547d\u4ee4\u4ee5\u4ee3\u7801 <code>0</code> \u9000\u51fa\uff0c\u5219\u4e3a <code>true</code>\uff0c\u5426\u5219\u4e3a <code>false</code>\u3002</li> <li><code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\u3002</li> <li><code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u3002</li> </ul>"},{"location":"zh/modules/exec/#_3","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u5982\u4f55\u4f7f\u7528\u5e26\u6709\u81ea\u5b9a\u4e49\u5de5\u4f5c\u76ee\u5f55\u548c\u73af\u5883\u53d8\u91cf\u7684 <code>exec.run</code>\u3002</p> <pre><code>-- examples/exec_module_example.lua\n\nTaskDefinitions = {\n  main = {\n    description = \"\u4e00\u4e2a\u6f14\u793a exec \u6a21\u5757\u7684\u4efb\u52a1\u3002\",\n    tasks = {\n      {\n        name = \"run-with-options\",\n        description = \"\u4f7f\u7528\u81ea\u5b9a\u4e49\u5de5\u4f5c\u76ee\u5f55\u548c\u73af\u5883\u6267\u884c\u547d\u4ee4\u3002\",\n        command = function()\n          log.info(\"\u51c6\u5907\u8fd0\u884c\u81ea\u5b9a\u4e49\u547d\u4ee4...\")\n\n          local exec = require(\"exec\")\n\n          -- \u4e3a\u793a\u4f8b\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u76ee\u5f55\n          local temp_dir = \"/tmp/sloth-exec-test\"\n          fs.mkdir(temp_dir)\n          fs.write(temp_dir .. \"/test.txt\", \"\u6765\u81ea\u6d4b\u8bd5\u6587\u4ef6\u7684\u95ee\u5019\")\n\n          -- \u5b9a\u4e49\u9009\u9879\n          local options = {\n            workdir = temp_dir,\n            env = {\n              MY_VAR = \"SlothRunner\",\n              ANOTHER_VAR = \"is_awesome\"\n            }\n          }\n\n          -- \u6267\u884c\u547d\u4ee4\n          local result = exec.run(\"echo 'MY_VAR is $MY_VAR' &amp;&amp; ls -l &amp;&amp; cat test.txt\", options)\n\n          -- \u6e05\u7406\u4e34\u65f6\u76ee\u5f55\n          fs.rm_r(temp_dir)\n\n          if result.success then\n            log.info(\"\u547d\u4ee4\u6210\u529f\u6267\u884c\uff01\")\n            print(\"--- STDOUT ---\")\n            print(result.stdout)\n            print(\"--------------\")\n            return true, \"Exec \u547d\u4ee4\u6210\u529f\u3002\"\n          else\n            log.error(\"Exec \u547d\u4ee4\u5931\u8d25\u3002\")\n            log.error(\"Stderr: \" .. result.stderr)\n            return false, \"Exec \u547d\u4ee4\u5931\u8d25\u3002\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/modules/fs/","title":"FS \u6a21\u5757","text":"<p><code>fs</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4ece\u60a8\u7684 Lua \u811a\u672c\u76f4\u63a5\u4e0e\u6587\u4ef6\u7cfb\u7edf\u4ea4\u4e92\u7684\u57fa\u672c\u529f\u80fd\u3002</p> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsreadpath","title":"<code>fs.read(path)</code>","text":"<p>\u8bfb\u53d6\u6587\u4ef6\u7684\u5168\u90e8\u5185\u5bb9\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u6587\u4ef6\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u6587\u4ef6\u5185\u5bb9\u3002</li> <li><code>error</code>: \u5982\u679c\u8bfb\u53d6\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fswritepath-content","title":"<code>fs.write(path, content)</code>","text":"<p>\u5c06\u5185\u5bb9\u5199\u5165\u6587\u4ef6\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u5b58\u5728\u5219\u8986\u76d6\u5b83\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u6587\u4ef6\u8def\u5f84\u3002</li> <li><code>content</code> (string): \u8981\u5199\u5165\u7684\u5185\u5bb9\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u5199\u5165\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsappendpath-content","title":"<code>fs.append(path, content)</code>","text":"<p>\u5c06\u5185\u5bb9\u8ffd\u52a0\u5230\u6587\u4ef6\u672b\u5c3e\u3002\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u6587\u4ef6\u8def\u5f84\u3002</li> <li><code>content</code> (string): \u8981\u8ffd\u52a0\u7684\u5185\u5bb9\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u8ffd\u52a0\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsexistspath","title":"<code>fs.exists(path)</code>","text":"<p>\u68c0\u67e5\u7ed9\u5b9a\u8def\u5f84\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u662f\u5426\u5b58\u5728\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u68c0\u67e5\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>boolean</code>: \u5982\u679c\u8def\u5f84\u5b58\u5728\uff0c\u5219\u4e3a <code>true</code>\uff0c\u5426\u5219\u4e3a <code>false</code>\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsmkdirpath","title":"<code>fs.mkdir(path)</code>","text":"<p>\u5728\u7ed9\u5b9a\u8def\u5f84\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\uff0c\u5305\u62ec\u4efb\u4f55\u5fc5\u8981\u7684\u7236\u76ee\u5f55 (\u7c7b\u4f3c\u4e8e <code>mkdir -p</code>)\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u521b\u5efa\u7684\u76ee\u5f55\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u521b\u5efa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsrmpath","title":"<code>fs.rm(path)</code>","text":"<p>\u5220\u9664\u5355\u4e2a\u6587\u4ef6\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u5220\u9664\u7684\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u5220\u9664\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fsrm_rpath","title":"<code>fs.rm_r(path)</code>","text":"<p>\u9012\u5f52\u5730\u5220\u9664\u6587\u4ef6\u6216\u76ee\u5f55 (\u7c7b\u4f3c\u4e8e <code>rm -rf</code>)\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u8981\u5220\u9664\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u5220\u9664\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fslspath","title":"<code>fs.ls(path)</code>","text":"<p>\u5217\u51fa\u76ee\u5f55\u7684\u5185\u5bb9\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>table</code>: \u5305\u542b\u6587\u4ef6\u548c\u5b50\u76ee\u5f55\u540d\u79f0\u7684\u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u5217\u51fa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul> <p>---\\n</p>"},{"location":"zh/modules/fs/#fstmpname","title":"<code>fs.tmpname()</code>","text":"<p>\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u4e34\u65f6\u76ee\u5f55\u8def\u5f84\u3002\u6ce8\u610f\uff1a\u6b64\u51fd\u6570\u4ec5\u8fd4\u56de\u540d\u79f0\uff0c\u4e0d\u521b\u5efa\u76ee\u5f55\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>string</code>: \u9002\u5408\u7528\u4f5c\u4e34\u65f6\u76ee\u5f55\u7684\u552f\u4e00\u8def\u5f84\u3002</li> <li><code>error</code>: \u5982\u679c\u65e0\u6cd5\u751f\u6210\u540d\u79f0\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/fs/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  local fs = require(\"fs\")\n\n  local tmp_dir = \"/tmp/fs-example\"\n  log.info(\"\u6b63\u5728\u521b\u5efa\u76ee\u5f55: \" .. tmp_dir)\n  fs.mkdir(tmp_dir)\n\n  local file_path = tmp_dir .. \"/my_file.txt\"\n  log.info(\"\u6b63\u5728\u5199\u5165\u6587\u4ef6: \" .. file_path)\n  fs.write(file_path, \"\u4f60\u597d, Sloth Runner!\\n\")\n\n  log.info(\"\u6b63\u5728\u8ffd\u52a0\u5230\u6587\u4ef6...\")\n  fs.append(file_path, \"\u8fd9\u662f\u4e00\u4e2a\u65b0\u884c\u3002\")\n\n  if fs.exists(file_path) then\n    log.info(\"\u6587\u4ef6\u5185\u5bb9: \" .. fs.read(file_path))\n  end\n\n  log.info(\"\u6b63\u5728\u5217\u51fa \" .. tmp_dir .. \" \u7684\u5185\u5bb9\")\n  local contents = fs.ls(tmp_dir)\n  for i, name in ipairs(contents) do\n    print(\"- \" .. name)\n  end\n\n  log.info(\"\u6b63\u5728\u6e05\u7406...\")\n  fs.rm_r(tmp_dir)\n\n  return true, \"FS \u6a21\u5757\u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre> <p>```</p>"},{"location":"zh/modules/gcp/","title":"GCP \u6a21\u5757","text":"<p><code>gcp</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u7684\u754c\u9762\uff0c\u7528\u4e8e\u4ece <code>sloth-runner</code> \u4efb\u52a1\u5185\u90e8\u6267\u884c\u8c37\u6b4c\u4e91\u547d\u4ee4\u884c\u754c\u9762 (<code>gcloud</code>) \u547d\u4ee4\u3002</p>"},{"location":"zh/modules/gcp/#gcpexecargs","title":"<code>gcp.exec(args)</code>","text":"<p>\u4f7f\u7528\u6307\u5b9a\u7684\u53c2\u6570\u6267\u884c <code>gcloud</code> \u547d\u4ee4\u3002</p>"},{"location":"zh/modules/gcp/#_1","title":"\u53c2\u6570","text":"<ul> <li><code>args</code> (table): \u4e00\u4e2a Lua \u8868\uff08\u6570\u7ec4\uff09\uff0c\u5305\u542b\u8981\u4f20\u9012\u7ed9 <code>gcloud</code> \u547d\u4ee4\u7684\u5b57\u7b26\u4e32\u53c2\u6570\u3002\u4f8b\u5982\uff0c<code>{\"compute\", \"instances\", \"list\"}</code>\u3002</li> </ul>"},{"location":"zh/modules/gcp/#_2","title":"\u8fd4\u56de","text":"<p>\u4e00\u4e2a\u5305\u542b\u547d\u4ee4\u6267\u884c\u7ed3\u679c\u7684\u8868\uff0c\u5176\u4e2d\u5305\u542b\u4ee5\u4e0b\u952e\uff1a</p> <ul> <li><code>stdout</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u8f93\u51fa\u3002</li> <li><code>stderr</code> (string): \u547d\u4ee4\u7684\u6807\u51c6\u9519\u8bef\u8f93\u51fa\u3002</li> <li><code>exit_code</code> (number): \u547d\u4ee4\u7684\u9000\u51fa\u4ee3\u7801\u3002\u9000\u51fa\u4ee3\u7801 <code>0</code> \u901a\u5e38\u8868\u793a\u6210\u529f\u3002</li> </ul>"},{"location":"zh/modules/gcp/#_3","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u5b9a\u4e49\u4e86\u4e00\u4e2a\u4efb\u52a1\uff0c\u7528\u4e8e\u5217\u51fa\u7279\u5b9a\u9879\u76ee\u5728 <code>us-central1</code> \u533a\u57df\u4e2d\u7684\u6240\u6709 Compute Engine \u5b9e\u4f8b\u3002</p> <pre><code>-- examples/gcp_cli_example.lua\n\nTaskDefinitions = {\n  main = {\n    description = \"\u4e00\u4e2a\u5217\u51fa GCP \u8ba1\u7b97\u5b9e\u4f8b\u7684\u4efb\u52a1\u3002\",\n    tasks = {\n      {\n        name = \"list-instances\",\n        description = \"\u5217\u51fa us-central1 \u4e2d\u7684 GCE \u5b9e\u4f8b\u3002\",\n        command = function()\n          log.info(\"\u6b63\u5728\u5217\u51fa GCP \u5b9e\u4f8b...\")\n\n          -- \u9700\u8981 gcp \u6a21\u5757\u4f7f\u5176\u53ef\u7528\n          local gcp = require(\"gcp\")\n\n          -- \u6267\u884c gcloud \u547d\u4ee4\n          local result = gcp.exec({\n            \"compute\", \n            \"instances\", \n            \"list\", \n            \"--project\", \"my-gcp-project-id\",\n            \"--zones\", \"us-central1-a,us-central1-b\"\n          })\n\n          -- \u68c0\u67e5\u7ed3\u679c\n          if result and result.exit_code == 0 then\n            log.info(\"\u6210\u529f\u5217\u51fa\u5b9e\u4f8b\u3002\")\n            print(\"--- \u5b9e\u4f8b\u5217\u8868 ---\")\n            print(result.stdout)\n            print(\"---------------------\")\n            return true, \"GCP \u547d\u4ee4\u6210\u529f\u3002\"\n          else\n            log.error(\"\u672a\u80fd\u5217\u51fa GCP \u5b9e\u4f8b\u3002\")\n            if result then\n              log.error(\"Stderr: \" .. result.stderr)\n            end\n            return false, \"GCP \u547d\u4ee4\u5931\u8d25\u3002\"\n          end\n        end\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"zh/modules/git/","title":"Git \u6a21\u5757","text":"<p><code>git</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6d41\u7545\u7684 API \u6765\u4e0e Git \u5b58\u50a8\u5e93\u8fdb\u884c\u4ea4\u4e92\uff0c\u5141\u8bb8\u60a8\u81ea\u52a8\u5316\u5e38\u89c1\u7684\u7248\u672c\u63a7\u5236\u64cd\u4f5c\uff0c\u5982\u514b\u9686\u3001\u63d0\u4ea4\u548c\u63a8\u9001\u3002</p>"},{"location":"zh/modules/git/#gitcloneurl-path","title":"<code>git.clone(url, path)</code>","text":"<p>\u5c06 Git \u5b58\u50a8\u5e93\u514b\u9686\u5230\u672c\u5730\u8def\u5f84\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u514b\u9686\u7684\u5b58\u50a8\u5e93\u7684 URL\u3002</li> <li><code>path</code> (string): \u8981\u514b\u9686\u5230\u7684\u672c\u5730\u76ee\u5f55\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>repo</code> (object): \u6210\u529f\u65f6\u8fd4\u56de\u4e00\u4e2a <code>GitRepo</code> \u5bf9\u8c61\u3002</li> <li><code>error</code>: \u5982\u679c\u514b\u9686\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#gitrepopath","title":"<code>git.repo(path)</code>","text":"<p>\u6253\u5f00\u4e00\u4e2a\u73b0\u6709\u7684\u672c\u5730 Git \u5b58\u50a8\u5e93\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u73b0\u6709\u672c\u5730\u5b58\u50a8\u5e93\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>repo</code> (object): \u6210\u529f\u65f6\u8fd4\u56de\u4e00\u4e2a <code>GitRepo</code> \u5bf9\u8c61\u3002</li> <li><code>error</code>: \u5982\u679c\u8def\u5f84\u4e0d\u662f\u6709\u6548\u7684 Git \u5b58\u50a8\u5e93\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#gitrepo","title":"<code>GitRepo</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u672c\u5730\u5b58\u50a8\u5e93\uff0c\u5e76\u63d0\u4f9b\u53ef\u94fe\u63a5\u7684\u65b9\u6cd5\u6765\u6267\u884c Git \u64cd\u4f5c\u3002</p>"},{"location":"zh/modules/git/#repocheckoutref","title":"<code>repo:checkout(ref)</code>","text":"<p>\u68c0\u51fa\u7279\u5b9a\u7684\u5206\u652f\u3001\u6807\u7b7e\u6216\u63d0\u4ea4\u3002</p> <ul> <li>\u53c2\u6570: <code>ref</code> (string)\u3002</li> </ul>"},{"location":"zh/modules/git/#repopullremote-branch","title":"<code>repo:pull(remote, branch)</code>","text":"<p>\u4ece\u8fdc\u7a0b\u62c9\u53d6\u66f4\u6539\u3002</p> <ul> <li>\u53c2\u6570: <code>remote</code> (string), <code>branch</code> (string)\u3002</li> </ul>"},{"location":"zh/modules/git/#repoaddpattern","title":"<code>repo:add(pattern)</code>","text":"<p>\u5c06\u6587\u4ef6\u6682\u5b58\u4ee5\u8fdb\u884c\u63d0\u4ea4\u3002</p> <ul> <li>\u53c2\u6570: <code>pattern</code> (string), \u4f8b\u5982 <code>\".\"</code> \u6216 <code>\"path/to/file.txt\"</code>\u3002</li> </ul>"},{"location":"zh/modules/git/#repocommitmessage","title":"<code>repo:commit(message)</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a\u63d0\u4ea4\u3002</p> <ul> <li>\u53c2\u6570: <code>message</code> (string)\u3002</li> </ul>"},{"location":"zh/modules/git/#repotagname-message","title":"<code>repo:tag(name, [message])</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a\u65b0\u6807\u7b7e\u3002</p> <ul> <li>\u53c2\u6570: <code>name</code> (string), <code>message</code> (string, \u53ef\u9009)\u3002</li> </ul>"},{"location":"zh/modules/git/#repopushremote-branch-options","title":"<code>repo:push(remote, branch, [options])</code>","text":"<p>\u5c06\u63d0\u4ea4\u63a8\u9001\u5230\u8fdc\u7a0b\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>remote</code> (string)\u3002</li> <li><code>branch</code> (string)\u3002</li> <li><code>options</code> (table, \u53ef\u9009): \u4f8b\u5982 <code>{ follow_tags = true }</code>\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#reporesult","title":"<code>repo:result()</code>","text":"<p>\u6b64\u65b9\u6cd5\u5728\u94fe\u7684\u672b\u5c3e\u8c03\u7528\uff0c\u4ee5\u83b7\u53d6\u6700\u540e\u4e00\u4e2a\u64cd\u4f5c\u7684\u7ed3\u679c\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>success</code> (boolean)\u3001<code>stdout</code> (string) \u548c <code>stderr</code> (string) \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/git/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u7c7b\u4f3c CI/CD \u7684\u5de5\u4f5c\u6d41\uff1a\u514b\u9686\u3001\u521b\u5efa\u7248\u672c\u6587\u4ef6\u3001\u6dfb\u52a0\u3001\u63d0\u4ea4\u3001\u6253\u6807\u7b7e\u548c\u63a8\u9001\u3002</p> <pre><code>command = function()\n  local git = require(\"git\")\n  local repo_path = \"/tmp/git-example-repo\"\n\n  -- \u6e05\u7406\u4ee5\u524d\u7684\u8fd0\u884c\n  fs.rm_r(repo_path)\n\n  -- 1. \u514b\u9686\u5b58\u50a8\u5e93\n  log.info(\"\u6b63\u5728\u514b\u9686\u5b58\u50a8\u5e93...\")\n  local repo, err = git.clone(\"https://github.com/chalkan3/sloth-runner.git\", repo_path)\n  if err then\n    return false, \"\u514b\u9686\u5931\u8d25: \" .. err\n  end\n\n  -- 2. \u521b\u5efa\u5e76\u5199\u5165\u7248\u672c\u6587\u4ef6\n  fs.write(repo_path .. \"/VERSION\", \"1.2.3\")\n\n  -- 3. \u94fe\u63a5 Git \u547d\u4ee4: add -&gt; commit -&gt; tag -&gt; push\n  log.info(\"\u6b63\u5728\u6dfb\u52a0\u3001\u63d0\u4ea4\u3001\u6253\u6807\u7b7e\u548c\u63a8\u9001...\")\n  repo:add(\".\"):commit(\"ci: Bump version to 1.2.3\"):tag(\"v1.2.3\"):push(\"origin\", \"main\", { follow_tags = true })\n\n  -- 4. \u83b7\u53d6\u6700\u7ec8\u64cd\u4f5c (push) \u7684\u7ed3\u679c\n  local result = repo:result()\n\n  if not result.success then\n    log.error(\"Git \u63a8\u9001\u5931\u8d25: \" .. result.stderr)\n    return false, \"Git \u63a8\u9001\u5931\u8d25\u3002\"\n  end\n\n  log.info(\"\u6210\u529f\u63a8\u9001\u65b0\u7248\u672c\u6807\u7b7e\u3002\")\n  return true, \"Git \u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/log/","title":"Log \u6a21\u5757","text":"<p><code>log</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u800c\u5fc5\u8981\u7684\u63a5\u53e3\uff0c\u7528\u4e8e\u4ece\u60a8\u7684 Lua \u811a\u672c\u4e2d\u5c06\u6d88\u606f\u8bb0\u5f55\u5230 <code>sloth-runner</code> \u63a7\u5236\u53f0\u3002\u5728\u4efb\u52a1\u6267\u884c\u671f\u95f4\uff0c\u4f7f\u7528\u6b64\u6a21\u5757\u662f\u63d0\u4f9b\u53cd\u9988\u548c\u8c03\u8bd5\u4fe1\u606f\u7684\u6807\u51c6\u65b9\u5f0f\u3002</p>"},{"location":"zh/modules/log/#loginfomessage","title":"<code>log.info(message)</code>","text":"<p>\u4ee5 INFO \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u8fd9\u662f\u7528\u4e8e\u4e00\u822c\u4fe1\u606f\u6027\u6d88\u606f\u7684\u6807\u51c6\u7ea7\u522b\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#logwarnmessage","title":"<code>log.warn(message)</code>","text":"<p>\u4ee5 WARN \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u8fd9\u9002\u7528\u4e8e\u5e94\u5f15\u8d77\u7528\u6237\u6ce8\u610f\u7684\u975e\u5173\u952e\u95ee\u9898\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#logerrormessage","title":"<code>log.error(message)</code>","text":"<p>\u4ee5 ERROR \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u8fd9\u5e94\u7528\u4e8e\u53ef\u80fd\u5bfc\u81f4\u4efb\u52a1\u5931\u8d25\u7684\u91cd\u5927\u9519\u8bef\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#logdebugmessage","title":"<code>log.debug(message)</code>","text":"<p>\u4ee5 DEBUG \u7ea7\u522b\u8bb0\u5f55\u4e00\u6761\u6d88\u606f\u3002\u9664\u975e\u8fd0\u884c\u5668\u5904\u4e8e\u8be6\u7ec6\u6216\u8c03\u8bd5\u6a21\u5f0f\uff0c\u5426\u5219\u8fd9\u4e9b\u6d88\u606f\u901a\u5e38\u662f\u9690\u85cf\u7684\u3002\u5b83\u4eec\u5bf9\u4e8e\u8be6\u7ec6\u7684\u8bca\u65ad\u4fe1\u606f\u5f88\u6709\u7528\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>message</code> (string): \u8981\u8bb0\u5f55\u7684\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/log/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  -- log \u6a21\u5757\u662f\u5168\u5c40\u53ef\u7528\u7684\uff0c\u4e0d\u9700\u8981 require\u3002\n\n  log.info(\"\u542f\u52a8\u65e5\u5fd7\u8bb0\u5f55\u793a\u4f8b\u4efb\u52a1\u3002\")\n\n  local user_name = \"Sloth\"\n  log.debug(\"\u5f53\u524d\u7528\u6237\u662f: \" .. user_name)\n\n  if user_name ~= \"Sloth\" then\n    log.warn(\"\u7528\u6237\u4e0d\u662f\u9884\u671f\u7684\u7528\u6237\u3002\")\n  end\n\n  log.info(\"\u4efb\u52a1\u6b63\u5728\u6267\u884c\u5176\u4e3b\u8981\u64cd\u4f5c...\")\n\n  local success = true -- \u6a21\u62df\u4e00\u6b21\u6210\u529f\u7684\u64cd\u4f5c\n  if not success then\n    log.error(\"\u4e3b\u8981\u64cd\u4f5c\u610f\u5916\u5931\u8d25\uff01\")\n    return false, \"\u4e3b\u8981\u64cd\u4f5c\u5931\u8d25\"\n  end\n\n  log.info(\"\u65e5\u5fd7\u8bb0\u5f55\u793a\u4f8b\u4efb\u52a1\u6210\u529f\u5b8c\u6210\u3002\")\n  return true, \"\u65e5\u5fd7\u8bb0\u5f55\u5df2\u6f14\u793a\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/net/","title":"Net \u6a21\u5757","text":"<p><code>net</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u53d1\u51fa HTTP \u8bf7\u6c42\u548c\u4e0b\u8f7d\u6587\u4ef6\u7684\u529f\u80fd\uff0c\u5141\u8bb8\u60a8\u7684\u4efb\u52a1\u4e0e Web \u670d\u52a1\u548c\u8fdc\u7a0b\u8d44\u6e90\u8fdb\u884c\u4ea4\u4e92\u3002</p>"},{"location":"zh/modules/net/#nethttp_geturl","title":"<code>net.http_get(url)</code>","text":"<p>\u5411\u6307\u5b9a\u7684 URL \u6267\u884c HTTP GET \u8bf7\u6c42\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u53d1\u9001 GET \u8bf7\u6c42\u7684 URL\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>body</code> (string): \u4f5c\u4e3a\u5b57\u7b26\u4e32\u7684\u54cd\u5e94\u4f53\u3002</li> <li><code>status_code</code> (number): \u54cd\u5e94\u7684 HTTP \u72b6\u6001\u7801\u3002</li> <li><code>headers</code> (table): \u5305\u542b\u54cd\u5e94\u5934\u7684\u8868\u3002</li> <li><code>error</code> (string): \u5982\u679c\u8bf7\u6c42\u5931\u8d25\uff0c\u5219\u4e3a\u9519\u8bef\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/net/#nethttp_posturl-body-headers","title":"<code>net.http_post(url, body, [headers])</code>","text":"<p>\u5411\u6307\u5b9a\u7684 URL \u6267\u884c HTTP POST \u8bf7\u6c42\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u53d1\u9001 POST \u8bf7\u6c42\u7684 URL\u3002</li> <li><code>body</code> (string): \u8981\u53d1\u9001\u7684\u8bf7\u6c42\u4f53\u3002</li> <li><code>headers</code> (table, \u53ef\u9009): \u8981\u8bbe\u7f6e\u7684\u8bf7\u6c42\u5934\u8868\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>body</code> (string): \u4f5c\u4e3a\u5b57\u7b26\u4e32\u7684\u54cd\u5e94\u4f53\u3002</li> <li><code>status_code</code> (number): \u54cd\u5e94\u7684 HTTP \u72b6\u6001\u7801\u3002</li> <li><code>headers</code> (table): \u5305\u542b\u54cd\u5e94\u5934\u7684\u8868\u3002</li> <li><code>error</code> (string): \u5982\u679c\u8bf7\u6c42\u5931\u8d25\uff0c\u5219\u4e3a\u9519\u8bef\u6d88\u606f\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/net/#netdownloadurl-destination_path","title":"<code>net.download(url, destination_path)</code>","text":"<p>\u4ece URL \u4e0b\u8f7d\u6587\u4ef6\u5e76\u5c06\u5176\u4fdd\u5b58\u5230\u672c\u5730\u8def\u5f84\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>url</code> (string): \u8981\u4e0b\u8f7d\u7684\u6587\u4ef6\u7684 URL\u3002</li> <li><code>destination_path</code> (string): \u7528\u4e8e\u4fdd\u5b58\u4e0b\u8f7d\u5185\u5bb9\u7684\u672c\u5730\u6587\u4ef6\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u4e0b\u8f7d\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/net/#_1","title":"\u793a\u4f8b","text":"<pre><code>command = function()\n  local net = require(\"net\")\n\n  -- GET \u8bf7\u6c42\u793a\u4f8b\n  log.info(\"\u6b63\u5728\u5411 httpbin.org \u6267\u884c GET \u8bf7\u6c42...\")\n  local body, status, headers, err = net.http_get(\"https://httpbin.org/get\")\n  if err then\n    log.error(\"GET \u8bf7\u6c42\u5931\u8d25: \" .. err)\n    return false, \"GET \u8bf7\u6c42\u5931\u8d25\"\n  end\n  log.info(\"GET \u8bf7\u6c42\u6210\u529f\uff01\u72b6\u6001: \" .. status)\n  -- print(\"\u54cd\u5e94\u4f53: \" .. body)\n\n  -- POST \u8bf7\u6c42\u793a\u4f8b\n  log.info(\"\u6b63\u5728\u5411 httpbin.org \u6267\u884c POST \u8bf7\u6c42...\")\n  local post_body = '{\"name\": \"sloth-runner\", \"awesome\": true}'\n  local post_headers = { [\"Content-Type\"] = \"application/json\" }\n  body, status, headers, err = net.http_post(\"https://httpbin.org/post\", post_body, post_headers)\n  if err then\n    log.error(\"POST \u8bf7\u6c42\u5931\u8d25: \" .. err)\n    return false, \"POST \u8bf7\u6c42\u5931\u8d25\"\n  end\n  log.info(\"POST \u8bf7\u6c42\u6210\u529f\uff01\u72b6\u6001: \" .. status)\n  -- print(\"\u54cd\u5e94\u4f53: \" .. body)\n\n  -- \u4e0b\u8f7d\u793a\u4f8b\n  local download_path = \"/tmp/sloth-runner-logo.svg\"\n  log.info(\"\u6b63\u5728\u4e0b\u8f7d\u6587\u4ef6\u5230 \" .. download_path)\n  local err = net.download(\"https://raw.githubusercontent.com/chalkan3/sloth-runner/master/assets/sloth-runner-logo.svg\", download_path)\n  if err then\n    log.error(\"\u4e0b\u8f7d\u5931\u8d25: \" .. err)\n    return false, \"\u4e0b\u8f7d\u5931\u8d25\"\n  end\n  log.info(\"\u6587\u4ef6\u4e0b\u8f7d\u6210\u529f\u3002\")\n  fs.rm(download_path) -- \u6e05\u7406\n\n  return true, \"Net \u6a21\u5757\u64cd\u4f5c\u6210\u529f\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/notifications/","title":"\u901a\u77e5\u6a21\u5757","text":"<p><code>notifications</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u79cd\u4ece\u60a8\u7684\u7ba1\u9053\u5411\u5404\u79cd\u901a\u77e5\u670d\u52a1\u53d1\u9001\u6d88\u606f\u7684\u7b80\u5355\u65b9\u6cd5\u3002\u8fd9\u5bf9\u4e8e\u62a5\u544a CI/CD \u5de5\u4f5c\u6d41\u7684\u6210\u529f\u6216\u5931\u8d25\u7279\u522b\u6709\u7528\u3002</p> <p>\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u670d\u52a1\uff1a - Slack - ntfy</p>"},{"location":"zh/modules/notifications/#_2","title":"\u914d\u7f6e","text":"<p>\u5728\u4f7f\u7528\u8be5\u6a21\u5757\u4e4b\u524d\uff0c\u60a8\u9700\u8981\u5c06\u6240\u9700\u7684\u51ed\u636e\u6216 URL \u6dfb\u52a0\u5230\u60a8\u7684 <code>configs/values.yaml</code> \u6587\u4ef6\u4e2d\u3002\u8be5\u6a21\u5757\u5c06\u5728\u8fd0\u884c\u65f6\u8bfb\u53d6\u8fd9\u4e9b\u503c\u3002</p> <pre><code># configs/values.yaml\n\nnotifications:\n  slack:\n    # \u60a8\u7684 Slack Incoming Webhook URL\n    webhook_url: \"https://hooks.slack.com/services/...\"\n  ntfy:\n    # \u8981\u4f7f\u7528\u7684 ntfy \u670d\u52a1\u5668\u3002\u53ef\u4ee5\u662f\u516c\u5171\u670d\u52a1\u5668\u6216\u81ea\u6258\u7ba1\u670d\u52a1\u5668\u3002\n    server: \"https://ntfy.sh\"\n    # \u7528\u4e8e\u53d1\u5e03\u901a\u77e5\u7684\u4e3b\u9898\u3002\n    topic: \"your-sloth-runner-topic\"\n</code></pre>"},{"location":"zh/modules/notifications/#slack","title":"Slack","text":""},{"location":"zh/modules/notifications/#notificationsslacksendparams","title":"<code>notifications.slack.send(params)</code>","text":"<p>\u901a\u8fc7 Incoming Webhook \u5411 Slack \u9891\u9053\u53d1\u9001\u6d88\u606f\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>webhook_url</code> (string): \u5fc5\u9700\u3002 Slack Incoming Webhook URL\u3002\u5efa\u8bae\u4ece <code>values</code> \u6a21\u5757\u83b7\u53d6\u3002</li> <li><code>message</code> (string): \u5fc5\u9700\u3002 \u6d88\u606f\u7684\u4e3b\u8981\u6587\u672c\u3002</li> <li><code>pipeline</code> (string): \u53ef\u9009\u3002 \u7ba1\u9053\u7684\u540d\u79f0\uff0c\u5c06\u663e\u793a\u5728\u6d88\u606f\u9644\u4ef6\u4e2d\u4ee5\u63d0\u4f9b\u4e0a\u4e0b\u6587\u3002</li> <li><code>error_details</code> (string): \u53ef\u9009\u3002 \u8981\u5305\u542b\u5728\u6d88\u606f\u9644\u4ef6\u4e2d\u7684\u4efb\u4f55\u9519\u8bef\u8be6\u7ec6\u4fe1\u606f\u3002\u8fd9\u5bf9\u4e8e\u5931\u8d25\u901a\u77e5\u5f88\u6709\u7528\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local values = require(\"values\")\n\nlocal slack_webhook = values.get(\"notifications.slack.webhook_url\")\n\nif slack_webhook and slack_webhook ~= \"\" then\n  -- \u6210\u529f\u65f6\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u2705 \u7ba1\u9053\u6210\u529f\u6267\u884c\uff01\",\n    pipeline = \"my-awesome-pipeline\"\n  })\n\n  -- \u5931\u8d25\u65f6\n  notifications.slack.send({\n    webhook_url = slack_webhook,\n    message = \"\u274c \u7ba1\u9053\u6267\u884c\u5931\u8d25\uff01\",\n    pipeline = \"my-awesome-pipeline\",\n    error_details = \"\u65e0\u6cd5\u8fde\u63a5\u5230\u6570\u636e\u5e93\u3002\"\n  })\nend\n</code></pre>"},{"location":"zh/modules/notifications/#ntfy","title":"ntfy","text":""},{"location":"zh/modules/notifications/#notificationsntfysendparams","title":"<code>notifications.ntfy.send(params)</code>","text":"<p>\u5411 ntfy.sh \u4e3b\u9898\u53d1\u9001\u6d88\u606f\u3002</p> <p>\u53c2\u6570:</p> <ul> <li><code>params</code> (table): \u4e00\u4e2a\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u7684\u8868\uff1a<ul> <li><code>server</code> (string): \u5fc5\u9700\u3002 ntfy \u670d\u52a1\u5668 URL\u3002</li> <li><code>topic</code> (string): \u5fc5\u9700\u3002 \u8981\u53d1\u9001\u6d88\u606f\u7684\u4e3b\u9898\u3002</li> <li><code>message</code> (string): \u5fc5\u9700\u3002 \u901a\u77e5\u7684\u6b63\u6587\u3002</li> <li><code>title</code> (string): \u53ef\u9009\u3002 \u901a\u77e5\u7684\u6807\u9898\u3002</li> <li><code>priority</code> (string): \u53ef\u9009\u3002 \u901a\u77e5\u4f18\u5148\u7ea7\uff08\u4f8b\u5982 <code>high</code>, <code>default</code>, <code>low</code>\uff09\u3002</li> <li><code>tags</code> (table): \u53ef\u9009\u3002 \u8981\u6dfb\u52a0\u5230\u901a\u77e5\u4e2d\u7684\u6807\u7b7e\uff08\u8868\u60c5\u7b26\u53f7\uff09\u5217\u8868\u3002</li> </ul> </li> </ul> <p>\u8fd4\u56de:</p> <ul> <li>\u6210\u529f\u65f6\u8fd4\u56de <code>true</code>\u3002</li> <li>\u5931\u8d25\u65f6\u8fd4\u56de <code>false, error_message</code>\u3002</li> </ul> <p>\u793a\u4f8b:</p> <pre><code>local values = require(\"values\")\n\nlocal ntfy_server = values.get(\"notifications.ntfy.server\")\nlocal ntfy_topic = values.get(\"notifications.ntfy.topic\")\n\nif ntfy_topic and ntfy_topic ~= \"\" then\n  -- \u6210\u529f\u65f6\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"\u7ba1\u9053\u6210\u529f\",\n    message = \"\u7ba1\u9053\u65e0\u9519\u8bef\u5b8c\u6210\u3002\",\n    priority = \"default\",\n    tags = {\"tada\"}\n  })\n\n  -- \u5931\u8d25\u65f6\n  notifications.ntfy.send({\n    server = ntfy_server,\n    topic = ntfy_topic,\n    title = \"\u7ba1\u9053\u5931\u8d25\uff01\",\n    message = \"\u7ba1\u9053\u56e0\u9519\u8bef\u800c\u5931\u8d25\u3002\",\n    priority = \"high\",\n    tags = {\"skull\", \"warning\"}\n  })\nend\n</code></pre>"},{"location":"zh/modules/pulumi/","title":"Pulumi \u6a21\u5757","text":"<p><code>pulumi</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6d41\u7545\u7684 API \u6765\u7f16\u6392 Pulumi \u5806\u6808\uff0c\u4f7f\u60a8\u80fd\u591f\u76f4\u63a5\u4ece <code>sloth-runner</code> \u7ba1\u7406\u60a8\u7684\u57fa\u7840\u8bbe\u65bd\u5373\u4ee3\u7801 (IaC) \u5de5\u4f5c\u6d41\u3002</p>"},{"location":"zh/modules/pulumi/#pulumistackname-options","title":"<code>pulumi.stack(name, options)</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a Pulumi \u5806\u6808\u5bf9\u8c61\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>name</code> (string): \u5806\u6808\u7684\u5168\u540d (\u4f8b\u5982, <code>\"my-org/my-project/dev\"</code>)\u3002</li> <li><code>options</code> (table): \u4e00\u4e2a\u9009\u9879\u8868\u3002<ul> <li><code>workdir</code> (string): (\u5fc5\u9700) Pulumi \u9879\u76ee\u76ee\u5f55\u7684\u8def\u5f84\u3002</li> </ul> </li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>stack</code> (object): \u4e00\u4e2a <code>PulumiStack</code> \u5bf9\u8c61\u3002</li> <li><code>error</code>: \u5982\u679c\u65e0\u6cd5\u521d\u59cb\u5316\u5806\u6808\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/pulumi/#pulumistack","title":"<code>PulumiStack</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u7279\u5b9a\u7684 Pulumi \u5806\u6808\uff0c\u5e76\u63d0\u4f9b\u7528\u4e8e\u4ea4\u4e92\u7684\u65b9\u6cd5\u3002</p>"},{"location":"zh/modules/pulumi/#stackupoptions","title":"<code>stack:up([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi up</code> \u521b\u5efa\u6216\u66f4\u65b0\u5806\u6808\u7684\u8d44\u6e90\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>options</code> (table, \u53ef\u9009):<ul> <li><code>yes</code> (boolean): \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u4f20\u9012 <code>--yes</code> \u4ee5\u81ea\u52a8\u6279\u51c6\u66f4\u65b0\u3002</li> <li><code>config</code> (table): \u8981\u4f20\u9012\u7ed9\u5806\u6808\u7684\u914d\u7f6e\u503c\u5b57\u5178\u3002</li> <li><code>args</code> (table): \u8981\u4f20\u9012\u7ed9\u547d\u4ee4\u7684\u9644\u52a0\u5b57\u7b26\u4e32\u53c2\u6570\u5217\u8868\u3002</li> </ul> </li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>success</code> (boolean)\u3001<code>stdout</code> (string) \u548c <code>stderr</code> (string) \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/pulumi/#stackpreviewoptions","title":"<code>stack:preview([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi preview</code> \u9884\u89c8\u66f4\u65b0\u5c06\u8fdb\u884c\u7684\u66f4\u6539\u3002</p> <ul> <li>\u53c2\u6570: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> <li>\u8fd4\u56de: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> </ul>"},{"location":"zh/modules/pulumi/#stackrefreshoptions","title":"<code>stack:refresh([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi refresh</code> \u5237\u65b0\u5806\u6808\u7684\u72b6\u6001\u3002</p> <ul> <li>\u53c2\u6570: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> <li>\u8fd4\u56de: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> </ul>"},{"location":"zh/modules/pulumi/#stackdestroyoptions","title":"<code>stack:destroy([options])</code>","text":"<p>\u901a\u8fc7\u8fd0\u884c <code>pulumi destroy</code> \u9500\u6bc1\u5806\u6808\u4e2d\u7684\u6240\u6709\u8d44\u6e90\u3002</p> <ul> <li>\u53c2\u6570: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> <li>\u8fd4\u56de: \u4e0e <code>stack:up</code> \u76f8\u540c\u3002</li> </ul>"},{"location":"zh/modules/pulumi/#stackoutputs","title":"<code>stack:outputs()</code>","text":"<p>\u68c0\u7d22\u5df2\u90e8\u7f72\u5806\u6808\u7684\u8f93\u51fa\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>outputs</code> (table): \u5806\u6808\u8f93\u51fa\u7684 Lua \u8868\u3002</li> <li><code>error</code>: \u5982\u679c\u83b7\u53d6\u8f93\u51fa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/pulumi/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u663e\u793a\u4e86\u4e00\u4e2a\u5e38\u89c1\u6a21\u5f0f\uff1a\u90e8\u7f72\u4e00\u4e2a\u7f51\u7edc\u5806\u6808 (VPC)\uff0c\u7136\u540e\u4f7f\u7528\u5176\u8f93\u51fa (<code>vpcId</code>) \u6765\u914d\u7f6e\u548c\u90e8\u7f72\u4e00\u4e2a\u5e94\u7528\u7a0b\u5e8f\u5806\u6808\u3002</p> <pre><code>command = function()\n  local pulumi = require(\"pulumi\")\n\n  -- 1. \u5b9a\u4e49 VPC \u5806\u6808\n  local vpc_stack = pulumi.stack(\"my-org/vpc/prod\", { workdir = \"./pulumi/vpc\" })\n\n  -- 2. \u90e8\u7f72 VPC\n  log.info(\"\u6b63\u5728\u90e8\u7f72 VPC \u5806\u6808...\")\n  local vpc_result = vpc_stack:up({ yes = true })\n  if not vpc_result.success then\n    return false, \"VPC \u90e8\u7f72\u5931\u8d25: \" .. vpc_result.stderr\n  end\n\n  -- 3. \u4ece\u5176\u8f93\u51fa\u4e2d\u83b7\u53d6 VPC ID\n  log.info(\"\u6b63\u5728\u83b7\u53d6 VPC \u8f93\u51fa...\")\n  local vpc_outputs, err = vpc_stack:outputs()\n  if err then\n    return false, \"\u83b7\u53d6 VPC \u8f93\u51fa\u5931\u8d25: \" .. err\n  end\n  local vpc_id = vpc_outputs.vpcId\n\n  -- 4. \u5b9a\u4e49\u5e94\u7528\u7a0b\u5e8f\u5806\u6808\n  local app_stack = pulumi.stack(\"my-org/app/prod\", { workdir = \"./pulumi/app\" })\n\n  -- 5. \u90e8\u7f72\u5e94\u7528\u7a0b\u5e8f\uff0c\u5c06 vpcId \u4f5c\u4e3a\u914d\u7f6e\u4f20\u9012\n  log.info(\"\u6b63\u5728\u5c06\u5e94\u7528\u7a0b\u5e8f\u5806\u6808\u90e8\u7f72\u5230 VPC: \" .. vpc_id)\n  local app_result = app_stack:up({\n    yes = true,\n    config = { [\"my-app:vpcId\"] = vpc_id }\n  })\n  if not app_result.success then\n    return false, \"\u5e94\u7528\u7a0b\u5e8f\u90e8\u7f72\u5931\u8d25: \" .. app_result.stderr\n  end\n\n  log.info(\"\u6240\u6709\u5806\u6808\u5747\u5df2\u6210\u529f\u90e8\u7f72\u3002\")\n  return true, \"Pulumi \u7f16\u6392\u5b8c\u6210\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/python/","title":"Python \u6a21\u5757","text":"<p><code>python</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b9\u4fbf\u7684\u65b9\u5f0f\u6765\u7ba1\u7406 Python \u865a\u62df\u73af\u5883 (<code>venv</code>) \u5e76\u4ece\u60a8\u7684 <code>sloth-runner</code> \u4efb\u52a1\u4e2d\u6267\u884c\u811a\u672c\u3002\u8fd9\u5bf9\u4e8e\u6d89\u53ca\u57fa\u4e8e Python \u7684\u5de5\u5177\u6216\u811a\u672c\u7684\u5de5\u4f5c\u6d41\u7279\u522b\u6709\u7528\u3002</p>"},{"location":"zh/modules/python/#pythonvenvpath","title":"<code>python.venv(path)</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a Python \u865a\u62df\u73af\u5883\u5bf9\u8c61\u3002\u8bf7\u6ce8\u610f\uff0c\u8fd9\u53ea\u5728 Lua \u4e2d\u521b\u5efa\u5bf9\u8c61\uff1b\u73af\u5883\u672c\u8eab\u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u76f4\u5230\u60a8\u8c03\u7528 <code>:create()</code> \u540e\u624d\u88ab\u521b\u5efa\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>path</code> (string): \u5e94\u5728\u5176\u4e2d\u521b\u5efa\u865a\u62df\u73af\u5883\u7684\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84 (\u4f8b\u5982, <code>./.venv</code>)\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>venv</code> (object): \u4e00\u4e2a\u865a\u62df\u73af\u5883\u5bf9\u8c61\uff0c\u5305\u542b\u4e0e\u5176\u4ea4\u4e92\u7684\u65b9\u6cd5\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#venvcreate","title":"<code>venv:create()</code>","text":"<p>\u5728\u6307\u5b9a\u8def\u5f84\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0a\u521b\u5efa\u865a\u62df\u73af\u5883\u3002</p> <ul> <li>\u8fd4\u56de:<ul> <li><code>error</code>: \u5982\u679c\u521b\u5efa\u5931\u8d25\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#venvpipcommand","title":"<code>venv:pip(command)</code>","text":"<p>\u5728\u865a\u62df\u73af\u5883\u7684\u4e0a\u4e0b\u6587\u4e2d\u6267\u884c <code>pip</code> \u547d\u4ee4\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>command</code> (string): \u8981\u4f20\u9012\u7ed9 <code>pip</code> \u7684\u53c2\u6570 (\u4f8b\u5982, <code>install -r requirements.txt</code>)\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>pip</code> \u547d\u4ee4\u7684 <code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#venvexecscript_path","title":"<code>venv:exec(script_path)</code>","text":"<p>\u4f7f\u7528\u865a\u62df\u73af\u5883\u4e2d\u7684 Python \u89e3\u91ca\u5668\u6267\u884c Python \u811a\u672c\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>script_path</code> (string): \u8981\u6267\u884c\u7684 Python \u811a\u672c\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b\u811a\u672c\u6267\u884c\u7684 <code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/python/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u4e00\u4e2a\u5b8c\u6574\u7684\u751f\u547d\u5468\u671f\uff1a\u521b\u5efa\u865a\u62df\u73af\u5883\u3001\u4ece <code>requirements.txt</code> \u6587\u4ef6\u5b89\u88c5\u4f9d\u8d56\u9879\u4ee5\u53ca\u8fd0\u884c Python \u811a\u672c\u3002</p> <pre><code>-- examples/python_venv_lifecycle_example.lua\n\nTaskDefinitions = {\n  main = {\n    description = \"\u4e00\u4e2a\u6f14\u793a Python venv \u751f\u547d\u5468\u671f\u7684\u4efb\u52a1\u3002\",\n    create_workdir_before_run = true, -- \u4f7f\u7528\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\n    tasks = {\n      {\n        name = \"run-python-script\",\n        description = \"\u521b\u5efa venv\uff0c\u5b89\u88c5\u4f9d\u8d56\u9879\u5e76\u8fd0\u884c\u811a\u672c\u3002\",\n        command = function(params) \n          local python = require(\"python\")\n          local workdir = params.workdir -- \u4ece\u7ec4\u4e2d\u83b7\u53d6\u4e34\u65f6\u5de5\u4f5c\u76ee\u5f55\n\n          -- 1. \u5c06\u6211\u4eec\u7684 Python \u811a\u672c\u548c\u4f9d\u8d56\u9879\u5199\u5165\u5de5\u4f5c\u76ee\u5f55\n          fs.write(workdir .. \"/requirements.txt\", \"requests==2.28.1\")\n          fs.write(workdir .. \"/main.py\", \"import requests\\nprint(f'Hello from Python! Using requests version: {requests.__version__}')\")\n\n          -- 2. \u521b\u5efa\u4e00\u4e2a venv \u5bf9\u8c61\n          local venv_path = workdir .. \"/.venv\"\n          log.info(\"\u6b63\u5728\u8bbe\u7f6e\u865a\u62df\u73af\u5883\u4e8e: \" .. venv_path)\n          local venv = python.venv(venv_path)\n\n          -- 3. \u5728\u6587\u4ef6\u7cfb\u7edf\u4e0a\u521b\u5efa venv\n          venv:create()\n\n          -- 4. \u4f7f\u7528 pip \u5b89\u88c5\u4f9d\u8d56\u9879\n          log.info(\"\u6b63\u5728\u4ece requirements.txt \u5b89\u88c5\u4f9d\u8d56\u9879...\")\n          local pip_result = venv:pip(\"install -r \" .. workdir .. \"/requirements.txt\")\n          if pip_result.exit_code ~= 0 then\n            log.error(\"Pip \u5b89\u88c5\u5931\u8d25: \" .. pip_result.stderr)\n            return false, \"\u672a\u80fd\u5b89\u88c5 Python \u4f9d\u8d56\u9879\u3002\"\n          end\n\n          -- 5. \u6267\u884c\u811a\u672c\n          log.info(\"\u6b63\u5728\u8fd0\u884c Python \u811a\u672c...\")\n          local exec_result = venv:exec(workdir .. \"/main.py\")\n          if exec_result.exit_code ~= 0 then\n            log.error(\"Python \u811a\u672c\u5931\u8d25: \" .. exec_result.stderr)\n            return false, \"Python \u811a\u672c\u6267\u884c\u5931\u8d25\u3002\"\n          end\n\n          log.info(\"Python \u811a\u672c\u6210\u529f\u6267\u884c\u3002\")\n          print(\"--- Python \u811a\u672c\u8f93\u51fa ---\")\n          print(exec_result.stdout)\n          print(\"----------------------------\")\n\n          return true, \"Python venv \u751f\u547d\u5468\u671f\u5b8c\u6210\u3002\"\n        end\n      }\n    }\n  }\n}\n</code></pre> <p>```</p>"},{"location":"zh/modules/salt/","title":"Salt \u6a21\u5757","text":"<p><code>salt</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6d41\u7545\u7684 API \u6765\u4e0e SaltStack \u8fdb\u884c\u4ea4\u4e92\uff0c\u5141\u8bb8\u60a8\u4ece <code>sloth-runner</code> \u5de5\u4f5c\u6d41\u4e2d\u8fd0\u884c\u8fdc\u7a0b\u6267\u884c\u547d\u4ee4\u548c\u7ba1\u7406\u914d\u7f6e\u3002</p>"},{"location":"zh/modules/salt/#saltclientoptions","title":"<code>salt.client([options])</code>","text":"<p>\u521b\u5efa\u4e00\u4e2a Salt \u5ba2\u6237\u7aef\u5bf9\u8c61\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>options</code> (table, \u53ef\u9009): \u4e00\u4e2a\u9009\u9879\u8868\u3002<ul> <li><code>config_path</code> (string): Salt master \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> </ul> </li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>client</code> (object): \u4e00\u4e2a <code>SaltClient</code> \u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/salt/#saltclient","title":"<code>SaltClient</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a Salt master \u7684\u5ba2\u6237\u7aef\uff0c\u5e76\u63d0\u4f9b\u7528\u4e8e\u5b9a\u4f4d minions \u7684\u65b9\u6cd5\u3002</p>"},{"location":"zh/modules/salt/#clienttargettarget_string-expr_form","title":"<code>client:target(target_string, [expr_form])</code>","text":"<p>\u6307\u5b9a\u547d\u4ee4\u7684\u76ee\u6807 minion\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>target_string</code> (string): \u76ee\u6807\u8868\u8fbe\u5f0f (\u4f8b\u5982, <code>\"*\"</code> \u8868\u793a\u6240\u6709 minions, <code>\"web-server-1\"</code>, \u6216\u4e00\u4e2a grain \u503c)\u3002</li> <li><code>expr_form</code> (string, \u53ef\u9009): \u8981\u4f7f\u7528\u7684\u5b9a\u4f4d\u7c7b\u578b (\u4f8b\u5982, <code>\"glob\"</code>, <code>\"grain\"</code>, <code>\"list\"</code>)\u3002\u9ed8\u8ba4\u4e3a glob\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>target</code> (object): \u4e00\u4e2a <code>SaltTarget</code> \u5bf9\u8c61\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/salt/#salttarget","title":"<code>SaltTarget</code> \u5bf9\u8c61","text":"<p>\u6b64\u5bf9\u8c61\u8868\u793a\u4e00\u4e2a\u7279\u5b9a\u7684\u76ee\u6807\uff0c\u5e76\u63d0\u4f9b\u53ef\u94fe\u63a5\u7684\u65b9\u6cd5\u6765\u6267\u884c Salt \u51fd\u6570\u3002</p>"},{"location":"zh/modules/salt/#targetcmdfunction-arg1-arg2","title":"<code>target:cmd(function, [arg1, arg2, ...])</code>","text":"<p>\u5728\u76ee\u6807\u4e0a\u6267\u884c Salt \u6267\u884c\u6a21\u5757\u51fd\u6570\u3002</p> <ul> <li>\u53c2\u6570:<ul> <li><code>function</code> (string): \u8981\u8fd0\u884c\u7684\u51fd\u6570\u7684\u540d\u79f0 (\u4f8b\u5982, <code>\"test.ping\"</code>, <code>\"state.apply\"</code>, <code>\"cmd.run\"</code>)\u3002</li> <li><code>arg1</code>, <code>arg2</code>, ... (any): \u8981\u4f20\u9012\u7ed9 Salt \u51fd\u6570\u7684\u9644\u52a0\u53c2\u6570\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li><code>result</code> (table): \u4e00\u4e2a\u5305\u542b <code>success</code> (boolean)\u3001<code>stdout</code> (string \u6216 table) \u548c <code>stderr</code> (string) \u7684\u8868\u3002\u5982\u679c Salt \u547d\u4ee4\u8fd4\u56de JSON\uff0c<code>stdout</code> \u5c06\u662f\u4e00\u4e2a\u89e3\u6790\u540e\u7684 Lua \u8868\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/salt/#_1","title":"\u793a\u4f8b","text":"<p>\u6b64\u793a\u4f8b\u6f14\u793a\u4e86\u5982\u4f55\u5b9a\u4f4d minions \u4ee5 ping \u5b83\u4eec\u5e76\u5e94\u7528 Salt \u72b6\u6001\u3002</p> <pre><code>command = function()\n  local salt = require(\"salt\")\n\n  -- 1. \u521b\u5efa\u4e00\u4e2a Salt \u5ba2\u6237\u7aef\n  local client = salt.client()\n\n  -- 2. \u5b9a\u4f4d\u6240\u6709 minions \u5e76 ping \u5b83\u4eec\n  log.info(\"\u6b63\u5728 ping \u6240\u6709 minions...\")\n  local ping_result = client:target(\"*\"):cmd(\"test.ping\")\n  if not ping_result.success then\n    return false, \"Ping minions \u5931\u8d25: \" .. ping_result.stderr\n  end\n  print(\"Ping \u7ed3\u679c:\")\n  print(data.to_yaml(ping_result.stdout)) -- stdout \u662f\u4e00\u4e2a\u8868\n\n  -- 3. \u5b9a\u4f4d\u4e00\u4e2a\u7279\u5b9a\u7684 web \u670d\u52a1\u5668\u5e76\u5e94\u7528\u4e00\u4e2a\u72b6\u6001\n  log.info(\"\u6b63\u5728\u5411 web-server-1 \u5e94\u7528 'nginx' \u72b6\u6001...\")\n  local apply_result = client:target(\"web-server-1\", \"glob\"):cmd(\"state.apply\", \"nginx\")\n  if not apply_result.success then\n    return false, \"\u5e94\u7528\u72b6\u6001\u5931\u8d25: \" .. apply_result.stderr\n  end\n\n  log.info(\"\u72b6\u6001\u6210\u529f\u5e94\u7528\u3002\")\n  return true, \"Salt \u64cd\u4f5c\u5b8c\u6210\u3002\"\nend\n</code></pre>"},{"location":"zh/modules/terraform/","title":"Terraform \u6a21\u5757","text":"<p><code>terraform</code> \u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ad8\u7ea7\u754c\u9762\uff0c\u7528\u4e8e\u7f16\u6392 <code>terraform</code> CLI \u547d\u4ee4\uff0c\u5141\u8bb8\u60a8\u76f4\u63a5\u5728 Sloth-Runner \u7ba1\u9053\u5185\u7ba1\u7406\u60a8\u7684\u57fa\u7840\u67b6\u6784\u751f\u547d\u5468\u671f\u3002</p>"},{"location":"zh/modules/terraform/#_1","title":"\u914d\u7f6e","text":"<p>\u6b64\u6a21\u5757\u9700\u8981\u5b89\u88c5 <code>terraform</code> CLI \u5e76\u53ef\u5728\u7cfb\u7edf\u7684 PATH \u4e2d\u4f7f\u7528\u3002\u6240\u6709\u547d\u4ee4\u90fd\u5fc5\u987b\u5728\u60a8\u7684 <code>.tf</code> \u6587\u4ef6\u6240\u5728\u7684\u7279\u5b9a <code>workdir</code> \u4e2d\u6267\u884c\u3002</p>"},{"location":"zh/modules/terraform/#_2","title":"\u51fd\u6570","text":""},{"location":"zh/modules/terraform/#terraforminitparams","title":"<code>terraform.init(params)</code>","text":"<p>\u521d\u59cb\u5316 Terraform \u5de5\u4f5c\u76ee\u5f55\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u5305\u542b Terraform \u6587\u4ef6\u7684\u76ee\u5f55\u7684\u8def\u5f84\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u5305\u542b <code>success</code>\u3001<code>stdout</code>\u3001<code>stderr</code> \u548c <code>exit_code</code> \u7684\u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformplanparams","title":"<code>terraform.plan(params)</code>","text":"<p>\u521b\u5efa Terraform \u6267\u884c\u8ba1\u5212\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>out</code> (string): \u53ef\u9009\u3002 \u7528\u4e8e\u4fdd\u5b58\u751f\u6210\u7684\u8ba1\u5212\u7684\u6587\u4ef6\u540d\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformapplyparams","title":"<code>terraform.apply(params)</code>","text":"<p>\u5e94\u7528 Terraform \u8ba1\u5212\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>plan</code> (string): \u53ef\u9009\u3002 \u8981\u5e94\u7528\u7684\u8ba1\u5212\u6587\u4ef6\u7684\u8def\u5f84\u3002</li> <li><code>auto_approve</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u65e0\u9700\u4ea4\u4e92\u5f0f\u6279\u51c6\u5373\u53ef\u5e94\u7528\u66f4\u6539\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformdestroyparams","title":"<code>terraform.destroy(params)</code>","text":"<p>\u9500\u6bc1 Terraform \u7ba1\u7406\u7684\u57fa\u7840\u67b6\u6784\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>auto_approve</code> (boolean): \u53ef\u9009\u3002 \u5982\u679c\u4e3a <code>true</code>\uff0c\u5219\u65e0\u9700\u4ea4\u4e92\u5f0f\u6279\u51c6\u5373\u53ef\u9500\u6bc1\u8d44\u6e90\u3002</li> </ul> </li> <li>\u8fd4\u56de: \u7ed3\u679c\u8868\u3002</li> </ul>"},{"location":"zh/modules/terraform/#terraformoutputparams","title":"<code>terraform.output(params)</code>","text":"<p>\u4ece Terraform \u72b6\u6001\u6587\u4ef6\u8bfb\u53d6\u8f93\u51fa\u53d8\u91cf\u3002</p> <ul> <li><code>params</code> (table):<ul> <li><code>workdir</code> (string): \u5fc5\u9700\u3002 \u76ee\u5f55\u7684\u8def\u5f84\u3002</li> <li><code>name</code> (string): \u53ef\u9009\u3002 \u8981\u8bfb\u53d6\u7684\u7279\u5b9a\u8f93\u51fa\u7684\u540d\u79f0\u3002\u5982\u679c\u7701\u7565\uff0c\u5219\u6240\u6709\u8f93\u51fa\u90fd\u4f5c\u4e3a\u8868\u8fd4\u56de\u3002</li> </ul> </li> <li>\u8fd4\u56de:<ul> <li>\u6210\u529f\u65f6: \u8f93\u51fa\u7684\u5df2\u89e3\u6790 JSON \u503c\uff08\u53ef\u4ee5\u662f\u5b57\u7b26\u4e32\u3001\u8868\u7b49\uff09\u3002</li> <li>\u5931\u8d25\u65f6: <code>nil, error_message</code>\u3002</li> </ul> </li> </ul>"},{"location":"zh/modules/terraform/#_3","title":"\u5b8c\u6574\u751f\u547d\u5468\u671f\u793a\u4f8b","text":"<pre><code>local tf_workdir = \"./examples/terraform\"\n\n-- \u4efb\u52a1 1: Init\nlocal result_init = terraform.init({workdir = tf_workdir})\nif not result_init.success then return false, \"Init \u5931\u8d25\" end\n\n-- \u4efb\u52a1 2: Plan\nlocal result_plan = terraform.plan({workdir = tf_workdir})\nif not result_plan.success then return false, \"Plan \u5931\u8d25\" end\n\n-- \u4efb\u52a1 3: Apply\nlocal result_apply = terraform.apply({workdir = tf_workdir, auto_approve = true})\nif not result_apply.success then return false, \"Apply \u5931\u8d25\" end\n\n-- \u4efb\u52a1 4: Get Output\nlocal filename, err = terraform.output({workdir = tf_workdir, name = \"report_filename\"})\nif not filename then return false, \"Output \u5931\u8d25: \" .. err end\nlog.info(\"Terraform \u521b\u5efa\u7684\u6587\u4ef6: \" .. filename)\n\n-- \u4efb\u52a1 5: Destroy\nlocal result_destroy = terraform.destroy({workdir = tf_workdir, auto_approve = true})\nif not result_destroy.success then return false, \"Destroy \u5931\u8d25\" end\n</code></pre>"}]}